<?php

/*
Written by Chris Jean for iThemes.com
Version 2.3.0

Version History
	2.0.0 - 2010-01-07
		Changed filter builder_layout_engine_register_layout_sidebars to builder_layout_engine_register_sidebars
		Changed filter builder_get_layout_modules to builder_get_modules
		Changed function register_layout_sidebars to register_sidebars
	2.1.0 - 2010-01-18
		Changed builder_layout_engine_register_sidebars to builder_sidebar_register_layout_sidebars
		Changed builder_layout_engine_register_sidebar to builder_sidebar_register
		Changed builder_layout_engine_render_sidebar to builder_sidebar_render
	2.1.1 - 2010-01-18
		Changed register_sidebars to register_layout_sidebars
	2.1.2 - 2010-02-22
		Added additional widget classes: widget-single, widget-top, widget-middle, widget-bottom, and
			widget-COUNT
	2.1.3 - 2010-02-24
		Fixed code warnings generated by changes in 2.1.2
	2.1.4 - 2010-02-26
		Added widget-single class to empty sidebar widget
	2.1.5 - 2010-04-01
		Fixed "No sidebars defined" problem with saving Widgets with compatibility mode enabled
	2.1.6 - 2010-04-26
		Internationalized strings
	2.1.7 - 2010-06-29
		Updated placeholder widgets to use a real widget complete with filter support.
	2.1.8 - 2010-09-20
		Added protection against the same layout's sidebars being registered multiple times.
	2.1.9 - 2010-09-27
		Added filter builder_filter_sidebar_default_widget_args
		This filter is useful to modify the behavior of the default widget that is added to an empty sidebar.
	2.2.0 - 2010-10-05
		Added _sidebar_names variable to keep track of which name corresponds with which ID.
		Added $builder_current_sidebar global variable to keep track of the currently rendering sidebar stack.
	2.2.1 - 2010-12-14
		Sidebar index and name discovery is now much more streamlined and uses caching
		
		Added _get_registered_sidebar_index and _get_registered_sidebar
	2.2.2 - 2011-03-09
		Added compatibility fix for the Widget Logic plugin
	2.2.3 - 2011-06-28 - Chris Jean
		Added unique IDs for all the filler widgets
	2.3.0 - 2011-07-05 - Chris Jean
		Improved handling of widget registering and rendering
*/


if ( ! class_exists( 'BuilderSidebars' ) ) {
	class BuilderSidebars {
		var $_modules = array();
		var $_layout_settings = array();
		var $_registered_layouts = array();
		var $_sidebar_sanitized_names = array();
		var $_registered_sidebars = array();
		
		var $_filler_widget_id = 0;
		
		
		function BuilderSidebars() {
			if ( empty( $_POST ) || isset( $_POST['savewidget'] ) || isset( $_POST['removewidget'] ) || isset( $_POST['widget_logic-options-submit'] ) )
				add_action( 'sidebar_admin_setup', array( &$this, 'admin_register_all_sidebars' ) );
			
			add_action( 'init', array( &$this, 'init' ) );
			
			add_action( 'builder_sidebar_register_layout_sidebars', array( &$this, 'register_layout_sidebars' ) );
			add_action( 'builder_sidebar_register', array( &$this, 'register_sidebar' ) );
			add_action( 'builder_sidebar_render', array( &$this, 'render_sidebar' ) );
			
			add_filter( 'pre_update_option_sidebars_widgets', array( &$this, 'filter_sidebars_widgets' ) );
			
			add_filter( 'dynamic_sidebar_params', array( &$this, 'filter_widget_params' ) );
		}
		
		function init() {
			$this->_modules = apply_filters( 'builder_get_modules', array() );
			$this->_layout_settings = apply_filters( 'it_storage_load_layout_settings', array() );
		}
		
		function filter_sidebars_widgets( $data ) {
			if ( ! defined( 'DOING_AJAX' ) || ( true !== DOING_AJAX ) || ! isset( $_REQUEST['action'] ) || ( 'widgets-order' !== $_REQUEST['action'] ) )
				return $data;
			
			$widgets = get_option( 'sidebars_widgets' );
			
			foreach ( (array) $data as $id => $entry )
				$widgets[$id] = $entry;
			
			return $widgets;
		}
		
		function admin_register_all_sidebars() {
			global $wp_registered_sidebars;
			
			foreach ( (array) $this->_layout_settings['layouts'] as $layout => $layout_data ) {
				if ( ! empty( $_REQUEST['builder_layout_id'] ) ) {
					if ( $layout == $_REQUEST['builder_layout_id'] )
						$this->register_layout_sidebars( $layout );
				}
				else if ( ! isset( $layout_data['hide_widgets'] ) || ( 'yes' !== $layout_data['hide_widgets'] ) )
					$this->register_layout_sidebars( $layout );
			}
			
			$cached_sidebars = $wp_registered_sidebars;
			
			foreach ( (array) $this->_layout_settings['layouts'] as $layout => $layout_data ) {
				if ( ! empty( $_REQUEST['builder_layout_id'] ) ) {
					if ( $layout != $_REQUEST['builder_layout_id'] )
						$this->register_layout_sidebars( $layout );
				}
				else if ( isset( $layout_data['hide_widgets'] ) && ( 'yes' === $layout_data['hide_widgets'] ) )
					$this->register_layout_sidebars( $layout );
			}
			
			$this->_hidden_sidebars = array();
			
			foreach ( (array) $wp_registered_sidebars as $id => $sidebar ) {
				if ( ! isset( $cached_sidebars[$id] ) )
					$this->_hidden_sidebars[] = $id;
			}
			
			add_action( 'admin_head', array( &$this, 'admin_unregister_hidden_sidebars' ) );
		}
		
		function admin_add_unregister_hidden_sidebars() {
			add_action( 'admin_head', array( &$this, 'admin_unregister_hidden_sidebars' ) );
		}
		
		function admin_unregister_hidden_sidebars() {
			foreach ( (array) $this->_hidden_sidebars as $id )
				unregister_sidebar( $id );
		}
		
		function register_layout_sidebars( $layout ) {
			if ( ! empty( $this->_registered_layouts[$layout] ) )
				return;
			
			if ( isset( $this->_layout_settings['layouts'][$layout] ) ) {
				foreach ( (array) $this->_layout_settings['layouts'][$layout]['modules'] as $id => $module ) {
					if ( method_exists( $this->_modules[$module['module']], 'register_sidebars' ) )
						$this->_modules[$module['module']]->register_sidebars( $module, $id, $this->_layout_settings['layouts'][$layout]['description'] );
				}
				
				$this->_registered_layouts[$layout] = true;
			}
		}
		
		function register_sidebar( $options ) {
			$default_options = array(
				'before_widget' => '<div class="widget %2$s" id="%1$s">',
				'after_widget'  => '</div>',
				'before_title'  => '<h4 class="widget-title">',
				'after_title'   => '</h4>'
			);
			
			if ( ! is_array( $options ) )
				$options = array( 'name' => $options );
			
			$options = array_merge( $default_options, $options );
			
			if ( empty( $options['id'] ) )
				$options['id'] = str_replace( ' ', '', preg_replace( '/(\w)\s(\w)/', '$1_$2', strtolower( $options['name'] ) ) );
			
			$options = apply_filters( 'builder_filter_register_sidebar_options', $options );
			
			
			$id = register_sidebar( $options );
			
			$this->_sidebar_names[$options['name']] = $id;
		}
		
		function render_sidebar( $options ) {
			global $wp_registered_sidebars;
			
			$this->_widget_count = 1;
			
			if ( ! isset( $this->_widgets ) )
				$this->_widgets = wp_get_sidebars_widgets();
			
			
			$this->_sidebar_index = $options['sidebar_name'];
			
			if ( is_int( $this->_sidebar_index ) )
				$this->_sidebar_index = "sidebar-{$this->_sidebar_index}";
			else
				$this->_sidebar_index = $this->_get_registered_sidebar_index( $this->_sidebar_index );
			
			if ( isset( $this->_widgets[$this->_sidebar_index] ) )
				$this->_num_widgets = count( $this->_widgets[$this->_sidebar_index] );
			else
				$this->_num_widgets = 0;
			
			
			$this->dynamic_sidebar( $options['sidebar_name'] );
			
			
			unset( $this->_widget_count );
			unset( $this->_current_sidebar );
		}
		
		function filter_widget_params( $params ) {
			if ( isset( $this->_widget_count ) ) {
				$classes = array( "widget-$this->_widget_count" );
				
				if ( $this->_num_widgets <= 1 )
					$classes[] = 'widget-single';
				else if ( 1 === $this->_widget_count )
					$classes[] = 'widget-top';
				else if ( $this->_num_widgets === $this->_widget_count )
					$classes[] = 'widget-bottom';
				else
					$classes[] = 'widget-middle';
				
				$class = implode( ' ', $classes );
				
				/*
					Should this really be hardcoded to the 0 index?
					wp-includes/widgets.php dynamic_sidebar function hardcodes to 0, but is that a mistake too?
				*/
				$params[0]['before_widget'] = preg_replace( '/(class="widget) /', "$1 $class ", $params[0]['before_widget'] );
				
				$this->_widget_count++;
			}
			
			return $params;
		}
		
		function dynamic_sidebar( $index ) {
			global $builder_current_sidebar;
			
			if ( ! is_array( $builder_current_sidebar ) )
				$builder_current_sidebar = array();
			
			if ( isset( $this->_sidebar_names[$index] ) )
				$builder_current_sidebar[] = $this->_sidebar_names[$index];
			else
				$builder_current_sidebar[] = $index;
			
			$sidebar_index = $this->_get_registered_sidebar_index( $index );
			
			if ( empty( $sidebar_index ) ) {
				if ( current_user_can( 'switch_themes' ) )
					printf( __( 'A problem happened with the widget area registration. This sidebar has an index of <code>%s</code> but it was unable to be found in the registered sidebars.', 'it-l10n-Builder' ), $index );
			}
			else if ( builder_identify_widget_area( dynamic_sidebar( $sidebar_index ) ) ) {
				$instance = array(
					'title'		=> __( 'This is a Widget Section', 'it-l10n-Builder' ),
					'text'		=> sprintf( __( 'This section is widgetized. If you would like to add content to this section, you may do so by using the Widgets panel from within your WordPress Admin Dashboard. This Widget Section is called "<strong>%s</strong>"', 'it-l10n-Builder' ), $index ),
					'filter'	=> 'on',
				);
				
				
				$sidebar = $this->_get_registered_sidebar( $sidebar_index );
				
				$widget_id = 'builder_info_widget_' . $this->_filler_widget_id++;
				
				$params = array( array_merge( $sidebar, array( 'widget_id' => $widget_id, 'widget_name' => 'text' ) ) );
				
				// Substitute HTML id and class attributes into before_widget
				$params[0]['before_widget'] = sprintf( $params[0]['before_widget'], $widget_id, 'widget_text' );
				
				$params = apply_filters( 'dynamic_sidebar_params', $params );
				
				
				$args = apply_filters( 'builder_filter_sidebar_default_widget_args', array( 'WP_Widget_Text', $instance, $params[0] ) );
				call_user_func_array( 'the_widget', $args );
			}
			
			array_pop( $builder_current_sidebar );
		}
		
		function _get_registered_sidebar_index( $name ) {
			global $wp_registered_sidebars;
			
			if ( isset( $wp_registered_sidebars[$name] ) )
				return $name;
			if ( isset( $this->_sidebar_names[$name] ) && isset( $wp_registered_sidebars[$this->_sidebar_names[$name]] ) )
				return $this->_sidebar_names[$name];
			
			
			// Fallback for non-theme sidebars
			
			$name = sanitize_title( $name );
			
			if ( isset( $this->_sidebar_sanitized_names[$name] ) && isset( $wp_registered_sidebars[$this->_sidebar_sanitized_names[$name]] ) )
				return $wp_registered_sidebars[$this->_sidebar_sanitized_names[$name]];
			
			foreach ( (array) $wp_registered_sidebars as $key => $value )
				$this->_sidebar_sanitized_names[sanitize_title( $value['name'] )] = $key;
			
			if ( isset( $this->_sidebar_sanitized_names[$name] ) && isset( $wp_registered_sidebars[$this->_sidebar_sanitized_names[$name]] ) )
				return $this->_sidebar_sanitized_names[$name];
			
			return '';
		}
		
		function _get_registered_sidebar( $name ) {
			global $wp_registered_sidebars;
			
			$index = $this->_get_registered_sidebar_index( $name );
			
			if ( isset( $wp_registered_sidebars[$index] ) )
				return $wp_registered_sidebars[$index];
			
			return array();
		}
	}
	
	new BuilderSidebars();
}
