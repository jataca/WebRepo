<?php
/**
 *
 * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *
 * WARNING:	THERE ARE NO EDITABLE PORTIONS OF THIS SCRIPT.
 * 			ALL OPTIONS ARE CONFIGURABLE VIA THE WEB INTERFACE.
 *
 * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *
 * Script Name: ImportBuddy.php for use with BackupBuddy backups.
 * Plugin URI: http://pluginbuddy.com/backupbuddy/
 * Description: Backup - Restore - Migrate. Backs up files, settings, and content for a complete snapshot of your site. Allows migration to a new host or URL.
 * Version: 2.2.0 - See importbuddy/history.txt
 * Author: Dustin Bolton (PluginBuddy.com)
 * Author URI: http://dustinbolton.com/
 *
 * Usage:
 * 
 * 1. Upload this script to the server you would like to restore/migrate to.
 * 2. Upload your backup ZIP file created with BackupBuddy.
 * 3. Navigate to the web address of this script. Ex: http://yoursite.com/importbuddy.php
 * 4. Follow the on screen instructions.
 * 
 */
 
$php_minimum = '5.1'; // User's PHP must be equal or newer to this version.

if ( version_compare( PHP_VERSION, $php_minimum ) < 0 ) {
	die( 'ERROR #9013. See <a href="http://ithemes.com/codex/page/BackupBuddy:_Error_Codes#9013">this codex page for details</a>. Sorry! PHP version ' . $php_minimum . ' or newer is required for BackupBuddy to properly run. You are running PHP version ' . PHP_VERSION . '.' );
}

class pluginbuddy_importbuddy {
	var $_version = '2.2.0';
	var $_bbversion = '2.2.28';
	
	var $_php_minimum = '5.2';
	var $debug = false;										// Displays PHP warnings.
	
	var $_timestamp = 'M j, Y, H:i:s';						// PHP timestamp format.
	var $_total_steps = '6';
	var $_defaults = array(
		'import_password'			=>		'#PASSWORD#',	// MD5 hash of the import password. Prevents unauthorized access. Default: #PASSWORD#
		'password'					=>		'',				// MD5 hash of password given.
		'file'						=>		'',				// Selected backup import file.
		'zip_id'					=>		'',				// ID from the random strings in the ZIP filename. This allows finding of the temp directory in the wp-uploads directory.
		'type'						=>		'',				// Set on step 4 via a POST. Valid values: migrate, restore
		
		'skip_files'				=>		false,
		'skip_database_import'		=>		false,
		'skip_database_migration'	=>		false,
		'wipe_database'				=>		false,
		'skip_htaccess'				=>		false,
		'force_compatibility_medium'=>		false,
		'force_compatibility_slow'	=>		false,
		'show_php_warnings'			=>		false,
		'replace_existing_tables'	=>		false,
		
		'log_level'					=>		2,				// 0 = none, 1 = errors only, 2 = errors + warnings, 3 = debugging (all kinds of actions)
		'db_server'					=>		'',
		'db_user'					=>		'',
		'db_password'				=>		'',
		'db_name'					=>		'',
		'db_prefix'					=>		'',
		'siteurl'					=>		'',
	);
	
	var $has_access = false;
	var $_backupdata;
	
	const UPLOAD_ACCESS_DENIED = 'To prevent unauthorized file uploads an importbuddy password must be configured to use this feature.';
	
	
	/**
	 *	pluginbuddy_importbuddy()
	 *
	 *	Default constructor.
	 *
	 */
	function __construct() {
		// Prevent access to importbuddy.php if it is still in plugin directory.
		if ( file_exists( dirname( __FILE__ ) . '/backupbuddy.php' ) ) {
			echo 'The BackupBuddy importer, ImportBuddy, can ONLY be accessed on the destination server that you wish to import your backup to.<br>';
			echo 'Upload the importer in the root web directory on the destination server and try again.<br><br>';
			echo 'If you need assistance visit <a href="http://pluginbuddy.com">http://pluginbuddy.com</a>';
			die();
		}
		
		define( 'ABSPATH', dirname( __FILE__ ) . '/' );
		
		// Unpack importbuddy files into importbuddy directory.
		if ( !file_exists( ABSPATH . 'importbuddy' ) ) {
			unpack_importbuddy();
		}
		
		// Return image if requested.
		if ( isset( $_GET['ezimg'] ) ) {
			require_once( 'importbuddy/classes/ezimg.php' );
			ezimg::showImg( $_GET['ezimg'] );
		}
		
		// Start logging time for steps that report how long they took.
		$this->time_start = microtime( true );
		
		// Database step's AJAX-based tester.
		if ( isset( $_POST['action'] ) && ( $_POST['action'] == 'mysql_test' ) ) {
			require_once( 'importbuddy/classes/mysql_test.php' );
		}
		
		// Try to prevent browser timeouts. Greedy script limits are handled on the steps that need them.
		header( 'Keep-Alive: 3600' );
		header( 'Connection: keep-alive' );
		
		// Set up options.
		if ( isset( $_POST['options'] ) ) {
			$this->_options = unserialize( stripslashes( htmlspecialchars_decode( $_POST['options'] ) ) );
			$this->_options = array_merge( $this->_defaults, (array)$this->_options ); // Add in any defaults not explicitly set yet.
		} else {
			$this->_options = $this->_defaults;
		}
		
		// Set up PHP error levels.
		if ( ( $this->debug === true ) || ( $this->_options['show_php_warnings'] === true ) ) {
			error_reporting( E_ERROR | E_WARNING | E_PARSE | E_NOTICE ); // HIGH
			$this->log( 'PHP error reporting set HIGH.' );
		} else {
			error_reporting( E_ALL ^ E_NOTICE ); // LOW
		}
		
		// Detect max execution time for database steps so they can pause when needed for additional PHP processes.
		$this->detected_max_execution_time = str_ireplace( 's', '', ini_get( 'max_execution_time' ) );
		if ( is_numeric( $this->detected_max_execution_time ) === false ) {
			$detected_max_execution_time = 30;
		}
		
		// Determine the current step.
		if ( ( isset( $_GET['step'] ) ) && ( is_numeric( $_GET['step'] ) ) ) {
			$this->_step = $_GET['step'];
		} else {
			$this->_step = 1;
		}
		
		// Handle importbuddy authentication (if needed).
		$this->has_access = false; // default
		if ( $this->_defaults['import_password'] == '#PASSWORD#' ) {
			$this->has_access = true;
		} else {
			if ( md5( $this->_options['password'] ) == $this->_defaults['import_password'] ) {
				$this->has_access = true;
			}
			if ( isset( $_POST['password'] ) || isset( $_GET['v'] ) ) {
				if	( md5( $_POST['password'] ) == $this->_defaults['import_password'] ) {
					$this->_options['password'] = $_POST['password'];
					$this->has_access = true;
				}
				if ( isset( $_GET['v'] ) &&	( $_GET['v'] == ( 'xv' . md5( $this->_defaults['import_password'] . 'importbuddy' ) ) ) ) {
					$this->has_access = true;
				}
			}
		}
		
		// Run function for the requested step.
		require_once( 'importbuddy/classes/ezimg.php' );
		
		// Handles displaying the current page and running the needed code for that step.
		$mode = 'html';
		if ( $mode == 'html' ) {
			require_once( 'importbuddy/classes/view_page.php' );
		} elseif ( $mode == 'api_1' ) {
			die( 'API not implemented yet.' );
			
			if ( $this->has_access === true ) {
				require_once( 'step_' . $this->_step . '_api.php' );
			} else {
				$this->status( 'error', 'Access Denied. You must authenticate first.' );
				die( "Access Denied.\n" );
			}
		}
	}
	
	
	/**
	 *	log()
	 *
	 *	Logs to a text file depending on settings.
	 *	0 = none, 1 = errors only, 2 = errors + warnings, 3 = debugging (all kinds of actions)
	 *
	 *	$text		string		Text to log.
	 *	$log_type	string		Valid options: error, warning, all (default so may be omitted).
	 *
	 */
	function log( $text, $log_type = 'all' ) {
		$write = false;
		
		if ( $this->_options['log_level'] == 0 ) { // No logging.
			return;
		} elseif ( $this->_options['log_level'] == 1 ) { // Errors only.
			if ( $log_type == 'error' ) {
				$write = true;
			}
		} elseif ( $this->_options['log_level'] == 2 ) { // Errors and warnings only.
			if ( ( $log_type == 'error' ) || ( $log_type == 'warning' ) ) {
				$write = true;
			}
		} elseif ( $this->_options['log_level'] == 3 ) { // Log all; Errors, warnings, actions, notes, etc.
			$write = true;
		}
		if ( is_writable( ABSPATH ) ) {
			$fh = fopen( ABSPATH . 'importbuddy.txt', 'a');
			if ( $fh !== false ) {
				fwrite( $fh, '[' . date( $this->_timestamp, time() ) . '-' . $log_type . '] ' . $text . "\n" );
				fclose( $fh );
			} else {
				// Don't use alert here since it could recursively look writing to the log.
				echo 'Warning: Unable to write to log file. Verify write permissions to this directory.' ;
			}
		}
	}
	
	
	/**
	 *	tip()
	 *
	 *	Displays a message to the user when they hover over the question mark. Gracefully falls back to normal tooltip.
	 *	HTML is supposed within tooltips.
	 *
	 *	$message		string		Actual message to show to user.
	 *	$title			string		Title of message to show to user. This is displayed at top of tip in bigger letters. Default is blank. (optional)
	 *	$echo_tip		boolean		Whether to echo the tip (default; true), or return the tip (false). (optional)
	 */
	function tip( $message, $title = '', $echo_tip = true ) {
		$tip = ' <a class="pluginbuddy_tip" title="' . $title . ' - ' . $message . '">' . ezimg::genImageTag( 'pluginbuddy_tip.png' ) . '</a>';
		if ( $echo_tip === true ) {
			echo $tip;
		} else {
			return $tip;
		}
	}
	
	
	/**
	 *	alert()
	 *
	 *	Displays a message to the user.
	 *
	 *	$message		string		Message you want to display to the user.
	 *	$error			boolean		OPTIONAL! true indicates this alert is an error and displays as red. Default: false
	 *	$error_code		int			OPTIONAL! Error code number to use in linking in the wiki for easy reference.
	 */
	function alert( $message_title, $message_details = '', $error_code = '' ) {
		?>
		<div class="alert">
			<img src="?ezimg=alert.png" style="float: left;" height="55">
			<div style="margin-left: 65px;">
				<b><?php echo $message_title; ?></b><br><br>
				<?php echo $message_details; ?>
				<?php
				if ( ( $error_code != '' ) && ( $error_code != '9021' ) ) {
					echo '<p><a href="http://ithemes.com/codex/page/BackupBuddy:_Error_Codes#' . $error_code . '" target="_new"><i>BackupBuddy Error Code ' . $error_code . ' - Click for more details.</i></a></p>';
					$this->log( 'Error #' . $error_code . ': ' . $message_title, 'error' );
				}
				?>
			</div>
		</div>
		<?php
	}
	
	
	/**
	 *	status_box()
	 *
	 *	Displays a textarea for placing status text into.
	 *
	 *	@param			$default_text	string		First line of text to display.
	 *	@return							string		HTML for textarea.
	 */
	function status_box( $default_text = '' ) {
		return '<textarea style="width: 100%; height: 120px;" id="importbuddy_status">' . $default_text . '</textarea>';
	}		
	
	
	/**
	 *	status()
	 *
	 *	Write a status line into an existing textarea created with the status_box() function.
	 *
	 *	@param			$type		string		message, details, error, or warning. Currently not in use.
	 *	@param			$message	string		Message to append to the status box.
	 *	@return			null
	 */
	function status( $type, $message ) {
		$message = htmlentities( addslashes( $message ) );
		$status = date( $this->_timestamp, time() ) . ': ' . $message;
		
		echo '<script type="text/javascript">jQuery( "#importbuddy_status" ).append( "\n' . $status . '");	textareaelem = document.getElementById( "importbuddy_status" );	textareaelem.scrollTop = textareaelem.scrollHeight;	</script>';
		flush();
		
		if ( $type == 'error' ) {
			$this->log( $message, 'error' );
		} elseif ( $type == 'warning' ) {
			$this->log( $message, 'warning' );
		} else {
			$this->log( '[' . $type . ']' . $message, 'all' );
		}
	}
	
	
	/**
	 *	set_greedy_script_limits()
	 *
	 *	Sets greedy script limits to help prevent timeouts, running out of memory, etc.
	 *
	 *	@return		null
	 *
	 */
	function set_greedy_script_limits( &$status_callback = '' ) {
		$status_callback = &$status_callback;
		
		if ( ( $status_callback == '' ) && ( method_exists( $this, 'status' ) ) ) {
			$status_callback = &$this;
		}
		
		$this->status( 'message', 'Requisitioning increased server resources.' );
		
		// Don't abort script if the client connection is lost/closed
		@ignore_user_abort( true );
		
		// Set socket timeout to 2 hours.
		@ini_set( 'default_socket_timeout', 60 * 60 * 2 );
		
		// Set maximum runtime to 2 hours.
		$original_maximum_runtime = ini_get( 'max_execution_time' );
		@set_time_limit( 60 * 60 * 2 );
		$this->log( 'Attempted to increase maximum PHP runtime. Original: ' . $original_maximum_runtime . '; New: ' . @ini_get( 'max_execution_time' ) . '.' );
		
		// Increase the memory limit
		$current_memory_limit = trim( @ini_get( 'memory_limit' ) );
		
		// Make sure a minimum memory limit of 256MB is set.
		if ( preg_match( '/(\d+)(\w*)/', $current_memory_limit, $matches ) ) {
			$current_memory_limit = $matches[1];
			$unit = $matches[2];
			// Up memory limit if currently lower than 256M.
			if ( 'g' !== strtolower( $unit ) ) {
				if ( ( $current_memory_limit < 256 ) || ( 'm' !== strtolower( $unit ) ) )
					@ini_set('memory_limit', '256M');
					$this->log( 'Set memory limit to 256M. Previous value < 256M.' );
			}
		} else {
			// Couldn't determine current limit, set to 256M to be safe.
			@ini_set('memory_limit', '256M');
			$this->log( 'Set memory limit to 256M. Previous value unknown.' );
		}
		$this->log( 'Original PHP memory limit: ' . $current_memory_limit . '; New: ' . @ini_get( 'memory_limit' ) . '.' );
	}
	
	
	function remove_file( $file, $description, $error_on_missing = false ) {
		$this->status( 'message', 'Deleting `' . $description . '`...' );

		@chmod( $file, 0755 ); // High permissions to delete.
		
		if ( is_dir( $file ) ) { // directory.
			$this->remove_dir( $file );
			if ( file_exists( $file ) ) {
				$this->status( 'error', 'Unable to delete directory: `' . $description . '`. You should manually delete it.' );
			} else {
				$this->status( 'message', 'Deleted.' );
			}
		} else { // file
			if ( file_exists( $file ) ) {
				if ( @unlink( $file ) != 1 ) {
					$this->status( 'error', 'Unable to delete file: `' . $description . '`. You should manually delete it.' );
				} else {
					$this->status( 'message', 'Deleted.' );
				}
			}
		}
	}
	
	
	function get_fileperms( $file ) {
		$perms = fileperms( $file );

		if (($perms & 0xC000) == 0xC000) {
			// Socket
			$info = 's';
		} elseif (($perms & 0xA000) == 0xA000) {
			// Symbolic Link
			$info = 'l';
		} elseif (($perms & 0x8000) == 0x8000) {
			// Regular
			$info = '-';
		} elseif (($perms & 0x6000) == 0x6000) {
			// Block special
			$info = 'b';
		} elseif (($perms & 0x4000) == 0x4000) {
			// Directory
			$info = 'd';
		} elseif (($perms & 0x2000) == 0x2000) {
			// Character special
			$info = 'c';
		} elseif (($perms & 0x1000) == 0x1000) {
			// FIFO pipe
			$info = 'p';
		} else {
			// Unknown
			$info = 'u';
		}
		
		// Owner
		$info .= (($perms & 0x0100) ? 'r' : '-');
		$info .= (($perms & 0x0080) ? 'w' : '-');
		$info .= (($perms & 0x0040) ?
					(($perms & 0x0800) ? 's' : 'x' ) :
					(($perms & 0x0800) ? 'S' : '-'));
		
		// Group
		$info .= (($perms & 0x0020) ? 'r' : '-');
		$info .= (($perms & 0x0010) ? 'w' : '-');
		$info .= (($perms & 0x0008) ?
					(($perms & 0x0400) ? 's' : 'x' ) :
					(($perms & 0x0400) ? 'S' : '-'));
		
		// World
		$info .= (($perms & 0x0004) ? 'r' : '-');
		$info .= (($perms & 0x0002) ? 'w' : '-');
		$info .= (($perms & 0x0001) ?
					(($perms & 0x0200) ? 't' : 'x' ) :
					(($perms & 0x0200) ? 'T' : '-'));
		
		return $info;
	}
	
	
	/**
	 *	get_zip_id()
	 *
	 *	Given a BackupBuddy ZIP file, extracts the random ZIP ID from the filename. This random string determines
	 *	where BackupBuddy will find the temporary directory in the backup's wp-uploads directory. IE a zip ID of
	 *	3poje9j34 will mean the temporary directory is wp-uploads/temp_3poje9j34/. backupbuddy_dat.php is in this
	 *	directory as well as the SQL dump.
	 *
	 *	Currently handles old BackupBuddy ZIP file format. Remove this backward compatibility at some point.
	 *
	 *	$file			string		BackupBuddy ZIP filename.
	 *	@return			string		ZIP ID characters.
	 *
	 */
	function get_zip_id( $file ) {
		$posa = strrpos($file,'_')+1;
		$posb = strrpos($file,'-')+1;
		if ( $posa < $posb ) {
			$this->_options['zip_id'] = $posb;
			$this->_options['zip_id'] = strrpos($file,'-')+1;
		} else {
			$this->_options['zip_id'] = $posa;
			$this->_options['zip_id'] = strrpos($file,'_')+1;
		}
		$this->_options['zip_id'] = substr( $this->_options['file'], $this->_options['zip_id'], strlen($this->_options['file'])-$this->_options['zip_id']-4 );
		
		return $this->_options['zip_id'];
	}
	
	
	/**
	 *	load_backup_dat()
	 *
	 *	Gets the serialized data from the backupbuddy_dat.php file inside of the backup ZIP.
	 *	This happens post-file-extraction.
	 *
	 *	Saves data to $this->_backupdata.
	 *
	 *	@return			null
	 *
	 */
	function load_backup_dat() {
		$this->log( 'STARTING Loading backup dat file....' );
		$backupdata_file = ABSPATH . 'wp-content/uploads/temp_'. $this->_options['zip_id'] .'/backupbuddy_dat.php'; // Full backup dat file location
		$backupdata_file_new = ABSPATH . 'wp-content/uploads/backupbuddy_temp/'. $this->_options['zip_id'] .'/backupbuddy_dat.php'; // Full backup dat file location
		
		if ( file_exists( $backupdata_file ) ) { // Full backup location.
			$backupdata = file_get_contents( $backupdata_file );
		} elseif ( file_exists( $backupdata_file_new ) ) { // Full backup location.
			$backupdata = file_get_contents( $backupdata_file_new );
		} elseif ( file_exists( ABSPATH . 'backupbuddy_dat.php' ) ) { // DB only location.
			$backupdata = file_get_contents( ABSPATH . 'backupbuddy_dat.php' );
		} else { // Missing.
			$this->alert( 'Error #9003: BackupBuddy data file (backupbuddy_dat.php) missing or unreadable.', 'There may be a problem with the backup file, the files could not be extracted (you may manually extract the zip file in this directory to manually do this portion of restore), or the files were deleted before this portion of the restore was reached.  Start the import process over or try manually extracting (unzipping) the files then starting over. Restore will not continue to protect integrity of any existing data.', true, '9003' );
			die( ' Halted.' );
		}
		
		// Unserialize data; If it fails it then decodes the obscufated data then unserializes it. (new dat file method starting at 2.0).
		if ( !is_serialized( $backupdata ) || ( false === ( $this->_backupdata = unserialize( $backupdata ) ) ) ) {
			// Skip first line.
			$second_line_pos = strpos( $backupdata, "\n" ) + 1;
			$backupdata = substr( $backupdata, $second_line_pos );
			
			// Decode back into an array.
			$this->_backupdata = unserialize( base64_decode( $backupdata ) );
		}
		
		$this->log( 'DONE Loading backup dat file.' );
	}
	
	
	/**
	 *	migrate_htaccess()
	 *
	 *	Migrates .htaccess file if it exists.
	 *
	 *	@return		boolean		False only if file is unwritable. True if write success; true if file does not even exist.
	 *
	 */
	function migrate_htaccess() {
		if ( $this->_options['skip_htaccess'] == true ) {
			$this->status( 'message', 'Skipping .htaccess migration based on settings.' );
			return true;
		} else {
			// If there is no .htaccess file then return.
			if ( !file_exists( ABSPATH . '.htaccess' ) ) {
				$this->status( 'message', 'No .htaccess file found. Skipping .htaccess migration.' );
				return true;
			}
			if ( !is_writable( ABSPATH . '.htaccess' ) ) {
				$this->status( 'error', 'Error #9020: Unable to write to .htaccess file. Verify permissions.' );
				$this->alert( 'ERROR: Unable to write to file .htaccess.', 'Verify this file has proper write permissions. You may receive 404 Not Found errors on your site if this is not corrected. Re-save permalinks to fix this.', '9020' );
				return false;
			}
			
			$this->status( 'message', 'Migrating .htaccess file...' );
			
			$oldurl = strtolower( $this->_backupdata['siteurl'] );
			$oldurl = str_replace( '/', '\\', $oldurl );
			$oldurl = str_replace( 'http:\\', '', $oldurl );
			$oldurl = trim( $oldurl, '\\' );
			$oldurl = explode( '\\', $oldurl );
			$oldurl[0] = '';
			
			$newurl = strtolower( $this->_options['siteurl'] );
			$newurl = str_replace( '/', '\\', $newurl );
			$newurl = str_replace( 'http:\\', '', $newurl );
			$newurl = trim( $newurl, '\\' );
			$newurl = explode( '\\', $newurl );
			$newurl[0] = '';
			
			$this->status( 'message', 'Checking .htaccess file.' );
			
			// If the URL (domain and/or URL subdirectory ) has changed, then need to update .htaccess file.
			if ( $newurl !== $oldurl ) {
				$this->status( 'message', 'URL directory has changed. Updating from `' . implode( '/', $oldurl ) . '` to `' . implode( '/', $newurl ) . '`.' );
				
				$rewrite_lines = array();
				$got_rewrite = false;
				$rewrite_path = implode( '/', $newurl );
				$file_array = file( ABSPATH . '.htaccess' );
				
				foreach ($file_array as $line_number => $line) {
					if ( $got_rewrite == true ) { // In a WordPress section.
						if ( strstr( $line, 'END WordPress' ) ) { // End of a WordPress block so stop replacing.
							$got_rewrite = false;
							$rewrite_lines[] =  $line; // Captures end of WordPress block.
						} else {
							if ( strstr( $line, 'RewriteBase' ) ) { // RewriteBase
								$rewrite_lines[] = 'RewriteBase ' . $rewrite_path . '/' . "\n";
							} elseif ( strstr( $line, 'RewriteRule' ) ) { // RewriteRule
								if ( strstr( $line, '^index\.php$' ) ) { // Handle new strange rewriterule. Leave as is.
									$rewrite_lines[] = $line;
									$this->log( 'Htaccess ^index\.php$ detected. Leaving as is.' );
								} else { // Normal spot.
									$rewrite_lines[] = 'RewriteRule . ' . $rewrite_path . '/index.php' . "\n";
								}
							} else {
								$rewrite_lines[] =  $line; // Captures everything inside WordPress block we arent modifying.
							}
						}
					} else { // Outside a WordPress section.
						if ( strstr( $line, 'BEGIN WordPress' ) ) {
							$got_rewrite = true; // Beginning of a WordPress block so start replacing.
						}
						$rewrite_lines[] =  $line; // Captures everything outside of WordPress block.
					}
				}
					
				$handling = fopen( ABSPATH . '.htaccess', 'w');
				fwrite( $handling, implode( $rewrite_lines ) );
				fclose( $handling );
				unset( $handling );
				
				$this->status( 'message', 'Migrated .htaccess file.' );
			} else {
				$this->status( 'message', 'No changes needed for .htaccess file.' );
			}
		}
		return true;
	}
	
	
	/**
	 *	connect()
	 *
	 *	Initializes a connection to the mysql database.
	 *
	 *	@return		boolean		True on success; else false. Success testing is very loose.
	 */
	function connect_database() {
		// Set up database connection.
		if ( false === @mysql_connect( $this->_options['db_server'], $this->_options['db_user'], $this->_options['db_password'] ) ) {
			$this->alert( 'ERROR: Unable to connect to database server and/or log in. Verify the database server name, username, and password. Details: ' . mysql_error(), true, '9006' );
			return false;
		}
		$database_name = mysql_real_escape_string( $this->_options['db_name'] );
		
		flush();
		
		// Select the database.
		if ( false === @mysql_select_db( $this->_options['db_name'] ) ) {
			$this->status( 'error', 'Error: Unable to connect or authenticate to database `' . $this->_options['db_name'] . '`.' );
			return false;
		}
		
		// Set up character set. Important.
		mysql_query("SET NAMES 'utf8'");
		
		return true;
	}
	
	
	/**
	 *	restore_database()
	 *
	 *	Preset the following variables within $this->_options before continuing:
	 *		db_server, db_user, db_password, db_name
	 *
	 *	@return			mixed		true: success, false: failure, integer: query to start next db import chunk on
	 */
	function restore_database( $query_start = 0 ) {
		$this->status( 'message', 'Beginning database import...' );
		
		//$this->connect_database();
		
		// Require a table prefix.
		if ( $this->_options['db_prefix'] == '' ) {
			$this->alert( 'ERROR: A database prefix is required for importing. Details: ' . mysql_error(), true, '9008' );
		}
		
		if ( $query_start > 0 ) {
			$this->status( 'message', 'Continuing to restore database dump starting at query ' . $query_start . '.' );
		} else {
			$this->status( 'message', 'Restoring database dump. This may take a moment...' );
		}
		
		flush();
		
		// Check number of tables already existing with this prefix. Skips this check on substeps of DB import.
		if ( $query_start == 0 ) {
			$result = mysql_query( "SHOW TABLES LIKE '" . mysql_real_escape_string( $this->_options['db_prefix'] ) . "%'" );
			if ( mysql_num_rows( $result ) > 0 ) {
				//echo ezimg::genImageTag('bullet_error.png').' Found ' . mysql_num_rows( $result ) . ' existing tables with same prefix ... Restore stopped to prevent accidental overwrite of existing data.';
				$this->status( 'error', 'Database import halted to prevent overwriting existing WordPress data.' );
				$this->alert( 'Database import halted to prevent overwriting existing WordPress data.', 'The database already contains a WordPress installation with this prefix (' . mysql_num_rows( $result ) . ' tables). Restore has been stopped to prevent overwriting existing data. Please go back and enter a new database name and/or prefix OR select the option to wipe the database prior to import from the advanced settings on the first import step.', '9014' );
				return false;
			}
			unset( $result );
		}
		
		
		// Import SQL dump onto new server. NOTE: This data has NOT been migrated. It is identical to the source server still at this point.
		$import_result = $this->import_sql_dump( $query_start );
		
		// CLEANUP
		mysql_close();
		
		$this->status( 'message', 'Database import complete.' );
		
		return $import_result;
	}
	
	
	/**
	 *	import_sql_dump()
	 *
	 *	Directly inserts the source SQL dump into the new database.
	 *	Does NOT modify any data or do any migration.
	 *
	 *	@return		boolean		True: success, False: failed.
	 *
	 */
	function import_sql_dump( $query_start = 0 ) {
		// TODO: debugging
		//$query_start = 839;
		$this->status( 'message', 'Starting import of SQL date... This may take a moment...' );
		
		$file_stream = false; // Default state.
		if ( file_exists ( ABSPATH . 'wp-content/uploads/temp_' . $this->_options['zip_id'] . '/db.sql' ) ) { // Full backup found.
			$file_stream = fopen( ABSPATH . 'wp-content/uploads/temp_'.$this->_options['zip_id'].'/db.sql', 'r' );
		} elseif ( file_exists ( ABSPATH . 'db.sql' ) ) { // DB-only backup found.
			$file_stream = fopen( ABSPATH . 'db.sql', 'r' );
		} elseif ( file_exists ( ABSPATH . 'wp-content/uploads/backupbuddy_temp/' . $this->_options['zip_id'] . '/db_1.sql' ) ) { // Full backup found. 2.0 method.
			$file_stream = fopen( ABSPATH . 'wp-content/uploads/backupbuddy_temp/' . $this->_options['zip_id'] . '/db_1.sql', 'r' );
		} elseif ( file_exists ( ABSPATH . 'db_1.sql' ) ) { // DB-only backup found. 2.0 method.
			$file_stream = fopen( ABSPATH . 'db_1.sql', 'r' );
		}
		
		if ( false === $file_stream ) {
			$this->alert( 'ERROR: Unable to find any database backup data in the selected backup.', true, '9009' );
			$this->status( 'error', 'Unable to find any database backup data in the selected backup. Error #9009.' );
			return false;
		}
		
		// Iterate through each full row action and import it one at a time.
		
		$query_count = 0;
		$file_data = '';
		
		while ( ! feof( $file_stream ) ) {
		
			while ( false === strpos( $file_data, "\n" ) ) {
				$file_data .= fread( $file_stream, 4096 );
			}
			
			$queries = explode( "\n", $file_data );
			
			if ( preg_match( "/\n$/", $file_data ) ) {
				$file_data = '';
			} else {
				$file_data = array_pop( $queries );
			}
			
			// TODO: DEBUGGING:
			//$this->_options['max_execution_time'] = 0.41;
			
			// Loops through each full query.
			foreach ( (array) $queries as $query ) {
				if ( $query_count < ( $query_start - 1 ) ) { // Handle skipping any queries up to the point we are at.
					$query_count++;
					continue; // Continue to next foreach iteration.
				} else {
					$query_count++;
				}
				
				$query = trim( $query );
				
				if ( empty( $query ) ) {
					continue;
				}
				
				$result = $this->import_sql_dump_line( $query );
				
				if ( false === $result ) { // Skipped query
					continue;
				}
				
				if ( 0 === ( $query_count % 500 ) ) {
					$this->status( 'message', 'Working...' );
				}
				/*
				if ( 0 === ( $query_count % 6000 ) ) {
					echo "<br>\n";
				}
				*/
				
				// If we are within 1 second of reaching maximum PHP runtime then stop here so that it can be picked up in another PHP process...
				if ( ( ( microtime( true ) - $this->time_start ) + 1 ) >= $this->_options['max_execution_time'] ) {
				// TODO: Debugging:
				//if ( ( ( microtime( true ) - $this->time_start ) ) >= $this->_options['max_execution_time'] ) {
					$this->status( 'message', 'Exhausted available PHP time to import for this page load. Last query: ' . $query_count . '.' );
					
					fclose( $file_stream );
					
					return ( $query_count + 1 );
					//break 2;
				}
			}
			
		}
		
		fclose( $file_stream );
		
		$this->status( 'message', 'Import of SQL data complete.' );			
		$this->status( 'message', 'Took ' . round( microtime( true ) - $this->time_start, 3 ) . ' seconds on ' . $query_count . ' queries. ' );
		
		return true;
	}
	
	
	/**
	 *	import_sql_dump_line()
	 *
	 *	Imports a line/query into the database.
	 *	Handles using the specified table prefix.
	 *
	 *	$query		string		Query string to run for importing.
	 *	@return		boolean		True=success, False=failed.
	 *
	 */
	function import_sql_dump_line( $query ) {
		$old_prefix = $this->_backupdata['db_prefix'];
		$new_prefix = $this->_options['db_prefix'];
		
		$query_operators = 'INSERT INTO|CREATE TABLE|REFERENCES|CONSTRAINT';
		
		// Replace database prefix in query.
		if ( $old_prefix !== $new_prefix ) {
			$query = preg_replace( "/^($query_operators)(\s+`?)$old_prefix/i", "\${1}\${2}$new_prefix", $query ); // 4-29-11
		}
		
		// Run the query
		// Disabled to prevent from running on EVERY line. Now just running before this. mysql_query("SET NAMES 'utf8'"); // Force UTF8
		$result = mysql_query( $query );
		
		if ( false === $result ) {
			$this->alert( 'ERROR: Unable to import SQL query: ' . mysql_error(), true, '9010' );
			return false;
		} else {
			return true;
		}
	}
	
	
	/**
	 *	migrate_database()
	 *
	 *	Migrates the already imported database's content for updates ABSPATH and URL.
	 *
	 *	@return		boolean		True=success, False=failed.
	 *
	 */
	function migrate_database() {
		$this->status( 'message', 'Migrating database content...' );
		$this->log( 'Beginning migration of DB.' );
		$this->log( '_options[] value: ' . serialize( $this->_options ) );
		
		// NOTE: dbreplace class intelligently ignores replacing values with identical values for performance.
		
		$old_abspath = $this->_backupdata['abspath'];
		$old_abspath = preg_replace( '|/+$|', '', $old_abspath ); // Remove escaping of windows paths.
		$new_abspath = ABSPATH;
		$this->log( 'ABSPATH change for database ... Old Path: ' . $old_abspath . ', New Path: ' . $new_abspath . '.' );
		
		$this->_options['siteurl'] = preg_replace( '|/*$|', '', $this->_options['siteurl'] );  // strips trailing slash(es).
		$this->_options['home'] = preg_replace( '|/*$|', '', $this->_options['home'] );  // strips trailing slash(es).
		
		$old_url = $this->_backupdata['siteurl'];  // the value you want to search for
		// If http://www.blah.... then also we will replace http://blah... and vice versa.
		if ( stristr( $old_url, 'http://www.' ) || stristr( $old_url, 'https://www.' ) ) {
			$old_url_alt = str_ireplace( 'http://www.', 'http://', $old_url );
			$old_url_alt = str_ireplace( 'https://www.', 'https://', $old_url_alt );
		} else {
			$old_url_alt = str_ireplace( 'http://', 'http://www.', $old_url );
			$old_url_alt = str_ireplace( 'https://', 'https://www.', $old_url_alt );
		}
		$new_url = $this->_options['siteurl'];
		$this->status( 'details', 'Calculated URL update. Previous URL: ' . $old_url . ', New URL: ' . $new_url . '.' );
		
		$count_tables_checked = 0;
		$count_items_checked = 0;
		$count_items_changed = 0;
		
		flush();
		
		if ( $this->_options['siteurl'] != $this->_options['home'] ) { // Update home url value if it exists since it is custom.
			mysql_query( "UPDATE `" . $this->_options['db_prefix'] . "options` SET option_value='" . mysql_real_escape_string( $this->_options['home'] ) . "' WHERE option_name='home' LIMIT 1" );
			$this->status( 'details', 'Modified ' . mysql_affected_rows() . ' row(s) while updating home URL in options table.' );
		}
		
		if ( ( $this->_backupdata['is_multisite'] === true ) || ( $this->_backupdata['is_multisite'] == 'true' ) ) { // TODO: String 'true' comparison can be removed later. Added for backward compatibility with importbuddy 2.0 beta.
			// Update blog URLs if a multisite in BLOGS table.
			mysql_query( "UPDATE `" . $this->_options['db_prefix'] . "blogs` SET domain='" . mysql_real_escape_string( $this->_options['domain'] ) . "' WHERE domain='" . mysql_real_escape_string( $this->_backupdata['domain'] ) . "'" );
			$this->status( 'details', 'Modified ' . mysql_affected_rows() . ' row(s) while updating blog URL in blogs table.' );
			// Update blog URL if a multisite in SITES table. LIMITED TO 1.
			mysql_query( "UPDATE `" . $this->_options['db_prefix'] . "site` SET domain='" . mysql_real_escape_string( $this->_options['domain'] ) . "' WHERE domain='" . mysql_real_escape_string( $this->_backupdata['domain'] ) . "' LIMIT 1" );
			$this->status( 'details', 'Modified ' . mysql_affected_rows() . ' row(s) while updating site URL in site table.' );
		}
		
		$row_loop = 0;
		
		// Loop through the tables matching this prefix. Does NOT change data in other tables.
		// This changes actual data on a column by column basis for very row in every table.
		$tables = array();
		$result = mysql_query( "SHOW TABLES LIKE '" . $this->_options['db_prefix'] . "%'" );
		while ( $table = mysql_fetch_row( $result ) ) {
			$tables[] = $table[0];
		}
		unset( $table );
		$this->status( 'message', 'Found ' . mysql_num_rows( $result ) . ' WordPress tables. ' );
		unset( $result );
		
		
		$bruteforce_excluded_tables = array(
							$this->_options['db_prefix'] . 'posts',
							$this->_options['db_prefix'] . 'users',
							$this->_options['db_prefix'] . 'usermeta',
							$this->_options['db_prefix'] . 'terms',
							$this->_options['db_prefix'] . 'term_taxonomy',
							$this->_options['db_prefix'] . 'term_relationships',
							$this->_options['db_prefix'] . 'postmeta',
							$this->_options['db_prefix'] . 'options',
							$this->_options['db_prefix'] . 'comments',
							$this->_options['db_prefix'] . 'commentmeta',
							$this->_options['db_prefix'] . 'links',
						);
		
		$bruteforce_tables = array_remove( $tables, $bruteforce_excluded_tables ); // Removes all tables listed in $excluded_tables from $tables.
		unset( $tables );

		if ( $this->_options['siteurl'] != $this->_options['home'] ) { // Update home url value if it exists since it is custom.
			$old_urls = array( $old_url, $old_url_alt, $this->_backupdata['homeurl'] );
			$new_urls = array( $new_url, $new_url, $this->_options['home'] );
			if ( empty( $this->_backupdata['homeurl'] ) ) { // old BackupBuddy versions did not store the previous homeurl. Hang onto this for backwards compatibility for a while.
				$this->status( 'error', 'Failed. Your current backup does not include a home URL. Make a new backup with the latest BackupBuddy before migrating.' );
				$this->alert( 'Error #4543849498. Missing old home URL.', 'Failed. Your current backup does not include a home URL. Make a new backup with the latest BackupBuddy before migrating.' );
			} else {
				$this->status( 'message', 'Home URLs will also be updated along with site URLs.' );
			}
		} else { // Site URL updates only.
			$old_urls = array( $old_url, $old_url_alt );
			$new_urls = array( $new_url, $new_url );
		}
		
		
		
		$old_fullreplace = array( $old_url, $old_url_alt, $old_abspath );
		$new_fullreplace = array( $new_url, $new_url, $new_abspath );
		
		//For multisite exports
		if ( isset( $this->_backupdata[ 'is_multisite_export' ] ) && isset( $this->_backupdata[ 'upload_url' ] ) && isset( $this->_backupdata[ 'upload_url_rewrite' ] ) ) {
			$old_urls[] = $old_fullreplace[] = str_replace( $old_url, $new_url, $this->_backupdata[ 'upload_url' ] );
			$new_urls[] = $new_fullreplace[] = $new_url . '/wp-content/uploads/';
			if ( $this->_backupdata[ 'upload_url' ] != $this->_backupdata[ 'upload_url_rewrite' ] ) {
				$old_urls[] = $old_fullreplace[] = str_replace( $old_url, $new_url, $this->_backupdata[ 'upload_url_rewrite' ] );
				$new_urls[] = $new_fullreplace[] = $new_url . '/wp-content/uploads/';
			}
		}
					
		require_once( 'importbuddy/lib/dbreplace/dbreplace.php' );
		$dbreplace = new pluginbuddy_dbreplace( $this );
		
		// Update site URL strings in posts table for rows post_content, post_excerpt, and post_content_filtered. DO NOT update the guid even if it contains URL; per Learned BackupBuddy migrations have been updating the post GUID since it launched when it should not have been... http://codex.wordpress.org/Changing_The_Site_URL#Important_GUID_Note
		$this->status( 'message', 'Updating posts table site URLs.' );
		$dbreplace->text( $this->_options['db_prefix'] . 'posts', $old_urls, $new_urls, array( 'post_content', 'post_excerpt', 'post_content_filtered' ) );
		$this->status( 'message', 'Site URLs updated in posts table.' );
		
		// Misc string replacements
		$this->status( 'message', 'Replacing WordPress core database text data...' );
		$dbreplace->text( $this->_options['db_prefix'] . 'users', $old_urls, $new_urls, array( 'user_url' ) );
		$dbreplace->text( $this->_options['db_prefix'] . 'users', $old_urls, $new_urls, array( 'comment_content', 'comment_author_url' ) );
		$dbreplace->text( $this->_options['db_prefix'] . 'links', $old_urls, $new_urls, array( 'link_url', 'link_image', 'link_target', 'link_description', 'link_notes', 'link_rss' ) );
		$this->status( 'message', 'WordPress core database text replaced.' );
		
		// Misc serialized data replacements.
		$this->status( 'message', 'Replacing WordPress core database serialized data...' );
		$dbreplace->serialized( $this->_options['db_prefix'] . 'options', $old_fullreplace, $new_fullreplace, array( 'option_value' ) );
		$dbreplace->serialized( $this->_options['db_prefix'] . 'usermeta', $old_fullreplace, $new_fullreplace, array( 'meta_value' ) );
		$dbreplace->serialized( $this->_options['db_prefix'] . 'postmeta', $old_fullreplace, $new_fullreplace, array( 'meta_value' ) );
		$dbreplace->serialized( $this->_options['db_prefix'] . 'commentmeta', $old_fullreplace, $new_fullreplace, array( 'meta_value' ) );
		$this->status( 'message', 'WordPress core database serialized data replaced.' );
		
		foreach ( $bruteforce_tables as $bruteforce_table ) {
			$dbreplace->bruteforce_table( $bruteforce_table, $old_fullreplace, $new_fullreplace );
		}
		
		
		// Update table prefixes in some WordPress meta data.
		$old_prefix = $this->_backupdata['db_prefix'];
		$new_prefix = mysql_real_escape_string( $this->_options['db_prefix'] );
		if ($old_prefix != $new_prefix ) {
			mysql_query("UPDATE `".$new_prefix."usermeta` SET meta_key = REPLACE(meta_key, '".$old_prefix."', '".$new_prefix."' );");
			mysql_query("UPDATE `".$new_prefix."options` SET option_name = '".$new_prefix."user_roles' WHERE option_name ='".$old_prefix."user_roles' AND blog_id='0';");
			$this->status( 'message', 'Updated prefix META data.' );
		}
		
		$this->status( 'message', 'Migrated ' . count( $bruteforce_tables ) . ' tables via brute force.' );
		$this->status( 'message', 'Took ' . round( microtime( true ) - $this->time_start, 3 ) . ' seconds. Done.' );
		
		$this->status( 'message', 'Database content migrated.' );
		
		return true;
	}
	
	
	/**
	 *	wipe_database()
	 *
	 *	Clear out the existing database to prepare for importing new data.
	 *
	 *	@return			boolean		Currently always true.
	 */
	function wipe_database() {
		$this->status( 'message', 'Beginning wipe of database...' );
		
		// Connect to database.
		$this->connect_database();
		
		$result = mysql_query( 'SHOW TABLES' );
		$table_wipe_count = mysql_num_rows( $result );
		while( $row = mysql_fetch_row( $result ) ) {
			mysql_query( 'DROP TABLE `' . $row[0] . '`' );
		}
		mysql_free_result( $result ); // Free memory.
		$this->status( 'message', 'Wiped database of ' . $table_wipe_count . ' tables.' );
		
		return true;
	}
	
	
	/**
	 *	remove_dir()
	 *
	 *	?
	 *
	 *	@return			?
	 */
	function remove_dir( $dir ) {
		if ( !file_exists( $dir ) ) {
			return true;
		}
		if ( !is_dir( $dir ) || is_link( $dir ) ) {
			return unlink($dir);
		}
		foreach ( scandir( $dir ) as $item ) {
			if ( $item == '.' || $item == '..' ) {
				continue;
			}
			if ( !$this->remove_dir( $dir . "/" . $item ) ) {
				chmod( $dir . "/" . $item, 0777 );
				if ( !$this->remove_dir( $dir . "/" . $item ) ) {
					return false;
				}
			}
		}
		return rmdir($dir);
	}
	
	
	/**
	 *	phpinfo_array()
	 *
	 *	Get phpinfo() data as an array.
	 *
	 *	@return			array		Array of phpinfo() data.
	 */
	function phpinfo_array() {
		ob_start();
		phpinfo(-1);
		
		$pi = preg_replace(
		array('#^.*<body>(.*)</body>.*$#ms', '#<h2>PHP License</h2>.*$#ms',
		'#<h1>Configuration</h1>#',  "#\r?\n#", "#</(h1|h2|h3|tr)>#", '# +<#',
		"#[ \t]+#", '#&nbsp;#', '#  +#', '# class=".*?"#', '%&#039;%',
		'#<tr>(?:.*?)" src="(?:.*?)=(.*?)" alt="PHP Logo" /></a>'
		.'<h1>PHP Version (.*?)</h1>(?:\n+?)</td></tr>#',
		'#<h1><a href="(?:.*?)\?=(.*?)">PHP Credits</a></h1>#',
		'#<tr>(?:.*?)" src="(?:.*?)=(.*?)"(?:.*?)Zend Engine (.*?),(?:.*?)</tr>#',
		"# +#", '#<tr>#', '#</tr>#'),
		array('$1', '', '', '', '</$1>' . "\n", '<', ' ', ' ', ' ', '', ' ',
		'<h2>PHP Configuration</h2>'."\n".'<tr><td>PHP Version</td><td>$2</td></tr>'.
		"\n".'<tr><td>PHP Egg</td><td>$1</td></tr>',
		'<tr><td>PHP Credits Egg</td><td>$1</td></tr>',
		'<tr><td>Zend Engine</td><td>$2</td></tr>' . "\n" .
		'<tr><td>Zend Egg</td><td>$1</td></tr>', ' ', '%S%', '%E%'),
		ob_get_clean());
		
		$sections = explode('<h2>', strip_tags($pi, '<h2><th><td>'));
		unset($sections[0]);
		
		$pi = array();
		foreach($sections as $section){
			$n = substr($section, 0, strpos($section, '</h2>'));
			preg_match_all( '#%S%(?:<td>(.*?)</td>)?(?:<td>(.*?)</td>)?(?:<td>(.*?)</td>)?%E%#', $section, $askapache, PREG_SET_ORDER);
			foreach($askapache as $m) {
				if (isset($m[2])) { // Fix undefined offset warning.
					$pi[$n][$m[1]]=(!isset($m[3])||$m[2]==$m[3])?$m[2]:array_slice($m,2);
				}
			}
		}
		
		return $pi;
	}
	
	
	/**
	 *	migrate_wp_config()
	 *
	 *	Migrates and updates the wp-config.php file contents as needed.
	 *
	 *	@return			null			True on success. Currently always true.
	 */
	function migrate_wp_config() {
		$this->status( 'message', 'Starting migration of wp-config.php file...' );
		
		flush();
		
		// Check that we can write to this file.
		if ( !is_writable( ABSPATH . 'wp-config.php' ) ) {
			$this->alert( 'ERROR: Unable to write to file wp-config.php.', 'Verify this file has proper write permissions.', '9020' );
			return false;
		}
		
		if ( file_exists( ABSPATH . 'wp-config.php' ) ) {
			// Useful REGEX site: http://gskinner.com/RegExr/
			
			$updated_home_url = false;
			$wp_config = array();
			$lines = file( ABSPATH . 'wp-config.php' );
			
			$patterns = array();
			$replacements = array();
			
			/*
			Update WP_SITEURL, WP_HOME if they exist.
			Update database DB_NAME, DB_USER, DB_PASSWORD, and DB_HOST.
			RegExp: /define\([\s]*('|")WP_SITEURL('|"),[\s]*('|")(.)*('|")[\s]*\);/gi
			pattern: define\([\s]*('|")WP_SITEURL('|"),[\s]*('|")(.)*('|")[\s]*\);
			*/
			$pattern[0] = '/define\([\s]*(\'|")WP_SITEURL(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[0] = "define( 'WP_SITEURL', '" . trim( $this->_options['siteurl'], '/' ) . "' );";
			$pattern[1] = '/define\([\s]*(\'|")WP_HOME(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[1] = "define( 'WP_HOME', '" . trim( $this->_options['home'], '/' ) . "' );";
			
			$pattern[2] = '/define\([\s]*(\'|")DB_NAME(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[2] = "define( 'DB_NAME', '" . $this->_options['db_name'] . "' );";
			$pattern[3] = '/define\([\s]*(\'|")DB_USER(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[3] = "define( 'DB_USER', '" . $this->_options['db_user'] . "' );";
			$pattern[4] = '/define\([\s]*(\'|")DB_PASSWORD(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[4] = "define( 'DB_PASSWORD', '" . $this->_options['db_password'] . "' );";
			$pattern[5] = '/define\([\s]*(\'|")DB_HOST(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[5] = "define( 'DB_HOST', '" . $this->_options['db_server'] . "' );";
			
			// If multisite, update domain.
			$pattern[6] = '/define\([\s]*(\'|")DOMAIN_CURRENT_SITE(\'|"),[\s]*(\'|")(.)*(\'|")[\s]*\);/i';
			$replace[6] = "define( 'DOMAIN_CURRENT_SITE', '" . $this->_options['domain'] . "' );";
			
			/*
			Update table prefix.
			RegExp: /\$table_prefix[\s]*=[\s]*('|")(.)*('|");/gi
			pattern: \$table_prefix[\s]*=[\s]*('|")(.)*('|");
			*/
			$pattern[7] = '/\$table_prefix[\s]*=[\s]*(\'|")(.)*(\'|");/i';
			$replace[7] = '$table_prefix = \'' . $this->_options['db_prefix'] . '\';';
			
			// Perform the actual replacement.
			$lines = preg_replace( $pattern, $replace, $lines );
			
			// Write changes to config file.
			if ( false === ( file_put_contents( ABSPATH . 'wp-config.php', $lines ) ) ) {
				$this->alert( 'ERROR: Unable to save changes to wp-config.php.', 'Verify this file has proper write permissions.', '9020' );
				return false;
			}
			
			unset( $lines );
		} else {
			$this->status( 'warning', 'Warning: wp-config.php file not found.' );
			$this->alert( 'Note: wp-config.php file not found. This is normal for a database only backup.' );
		}
		
		$this->status( 'message', 'Migration of wp-config.php complete.' );
		
		return true;
	}
	
	
	// TODO: Modify all references to use unlink_recursive()
	function delete_directory( $dir ) {
		unlink_recursive( $dir );
	}
	
	
}
define( 'pluginbuddy_importbuddy', true ); // Tell Server Info page to not load some sections.
$pluginbuddy_importbuddy = new pluginbuddy_importbuddy();


// Compatibility with some WordPress localization.
function __( $text, $domain ) {
	return $text;
}
function _e( $text, $domain ) {
	echo $text;
}


/**
 *	unlink_recursive()
 *
 *	Recursively unlinks (deletes) the directories and all files and directories within.
 *
 *	$path		string		Full absolute path to file / directory to delete.
 *	@return		null
 *
 */
function unlink_recursive( $dir ) {
	if ( !file_exists( $dir ) ) {
		return true;
	}
	if ( !is_dir( $dir ) || is_link( $dir ) ) {
		return unlink($dir);
	}
	foreach ( scandir( $dir ) as $item ) {
		if ( $item == '.' || $item == '..' ) {
			continue;
		}
		if ( !unlink_recursive( $dir . "/" . $item ) ) {
			chmod( $dir . "/" . $item, 0777 );
			if ( !unlink_recursive( $dir . "/" . $item ) ) {
				return false;
			}
		}
	}
	return rmdir( $dir );
}


/**
 *	mkdir_recursive()
 *
 *	Recursively creates the directories needed to generate a full directory path.
 *
 *	$path		string		Full absolute path to generate.
 *	@return		null
 *
 */
function mkdir_recursive( $path ) {
	if ( empty( $path ) ) { // prevent infinite loop on bad path
		return;
	}
	is_dir( dirname( $path ) ) || mkdir_recursive( dirname( $path ) );
	return is_dir( $path ) || mkdir( $path );
}


/**
 * Check value to find if it was serialized.
 *
 * If $data is not an string, then returned value will always be false.
 * Serialized data is always a string.
 * Courtesy WordPress; since WordPress 2.0.5.
 *
 * @param mixed $data Value to check to see if was serialized.
 * @return bool False if not serialized and true if it was.
 */
function is_serialized( $data ) {
	// if it isn't a string, it isn't serialized
	if ( ! is_string( $data ) )
		return false;
	$data = trim( $data );
 	if ( 'N;' == $data )
		return true;
	$length = strlen( $data );
	if ( $length < 4 )
		return false;
	if ( ':' !== $data[1] )
		return false;
	$lastc = $data[$length-1];
	if ( ';' !== $lastc && '}' !== $lastc )
		return false;
	$token = $data[0];
	switch ( $token ) {
		case 's' :
			if ( '"' !== $data[$length-2] )
				return false;
		case 'a' :
		case 'O' :
			return (bool) preg_match( "/^{$token}:[0-9]+:/s", $data );
		case 'b' :
		case 'i' :
		case 'd' :
			return (bool) preg_match( "/^{$token}:[0-9.E-]+;\$/", $data );
	}
	return false;
}


/**
 *	array_remove()
 *
 *	Removes array values in $remove from $array.
 *
 *	@param			$array		array		Source array. This will have values removed and be returned.
 *	@param			$remove		array		Array of values to search for in $array and remove.
 *	@return						array		Returns array $array stripped of all values found in $remove
 */
function array_remove( $array, $remove ) {
	if ( !is_array( $remove ) ) {
		$remove = array( $remove );
	}
	return array_values( array_diff( $array, $remove ) );
}


/**
*	unpack_importbuddy()
*
*	Unpacks required files encoded in importbuddy.php into stand-alone files.
*
*	@return		null
*/
function unpack_importbuddy() {
	if ( !is_writable( ABSPATH ) ) {
		echo 'Error #224834. This directory is not write enabled. Please verify write permissions to continue.';
		die();
	} else {
		$unpack_file = '';
		
		$handle = @fopen( ABSPATH . 'importbuddy.php', 'r' );
		if ( $handle ) {
			while ( ( $buffer = fgets( $handle ) ) !== false ) {
				if ( substr( $buffer, 0, 11 ) == '###PACKDATA' ) {
					$packdata_commands = explode( ',', trim( $buffer ) );
					array_shift( $packdata_commands );
					
					if ( $packdata_commands[0] == 'BEGIN' ) {
						// Start packed data.
					} elseif ( $packdata_commands[0] == 'FILE_START' ) {
						$unpack_file = $packdata_commands[2];
					} elseif ( $packdata_commands[0] == 'FILE_END' ) {
						$unpack_file = '';
					} elseif ( $packdata_commands[0] == 'END' ) {
						return;
					}
				} else {
					if ( $unpack_file != '' ) {
						if ( !is_dir( dirname( ABSPATH . $unpack_file ) ) ) {
							mkdir_recursive( dirname( ABSPATH . $unpack_file ) );
						}
						file_put_contents( ABSPATH . $unpack_file, trim( base64_decode( $buffer ) ) );
					}
				}
			}
			if ( !feof( $handle ) ) {
				echo "Error: unexpected fgets() fail\n";
			}
			fclose( $handle );
		}
	}
}
die();
?>
<?php /*
###PACKDATA,BEGIN
###PACKDATA,FILE_START,/importbuddy/history.txt,importbuddy/history.txt
Mi4yLjIgLSAyMDExLTA5LTE5IC0gRHVzdGluIEJvbHRvbgoJSW1wb3J0QnVkZHkgQkVUQToKCQlBQlNQQVRIIG5vdyBpbmNsdWRlcyB0cmFpbGluZyBzbGFzaCB0byBtYXRjaCBXb3JkUHJlc3MuIEZpeGVzIHppcCBkZXRlY3Rpb24gb24gbWFueSBMaW51eCBzeXN0ZW1zLgoJCUZpeGVkIGlzX3dyaXRhYmxlIGJsb2dnaW5nIGxvZyBjcmVhdGlvbiBpbiBsb2coKSBmdW5jdGlvbi4KMi4yLjEgLSAyMDExLTA5LTE2IC0gRHVzdGluIEJvbHRvbgoJSW1wb3J0QnVkZHkgQkVUQTogQWRkZWQgYWRkc2xhc2hlcygpIGludG8gc3RhdHVzIGZ1bmN0aW9uIGZvciBqYXZhc2NyaXB0IHBhc3NpbmcuIFByZXZlbnRlZCBzbGFzaGVzIGZyb20gZGlzYXBwZWFyaW5nLgoyLjAuMCAtIDIwMTEtMDgtMjMgLSBEdXN0aW4gQm9sdG9uCglJbXBvcnRCdWRkeSBCRVRBOiAKCQlHZW5lcmFsIFVJIGNsZWFudXAgYW5kIHBvbGlzaGluZy4KCQlBZGRlZCBTZXJ2ZXIgSW5mby4gcGFnZSdzIFNlcnZlciBDb25maWd1cmF0aW9uIHNlY3Rpb24gd2l0aGluIG5ldyAnU2VydmVyIEluZm9ybWF0aW9uJyBidXR0b24gb24gU3RlcCAxLgoJCUFkZGVkIGFiaWxpdHkgdG8gdXBsb2FkIGJhY2t1cHMgZnJvbSBsb2NhbCBjb21wdXRlciB0byBzZXJ2ZXIgKG9ubHkgaWYgaW1wb3J0YnVkZHkgcGFzc3dvcmQgaXMgc2V0OyBmb3Igc2VjdXJpdHkpLgoJCUFkZGVkIG1vcmUgQWR2YW5jZWQgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBmYWxsYmFjayB1bnppcCBtb2Rlcy4KCQlBZGRlZCBtb3JlIGRldGFpbGVkIHN0YXR1cyBsb2dnaW5nIHRvIGVhY2ggc3RlcCBpbiBhIHRleHRhcmVhLgoJCVJlLWFycmFuZ2VkIGFuZCByZWR1Y2VkIHN0ZXAgY291bnQgZm9yIHN0cmVhbWxpbmluZyBpbXBvcnRzLgoJCVdoZW4gJ3dpcGUgZGF0YWJhc2UnIG9wdGlvbiBpcyBzZWxlY3RlZCB0aGUgbXlzcWwgdGVzdCBub3cgcmVwb3J0cyB3YXJuaW5ncyBhbmQgbm90ZXMgaXQgd2lsbCB3aXBlIGlmIGl0IGZpbmRzIGFuIGV4aXN0aW5nIGRhdGFiYXNlIHJhdGhlciB0aGFuIGVycm9ycy4KCQlSYXRoZXIgdGhhbiBBTEwgcm93cyBvZiBBTEwgZGF0YWJhc2VzIGhhdmluZyBVUkxzIGFuZCBwYXRocyAnbWlncmF0ZWQnLCBrbm93biB0YWJsZXMvcm93cyB3aGVyZSBubyBzZXJpYWxpemVkIGRhdGEgc2hvdWxkIGV2ZXIgc2hvdyB1cCBhcmUgc2tpcHBlZCBmb3IgaW5jcmVhdGUgbWlncmF0aW9uIHBlcmZvcm1hbmNlLiBBbGwgdW5rbm93biB0YWJsZXMvcm93cyBhcmUgc2Nhbm5lZCBhbmQgdXBkYXRlZCBpZiBuZWVkZWQuCgkJTm93IGFsc28gZGVsZXRpbmcgdGhlIGltcG9ydCBkaXJlY3Rvcnkgb24gY2xlYW51cCBzdGVwLgoJCUJyb2tlIG91dCBhbGwgaW1wb3J0YnVkZHkgZnVuY3Rpb25hbGl0eSBpbnRvIHNlcGFyYXRlIGZpbGVzIGluIHRoZSBpbXBvcnRidWRkeSBkaXJlY3RvcnkuIFRoaXMgZGlyZWN0b3J5IGFuZCBjb250ZW50cyBhcmUgJ2V4dHJhY3RlZCcgZnJvbSBpbXBvcnRidWRkeS5waHAgaWYgdGhleSBkbyBub3QgZXhpc3QuCgkJQnJva2Ugb3V0IGRhdGFiYXNlIG1pZ3JhdGlvbiBmdW5jdGlvbnMgaW50byBhIG5ldyBjbGFzcyBmb3IgZWFzaWVyIHVwZGF0aW5nIHRvIGhhbmRsZSBuZXcgZGF0YWJhc2VzIGFuZCBzY2VuYXJpb3MuCgkJTm93IHVzaW5nIFppcEJ1ZGR5IGNsYXNzIGZvciBmdWxsIHppcCBjb21wYXRpYmlsaXR5IGZhbGxiYWNrcyBpbmNsdWRpbmcgWmlwQXJjaGl2ZSAmIFBDTFppcC4gSXNzdWVzICMxMCwgIzM2LgoJCVBDTFppcCBubyBsb25nZXIgdGhyb3dzIHVuZGVmaW5lZCBjb25zdGFudCBub3RpY2VzLiBJc3N1ZSAjMTQuCgkJTm8gbG9uZ2VyIHJlLWVuYWJsZWQgY29tbWVudGVkIG91dCBXUF9TSVRFVVJMICYgV1BfSE9NRSBpbnN0YW5jZXMgaW4gd3AtY29uZmlnLnBocC4gSXNzdWUgIzUyLgoJCUJldHRlciB0ZXN0aW5nIC8gaGFuZGxpbmcgb2Ygc2VyaWFsaXplZCBkYXRhLiBJc3N1ZSAjNjIsICMyOS4KCQlVcGRhdGVkIGltcG9ydGJ1ZGR5IHRvIHVzZSBCYWNrdXBCdWRkeSdzIGdyZWVkeSBzY3JpcHQgbGltaXRzIGZ1bnRpb25hbGl0eS4gSXNzdWUgIzY5LgoJCUltcHJvdmVkIEltcG9ydEJ1ZGR5IGVycm9yIG1lc3NhZ2VzLiBJc3N1ZSAjMzguCgkJQmV0dGVyIHBhcnNpbmcgb2YgY29uZmlndXJhdGlvbnMgaW4gd3AtY29uZmlnLnBocC4gSXNzdWUgIzMzLgoyLjIuMCAtIDIwMTEtMDgtMjMgLSBEdXN0aW4gQm9sdG9uCglVcGRhdGVkIEFCU1BBVEggdG8gdXNlIFdvcmRQcmVzcyBzdHlsZSB3aXRoIHRyYWlsaW5nIHNsYXNoLiBVcGRhdGVkIGFsbCB1c2VzLiBJc3N1ZSAjCglGaXhlZCBhbGwgc2l0ZXMgYmVpbmcgZGV0ZWN0ZWQgYXMgTXVsdGlzaXRlIGluc3RhbmNlcy4gSXNzdWUgIzk3LgoJRml4ZWQgdGFibGUgYnJ1dGVmb3JjaW5nIGRpc3BsYXlpbmcgYFdvcmtpbmdgIHNlZW1pbmdseSBlbmRsZXNzbHkgb24gdmVyeSBsYXJnZSB0YWJsZXMuIENvdWxkIGNhdXNlIG15c3FsIHRvIGdvIGF3YXkgYWxzby4gSXNzdWUgIzk4LgoJUG9zdCBHVUlEcyBhcmUgbm8gbG9uZ2VyIHVwZGF0ZWQgZHVyaW5nIG1pZ3JhdGlvbnMgYXMgcGVyIGh0dHA6Ly9jb2RleC53b3JkcHJlc3Mub3JnL0NoYW5naW5nX1RoZV9TaXRlX1VSTCNJbXBvcnRhbnRfR1VJRF9Ob3RlICAuLiBJc3N1ZSAjOTYuCglBZGRlZCBhZGRzbGFzaGVzKCkgaW50byBpbXBvcnRidWRkeSBzdGF0dXMgZnVuY3Rpb24gZm9yIGphdmFzY3JpcHQgcGFzc2luZy4=
###PACKDATA,FILE_END,/importbuddy/history.txt,importbuddy/history.txt
###PACKDATA,FILE_START,/importbuddy/classes/ezimg.php,importbuddy/classes/ezimg.php
PD9waHAKLy8qKioqKioqKioqKiBFeGFtcGxlIG9mIFVzZSAqKioqKioqKiovLwovLyBodHRwOi8vZXppbmVkZXNpZ25lci5jb20vZW1iZWQtaW1hZ2VzLXBocC5odG1sCi8vIGVjaG8gZXppbWc6OmdlbkltYWdlVGFnKCdidWxsZXRfZ28ucG5nJyk7Ci8vIGdlbmVyYXRlczogIDxpbWcgc3JjPSc/ZXppbWc9YnVsbGV0X2dvLnBuZycgYWx0PScnIHdpZHRoPScxNicgaGVpZ2h0PScxNicgLz4gIAovLyoqKioqKioqKioqIEVuZCBvZiBFeGFtcGxlICoqKioqKioqKi8vCgpjbGFzcyBlemltZyB7CgkKCQoJZnVuY3Rpb24gZ2VuSW1hZ2VUYWcoJG5hbWUpewoJCSRpbWFnZSA9IGV6aW1nOjpnZXRJbWdEYXRhKCRuYW1lKTsgICAgIAoJCSRyZXN1bHQgPSAiPGltZyBzcmM9Jz9lemltZz17JG5hbWV9JyBhbHQ9Jycgd2lkdGg9J3skaW1hZ2VbJ3dpZHRoJ119JyBoZWlnaHQ9J3skaW1hZ2VbJ2hlaWdodCddfScgYm9yZGVyPScwJyAvPiI7CgkJcmV0dXJuICRyZXN1bHQ7Cgl9CgkKCQoJZnVuY3Rpb24gc2hvd0ltZygkbmFtZSl7IAoJCSRpbWFnZSA9IGV6aW1nOjpnZXRJbWdEYXRhKCRuYW1lKTsgCgkJaGVhZGVyKCJDb250ZW50LXR5cGU6IGltYWdlL3skaW1hZ2VbJ3R5cGUnXX0iKTsKCQllY2hvIGd6dW5jb21wcmVzcyhiYXNlNjRfZGVjb2RlKHN0cl9yZXBsYWNlKCcgJywgJycsICRpbWFnZVsnY29kZSddKSkpOwoJCWV4aXQ7CSAgCgl9CgkKCQoJZnVuY3Rpb24gZ2V0SW1nRGF0YSgkbmFtZSl7CgkJJGltYWdlcyA9IGFycmF5KAoJCQkJCSdibGFuay5naWYnID0+IGFycmF5KCAKCQkJCQkJJ3R5cGUnPT4nZ2lmJywgJ3dpZHRoJz0+JzEnLCAnaGVpZ2h0Jz0+JzEnLAoJCQkJCQknY29kZSc9PiJlSnh6OTNTenNFeGtaR0JrYUdDQUFzV2ZMSXdnV2dkRWdHUVltSmhjR0Jtc0FYSUJBL3c9IgoJCQkJCSksCgkJCQkgICAnd29ya2luZy5naWYnID0+IGFycmF5KCAKCQkJCQkJJ3R5cGUnPT4nZ2lmJywgJ3dpZHRoJz0+JzQzJywgJ2hlaWdodCc9PicxMScsCgkJCQkJCSdjb2RlJz0+ImVKeHo5M1N6c0V6VVp1Qm0rTWpBOFBQblQ0MnU3Wk1PM1FDU2l2KzUvVnhEZ3AwZEExeU45QXlZR1JrWUdCVC9TVGtYcFNhV3BLWW8KCQkJCQkJbEdlV1pDZ2taaVZXNU9RbnB1aGw1cVhsTXlqK1pPSGtBcXJTQVdJR2tJRU1URVl0ZlJ5bnA5MjgwZno1S0pmMHZiRFBwMXNmbUxWRgoJCQkJCQlSQzVNVTYrOU4ydmZjcDUwWGMvcjdhZjBmaDNaL05OdXh3SUZJeDlSQm16RzJCNEJHcVBBbjVpOGNWYkw4VFUxbjJjazN2dmVrekpqCgkJCQkJCXh2eFRDNzJjdlFwMGRyQm5uOTI0OXFVSzN5YkdWQkdwL0loUHRYMm4vQzQvbXFXVEZIUjhQWFlUUVE0ekFKcTRjbFpXOUozOFIveGMKCQkJCQkJd3RzckgxYjJMTG15WU1VdXZtWGNoMTc3Skp0MVBqOTU3dVhQb0ZrejFwaWVNZWh4UC9YeTAweWdpU3ZXWVRYUkFlclZHVk4yc1V2WAoJCQkJCQliZnkxTTlWbmhjbDhkN2xBclJMMW8rdFcvdWJiYURaNzY5eit2NXNlVDB4eGpuMzdUTnVyN0lTcnNNQ2VCS1Z6QXFLL21FUVlHS3daCgkJCQkJCVlBQUFDSWFYM0E9PSIKCQkJCQkpLCAKCQkJCQknYWxlcnQucG5nJyA9PiBhcnJheSggCgkJCQkJCSd0eXBlJz0+J3BuZycsICd3aWR0aCc9PicxMjgnLCAnaGVpZ2h0Jz0+JzEyOCcsCgkJCQkJCSdjb2RlJz0+ImVKeDFWNFZYbEU4WDNtWHBrSzZsUVZwU0JBbnBCa0hwWmdFUmxKUnVsbHBwcEx0RXVxVjc2WlR1RnFRN2xvNXZmMy9BTitmTU8zZmUKCQkJCQkJODV4NzV0eDU3cDNuaG4xUVU4RERCbU1EQUFBOEpVVlpEZVFLL1c5aW9pTy8zZUptdzhnRjFWbGFTUXNUT1h3d1A0VWk5MWlPaXZyTwoJCQkJCQlTUHpjZnhNb3paYnVnZnhKNlNLbjU2THA4Tm5GM2N6SkV1RHU3czc5eGQ3RzJjTE0wWkxid2NrcS9WZ01EQUNBeVpSa3BiUThNbzR5CgkJCQkJCVBYL1FLUGoyUzNTa05seC8xUzFOMUNtOU4xaTU5dFZ2ME9uL3FsdHZPemhQWVVhRkU4U1ZIZlF0RWcrdEI2b2tUWUlpRnl0UjlKT2oKCQkJCQkJV0ZranNlU0hja2tjdjV3aVZITGhqTEFJeWhSMHhreEY5L3ZUU3Y5eCs5eXRSYlNRdytwSWE2cm55ZEdTakttMnpkckk1YVhMOWNsUwoJCQkJCQl4eE9pMHR0TGxyMzNUYVNSZGVJby9JMFcyUndtYjllM0tBQVQ5WDlHYklrTE9nZWF6Q2RxWGxJUFJJb0duWTZJUkdKZ1pPMUhLQU0vCgkJCQkJCTN0dHc5Z2Y1ZGJGVDlOTk1DK1hNb2srckhBR0VjZ0NaVDRTbkpGVzQxdjNUMERiNFBUd0NydG1mNEZYZ0pFenRFVW1CUXNGb0VlQVAKCQkJCQkJRUFTS1NHNnlOVHF1aHNXaFo2SFppeFZNZXljT1dERHp4dGxDSFFDR2dMMTJCNnFERi9ZNTlnK3EzQjNYSEdOUG02OGZoaHVlakRFRQoJCQkJCQlBV3ZvOWhYV2FoZ0VUTklndlpKblQ5bXZ4dy9ibWEvMkYvZWFPUUN0ZHpYWjV5dnF2akdxcHFZOFZaY3BHdjJjc1hNQmZZcVU2SDVVCgkJCQkJCVJYdGUvM2dqcnV3eEVvRUpwUHlTc05SMHdZbUxIa0xvMS9YMHhPRjl1UGs4TVp4ZzRZVXRlR1oxZERIR1ZtYmhXUXM5bno4SENTM2IKCQkJCQkJWFpDYzZna0RMT0hGa3BLTzNrRWhla2drNGZvWTBQZjZFY09hSWorMWZJM1pJeDBUVzY2YmJWZk1DNUNEL1ZabllnU2ZBUFlHQ0kxQgoJCQkJCQlVZWxYemU3N1hUR2ovN2RGcTRNeXdkbHViL1dOd1BzMFZNZE1odC9WVHZwMEZMaUd5SWhvdzVPQkMxYlVPZld6eHhmYVdXU094SG50CgkJCQkJCVV0WDNUMVJ3YWc2L1BDZG1pdjlRZ0d0UXpTTDVpTmxUa2h3SlVldjlYWnd4SitVN1MydzRXT2FUTGpQT1IzdGNGYVFqQk53SzZDWHUKCQkJCQkJRE4wdlVZWGVYYzlodXJxR3IxeWZZTlQ0dGRzdkVIVVRkY2NCNE1uUUswcWJaRjRiQkc3L0FES2tRYUd4Wm1lamxyV3FtU2hWSkkyNQoJCQkJCQk1c3pzcjJFMHdETDlkblhHcnZidjEza0hUK1hMZG8vM2VEZzJOcVRlZEM2MThQaHViUnhjVVJRSTJENXY1MFN2ZHhxTitQeitGbVYvCgkJCQkJCTdYMGsybEx5dUlnRkdJNHlRdGhiMVYzRkNHV1lCRktUR0Z1TitScUhvdUtJWVBOOUxYbDk2RnRGcGVwL1JvNUgyTWJQekVrSEl3WHkKCQkJCQkJR2pjaU9LOHJyYnBHZERiMG5xVG1kaHhNQmhxajl3QTFBUzBjMmxWT1p2TUVjQUo5REpmOW1abkRSbTl5NmFvQTh1OFVNelBoRlJqWAoJCQkJCQlDekdlSStjOHVGUzRPQ2g2Nkl1bWdCa3FoeFhaZzU2K0R5QWVicjV0KzR6K202YlhnTStRTzNJWUhnd05DSDJFNzJzWjA2Ukx0Q2V5CgkJCQkJCW9XZWxVNVFBK0VwS1NJenhEK3V5RWZveXYzS0pRbDVod01TQXVMRWtwOXFTSncvL0JOTU1iQ3dNbjJUcCt6SVF6aW1Oam1RcEtvUHQKCQkJCQkJV3FtVFNiUXlXUUE0S3hTdDduMmVucmUxVE1YcFNuVFdoMzUxTS9OZGRybUd2L01vN3BTTWRxVHNkbUY4djdBZ29kUEFHTkNrNi9PTAoJCQkJCQlmU3BYUnZ4N0lnS0w3ZkE5bHpKVHpIR1VCMzNtSWFPdnVGOVFJSGYzaFc5aTZMclBmVG1aWWs3aWlXU20rRjNlVldHb0ZxNi9odzBjCgkJCQkJCURwRzB1RkQ4UnVXVjdZTlVuQlRlNTlKb3pTbFd4TzVjYnFiR0VWbE10cm9sSFJxOEdJZno2b2tJZnNJQ2lHSFZSbVhQakhiWnpibzQKCQkJCQkJa0J4MEtKcGpVcnF0VElYdGlzRFZaRDc1V29hYmduR1ZrQ3pSREZnQ2VORXVSMmQxRmRJMWhPaDdtZGUrdHpGYmliS0JHMGw2MmJLcAoJCQkJCQlrK0Fwb1VEVWJnVFVUUVVUbzExcmFyNkt4Z1hvZ3MxdFJYL1R0RFdESVc4Y2ZTMUxjajF3aFpHZWhxSDIwR09NZXFZTnNsODBoNXBiCgkJCQkJCVRQSVhqVjcxSyszQWtYd0xVOG9TN2cwR0JjRElyR2tEUkJNam5sd3RmRDRtK1RzRmxYMWI5UDZkQ0c5aHhQZC9zaE0vL21OSjJLMDkKCQkJCQkJblhlMC9adTF2YkNORzNaaVBuQmE2Y0xGM251SUdybkVaeTQ1S2cwS2Z0U3E3WTFzbEJMZDYxZVFoOGh2c3JSOWliRVVwZlo2TWhZMgoJCQkJCQl4SENCTXRkUUdTd1pHQUJlRG5lYUVIQmJkYVZSWmgvV05lMjVhVWZ0S1NwV21YaUVrNG5HS0hBOTkvem8vRUVQWmREQThRR08xeTgzCgkJCQkJCXAyeWY1ZEdZYlJrZVdMNkV4WnZZRzBTSUprK0tXT0xDMzY1emdreWs1Q0NLQklCRzhoUmo3VXp6QzdzRFF2N3R3SmdmN1lzeEZJK1AKCQkJCQkJNGUycmtaUjN5TXFnd3h1anpaS21NTzdMbFVoMEpWSDdaL1RBRGpad0dUNnRnWUo3OTRoazBnUzhHM3JZYkNPTXlEdjRxTXdBelJsUgoJCQkJCQlqS2FUMTM4MjdCOHRQZWxLclFrdmJYdmI3M0ZjTnpVcGtQdUZaSHFhVFhkNXVYWjU3UGRKZHMwMzJuankyb3RabFJOQnMyaXRGMlRhCgkJCQkJCXA4Q3VIRmJBcVRERXlWY1R6OGJCYUl2Q0F2dDM0RFZtdjBya3NLNWtINWZWNVM5THhkREo0VXZqamZNdzhrYkhLMUpWdWhqVXVCRVYKCQkJCQkJM1BmQldSajF5SnI0L0U0eW1lSDNSb29HRDluSFkyQm56aXA5RjBFcTVnTTJoZmZ1QkY1WnExK2RhKytCSjRMYVc2eEcxN0JCNDNXTAoJCQkJCQk2QWszMVNyNDVwVGNYeTdpeVF2aXhjSjNYc21lZi9NazR6ODhQTmFLZFdvQjJhbnVOT3JFOWFOYUw0WFBKNTBoWGkyMXZHdzA1WWFzCgkJCQkJCTU3T1VvZXJhT2hDb0YyWFdpaUd6RVNnb2p3NzF2UlptQ253UHovR3ZkQnduZ2hPazRpOWpqanU3a0hweEpEcEVmZGMvNXphMzlucS8KCQkJCQkJVzNPT0dWdkNkNFNieUFjYXdqYnJLL1JjRnJSQjRid2VRWGVPQ2FqRXUzTEhRdWNDUWlYUTBsaEdiYzFYdDIrREc4NVJla0p4UWhhRwoJCQkJCQlCazJaS0VJb01oVUVGNDI3K2RGdnFlU0M0Z0N3QVJZSWh1U1liK200Z0ZMUlV6bUQyU0YxOEQwMk5tR2U1YVJlL1hJcllPVHVzYlhPCgkJCQkJCXhlNkQrVGdoZk91OC9FQlBFRWJKYVNWSEVVUE9LSS95MHBHeEthejY5bFJFUTFza3hZR0VocXRBYlNoTUNrbm1OMDgyZ09ZVGZjdE0KCQkJCQkJSjZ5Y0gvZXo2bS81Y2hPRXlvc3FObXlYWVVrc0lpZDZ1QVhHdHo4WUpqVzB5aE93Z3NJQk1FVzg3YlQ3RXN2MEpldHNVV1l2VGg2MgoJCQkJCQlzaFMyVHVxdU81blNZcHN5bEJSVXNZKzJqd2tnSkJLZUNXY2tuUGY5WkZtMXZsbjBqQXFtVDFkelFad29SQ0p6NVdxbGJVVHQ4b1hNCgkJCQkJCUp3MitSTTBYdUdCazRyMkhNMEhyYzcySnVEVDc0aTlEUmg4T3NBaUcrekQ5cnM2UHR5SnBkWEhHc1gzS2k1UTVRT2g0UUNoR1FHcnoKCQkJCQkJaXlWOG5ndXRBbDBBWHhnaHVScVlFSmFDRnBxcnExMzl2S3NzdWdXQ0RYVDkvRnJjUTBHQ0xET0xBZXFnM3hkSlh3UnE2MUcxS2hnSgoJCQkJCQkrWWdZRmdsZVkvTnRPeGdQOUZCR0FmSjRINm1DMElNQ0FmQ2RnTEE2MXk2WWpNcnBVYjlNVkFYeUtvNXd6d3ZJRlI1M2lHVUVvckxLCgkJCQkJCXlPYnRRMjNaZjdjcnc4S0o0VjV0K3pyUXRvYXhYd1hWZkY1YkdJVGROdVE5Y3V5UjZ1b1BsS1U3L042RDFsQUQ5TmlJeGcxVXVKSFUKCQkJCQkJNndMUHlORWhYNXdoamR0QkFobVEzRkM2K1ZwYnZXblFHM2hBTUNVbk80Y3lVbUM4cVNMUHVhOTRvVkhubWpCNjdxN3JKOGJHRm9WKwoJCQkJCQkvcS9jZDlVbHlRNk1zeTBTeVdPZ3NzSVJIazRJSjVqZy9TNlh0OGlxVzIyOWxJSFNoY3NvSDZ4RFNTVzFoMGFaUFhFVXVFS1hic25ECgkJCQkJCVFFRnlRcVNsQVRwRXFRRE5Qdzh1aEpwb2cvK0xmYU9NMUJLcDBRQThJbDVvSnNidlhIalJJM3BtKytBWCtKVFNadEN3OXdNaGloNzMKCQkJCQkJR2crbzd2WE9ISy96bjFmWURUL05RMk1CMVFZZUhxdi96cFZLVm0rc0x2SDlnd0RlVnpqc0YzSy9LVk5HSzhOek5jRHJueUZva21PeAoJCQkJCQl3dlNyK01JZWhnYW9MWEQxdDBvMFVwN2R3OEY5aGNwNS9xZU14Y1RQc01zc1p3MjZGVWJiMWIvVXRIeXlMS3dEbjVSNDE1SDNJdytNCgkJCQkJCUFSWXoyK3luOHZwL0pTeGZMdkU1bytWOC9YSUdnTzJreUVxb3REdlVZSFFMblU1LzNxLzE0bkU3Sk56LzA5YlhCL0tubG9qUGwySVcKCQkJCQkJZ0svQXhRam5uZnR0YmJaVVVVa1AycmxwemJ4RHNsbGJHeit3RkMvTE9qbUlwc2ZyeHRRUFhlWmwzNUVXTjJUSkg3eWp1Z2x1RmpHYgoJCQkJCQlFLzhPRmdJelJoQi9xclhHWlFPV1pkWWRnMm9Sb21ESzEzYm1QcVNjUU5sVEpwaHZoc3RMS0N2UFJuejlnVjVGRmd0aUZuOUN3b2ZkCgkJCQkJCUVlMDNGVlU5UEtVYUlBQlMxemJQQ3d1WUJjUUFwalMxcXpiemFqcmRwdENML1V4ZGoyVlFPemJOQmFEbnF5Y00rclJLVTd0MFQ3QnAKCQkJCQkJT3IvZ1dYZEIveGt2Z0FaNzdnRTY2N2tieEZEeDhqY0VqZ2tKSFVGOUFiSTlzQy9JdGFQMlJNL0svbnJORktoTGMwK3pROERLYlNTZgoJCQkJCQlvN3V5VTN1SE8ra09teGFWa0plNGoydlNEM0dQOGdTK01rV0xMd1IrVUVBVFRLTlF4RHRGeTJtcm9CV2tPYVFmTXhnamJoK0djODd2CgkJCQkJCVlCQ3dodUhEMjd0TGo5dU1ZNVR6c3QrcDdhL1E1U0V5K1d3ME1KK29BSVJteisvVmdyWGh1Zk9VM0NnZ2FTUUpoV2ZGUlZyd28zS2IKCQkJCQkJdjlSMnJBZmhpbTNKNEVwRS9YMDNhOXZaRzN5RWlUMlFmcG5ONUhwZXVMdnpOTll4Y3g5Q3dPZ3lRcnJOZ3pMaWprVXJKQXZldEJLaAoJCQkJCQlIRklEREZmZDhvL3plK0dXSGFkSjVRU1F2MVRsNm9GZk1NRzJ2MVNIclN2VUNpejI2aXEyWFdkL0xyM0ducnNYZXVVeDdwczN6NzF4CgkJCQkJCUN5OGsraXdpaUM0TnNxMUJ1YmVuK200aUZHN2JjYlJuaUJPMTAyM1ExQmg5Y1hmVStQTERndFZDdWJodndEUkdCLzJXUFNJRTFYaTMKCQkJCQkJR1llWUpXeEp6bWROOGtqT1NBZXBtLzZRQi9SZGhYWDlMSjg2dFVPWVdkaDJiQll4Z1ZpUFhnNFU1QnY3UkUxalNBelgzN0Z4aVlWaQoJCQkJCQkrbDBiT0RhRkZvSmlXRVk4WGlVWWdxZ0JzeWlYeXhNd3JSbDBIQjdGbEEzM3d6eStRSGtVcFdhQURRVmJxc292TlFtWi9ZZHZGek04CgkJCQkJCUVsSXNINS85UHNGZENCMEdtMFB4RGRja09UaUg1QUhEUHp4eGkxS0ZGZklzRUFsZDhrYnpIcXZ1UGllazdWd2VsZWhoK0VmbjZiL1UKCQkJCQkJSHFuTG4xWC9rbVhJUG1JRTAzZ0hvMC9KTGZjQmZKSnpNc0RyYmhBK3liSE16WTllcEUxY3kxUHU5NFRkWko5U1JHZVRNVmNQSmhpZwoJCQkJCQlSaUx2OXplR3QzWDd1MURCRFRNS29icUdQQzV1b28vU0RReS9XWFNBNWo5Zi9TZW56UDBNV2VzOEVrZDdib241MW5JUW5yMkxoQ1lWCgkJCQkJCUUxdHU5ZjhXZ0o3UnRQaUU1NGZCMWkvSGVaUDNGWnQ1MHRiek10UnpzTVM0TjFpSG0veXFqTURyYkx5R1V6a0hGcHRTTlJML0lOanEKCQkJCQkJK2gyOVdMVG1IaUU3Ym4zQlh5SnpZcVdBbUFYcm1yTU83RHJsckZyUGJwODF0THZhUWRGazg4RjF0aFhVYk1MQU1wcmY0a0JybTRZQwoJCQkJCQlpdGR0TkpVZmt5clJWUCt5bnpIQTlMN1JVSFVxV0RTR0hPWHgxZjdRV0N4ZnBja3ZTVnIzNnlEcE13MnVzbjJqbXZvaWhYdURKOEhtCgkJCQkJCUVTSXNBR2VDVDVkdzdMYm1yNWpYeDdobXpmMzByWVcraitTTitydjZTcVFmdldwS3ZiczMrWngvenc1aFAzMzU2STU4VjJxZkdCVVoKCQkJCQkJMHNhZHh3Y1huTXFPemxTaTRvamdhVlBpbUZXdXBtL3c3R2JuUklQNkxreEFZd2Z1RFdHeGhXZytvUXlDd3BPaEtaMmVmV0VkQVNvTwoJCQkJCQkvMGdXbC9acE11NG9GNWZXeHJiemtTZkthUHprN3o1Q3ZKMWVpbHJDTzRlZjVFTStHV2RIYk5Ya2t3M29teFBxU2dKdGxxTXNkUE8yCgkJCQkJCXVBeTVIaDVubDF0VSt5MmxkZThsZE82Tk9WOWRhZVpzMVp0dExkekhEUGYvVFc2US9QUHljalhlK25IbkVXZkNHMXlSd2V0djQzYWwKCQkJCQkJSlZqSytIVDFxNEdOV1haTTZ1OU5KYWt5SDNramh2Tm1XVnh1d2oycUNjWWgrcnhyRHF4aysvT0lqaTJXcGxHZ2V6UGFBY1ZKdFpOeAoJCQkJCQkzTEtOWVBITGRaTnZXS3QxRGRtWG1mSVMxeWcvSi8vbW4xNWhDSjhTemU2czB2djFCM0JHWFExMnBVV0ZXejNqNERVdUVkd2VJRnRZCgkJCQkJCXhSUW5XdVZKTkdSZEh3UGxHUnFZMmVsU3RVZFRTM1MwOTcvQWRILzRWYjZPQUN6dTNZdXBJSDZhZW9WTWIra1NUZzdlbjRybDhmeUsKCQkJCQkJWU5PdXFycEg3NWNUU3lScUNWV3hCTGtBcVlETjRob1JPa0xoQTM2UHZDQytmdklmTE4vZm1sVllIRFJjWnJPNG5nbFpVdzZuVzRYZwoJCQkJCQkwSFcxZEJDYmVKdDRiQ1lqTGRMUlZndFBxQVdWazVzZlR1OEZsbXlFVUxQYy9PVGVOT0lQYk9EbnY1OURjaE9vVmVKeHB3cVMzVDNGCgkJCQkJCVZTNmxUVEVkTjhJMmdTdytyYStEb2pIR2YyKzBCYnFQUFlUaGY5UGl1VXVjVXpMMlhCRkFMdzgvYk1PdGxHQnRQV3Z0YTdxbytWRXQKCQkJCQkJdXF0ZEkreksyTHZVTVh2eitMb3J2d1lWUjN6a1pzcElsaTFJWjM2Q1dTQ2xGSFdSMTVRVDU2anM1MDhTUVRpWG5zMURpMFBwOXhLUgoJCQkJCQlxa1BuaHp2ejZraUJCdVAxRnZ4S083SEZmbTdRQkpXdVk0WEtzK2RscVVQcS9xcmNTU241WHdSNXlSZURienp4N2crRXhSOFhGblFTCgkJCQkJCWp6YzNUdnlIUkNVOGZzeGx2UnY5WnhtK2ZYVm9BYnAzWHJ1NHdpTWs1UE95YXh0ZkFEMWZ1bVBuRU0valByeThDM3I0T0czU0NWUGsKCQkJCQkJUEtXRGIwVGZPbDdIYTBwVmZ1UFQvUjB5VE9qemhIakZsM0JBTzFoTzNWRG5FTi81VndiY2RtSmMrL1FnbDZyY2FjTVRhZFpscDY0cAoJCQkJCQk1Q2tIOGVSL2JNdDQrQnVmOFRTbzZXSlVhTXZkUXVSRVV3cDFGdTdvZmZiU3d3eExQdGIwZWNUcUxZNkhOcEdmWlZrb0k5REkyRkRDCgkJCQkJCWoxQ2lJZTMvRk1mNndaSVhxamNldU9KV1pkeTNvclpwSWt5WjdoMm94ZjdKUVBiVWkxOFY3WUZKNGdlbDlXT3Roc1lmYmdBR0pXbG4KCQkJCQkJeHVyOFg4KzRXaS9pYmtxZE8renBQMnl4VnVGSjV4UUcreTRnZ2c3WU8zZjJpWWlSd2pkUUNlQzdCMDU1V3hpQ2JGTjd6cGppcWpPRQoJCQkJCQloaGdWZEU0NTZOOHQ3ZVZkUHdWTXp4Qy9KV3VQZ1V3SGUrTmdyMFZoQ2ZsK0w5MHIxcytyS2xxZnRlNzlubDlxdG8rTExLWVNuOXUrCgkJCQkJCUpGTDBXa1B2QS9UVDBMMGxGcUdUbXY4b2ZGYXgwdW5OMmJJUGtnSjJQRzVzelJWbkd4Tkc1QzVMSzMvbWo1RmFKMHBmM1BWYmtLcFcKCQkJCQkJMmhSNHpyQTIrcXpHNjVodmN2OWw2MlFOWlhHaGM2cUZFNDE4dWU1UmxBWFlGSllhQXZRNzNsdG5pb0hYdnN5UG0yVXkrMXovZTUvQwoJCQkJCQlBeis3U1BkdFc3MFhETmowU3M3UitxTjFlVGM3YjJtYlVoZjJWQ3IrUlVIbmVYV2RueVg4a0V4a0d3c25DVkFRY1ZQRXdDL3VCdVRxCgkJCQkJCVlZRytlZkJBVGRFd0JtVUtDZVVRbksrZW5vbjJ1V2E4ZG5QL2duc3lraFh4OW5PcFB6R1hzN2dwQUJqNG82OHBqS1BBZnQrZ2hDcG8KCQkJCQkJaXF0Wk5CU1VYZHVNTDF3YXVnUDV1aW1yK0JNNGF5YmlOOStzYTAweGxaS1hoUlp6aXNMaThZRGJubUhoUGtkUFdkc2V2K3Q3Z3Q1dwoJCQkJCQlsek9ybjJnYnNYcTU5Wm9GYU41d0taMHJzQ0oxLzlMc2ozeVZrOXM4UVdyOHI0eHFwSmI0eFpzcGJoZVZCeGwrUXVkVWFKTFBXcXUxCgkJCQkJCWN4TWNjenErR2QzeWJzRU9LUnJlYlhQSXMrUkd4UkdKeENUUFV0TGcrVFhXRnJsZFJoQjJadFFTa2h5SDZrY3c3eXhaTk5RY1Ntd24KCQkJCQkJUUtnTGNrRXhCSWpnVzJzSnpjYlBmWlZaUGNSN0Nhc3NmUnMxNjQva3FLOFBsNDlFN28wcmhxOURUa1ZmdG1peHNvUnB4cGxDb0xkMAoJCQkJCQk4QkY1bW1FdzEwTE1wRkgycDBmSUp4UTl1bmNlSkJRcmkrZ0hiZ1ltUkIxWVdlTm1PUTNaN3JjWVZRK2dmV3l2TlcvcjFJamVZbVVWCgkJCQkJCXgvUFJhcjNFdUNZdjhPT2pCUHZ4Z2xTWEM4RTZOQ0krQzM1bFJINjIrVzBPdjI4Q0lHUjJ0TG5tcW9qc09KZ0xaM1pzWjRnRURsVysKCQkJCQkJVTRYK2luMnEyWDBzVkJSejNwbjd1dlpNbHVFcjRwWGYraWc4a0lIdGI2SWtIVkFCeDhrK1FDcjhDbHJXY3gxenZ5SU9JbUJaSWhzKwoJCQkJCQlDaUsrc0RzT2tYUjZNYnZWNUp1Y1paYWQ3WG9pUXVaS1d2NU1rdFpNWXNLZ3hLR3ZlYnA0NUhpc2tMdWxsV3JpY1dGMnMrNXRTZUtsCgkJCQkJCXVOQWFxaGlLdHdRcEU2NmJpTnlqRG44SVN5c0NyL01XVEFVY0d3cTgxSTRxTG5tdE5yRFV4OXpQN2ZpSXVOalBIOHZMSDVPMVFYd00KCQkJCQkJM0dZczRJSmYzcCsyR0ovZTllZGUvMW1ldE9UdWJxSmo2Si9ydnZmWGI3UWtlNjk4M2EzdENEWkJOWnJUbEo2TEdnMmJTVWwzbEpQdQoJCQkJCQlIS1EvWU1KUUIrSHN2QXBza2RERjk5SVdsR24yNE44V21SVWpGc3M2a0FZcm1VcldxcDZIandxZmxLaGVtNTQ0QU1xeHZ1NmdpQmo1CgkJCQkJCTBPNEtqUzNOL0gxSXRDWVdrWnJqWjdoK0svV3psOGZ4S04xMDhIVGJCdkNBUCs2cFdxeEpJa21DNTRqUGk1OXoveGxQbHJWL2ZmaWcKCQkJCQkJMzVqTHFLbE85aGoxUjFKVGNKSzRWYk5iSG4xVlhmd2ZGV3RxOVE4NzYrZk9qcmVVNDNjeUE3cjBSN3lrdEVrbkdmY0ovZzlWdFQ0VgoJCQkJCQlpRS9HUFJHOHlkdmtzbXhBM0ZqUEZHNVQzMTZSRklFYThGVElBWkhQcURRdTNYVzV1MC9sWGV6VFJXaHptcXJySGZiQWpzODRnZHFGCgkJCQkJCU1EbFp4N2p6QmpwUFY0VkMwMWlJdm5NSW1ncHdTczZuaHlCMTI5bnFCZllYS0VaViswYjFUZzZNeUx1NFRLWFJMRjNFSUoxNWNVN1cKCQkJCQkJV0c3WUNOY2VvUlI4MHNZelluMFJEZjdaeHdWRERSbmFoUmUrOHJ0R3k3Zkt2V2ZwbDF1V1FpWC9Sbzg4VXAwa1BqMVZ2WXlONFpEVwoJCQkJCQlGamZpK09EbWJBcmxWK3lsM011cGRGL0p1S0Z3emtpMmVNRnZaVDdZWW5QNDM0WW9YTXJIaGVkdXI4S0V1VGRrWUFPVDBBemgySE9JCgkJCQkJCU1ERXRPc3ZjZE5mb280N0FHSlhZZHFsaFo2V1hGUHJnWmE1bEJYM1JMaW1oVHE0a0pKdXk3bzJDL2o5Q2puOHBhaGs1YnoydlMrTUkKCQkJCQkJek1ZUVNFZGp3ZVYwdUpNQVVkN3Jjb3Nsazl4cWZhWVBLNlZsOGdNTXNDSDZWTTdRZmZ3L3RwM0tIUFZiM21NMjRoMHFOSEVKVXlldAoJCQkJCQlwaUpTWDFyR2x4bHQvMVF3cmtadHRWL0wwQUxMa2dud0lNdEZMUE90MzMxY1QxeXZ0MGNPT0FjdW1VcDQ3cFBLVFdFV2RaR00wcm16CgkJCQkJCW1mTnJKNHptZW41QkZYTENwcWpDOVVkL3ZoRkttQitOWjJGSTRJMEgxUTI1WCtOSjIwWFJyd0lMMTlSV1JyOUpiSStZL2xVbGUvVmgKCQkJCQkJdFk2Z2NGQVNKbjNMcmhlTnNzWGQyYlJvWUticmxoZDJ3THVWOXAwYW1kZzg4L2kxWDhGbGVqdURsWTNERnRFSEs2VWVJOHhHYnZJKwoJCQkJCQlkMThjUHNkYlkzUUV0bXplcm14YVBaSi9QVE5qSTJsZyt3dWJCL0tOMmMzajJoMUI5eGlmV2hIZlJxazkza2dLYmJ2YjF3MU8vUW1ECgkJCQkJCVNlTVBGMzkzNG0zKzRYYUt6YWhhMUV2aG4vOTE2OXZvYmFJbyttV0M0NFhaVHNGQ0NyRVhVdmRBMkxlZkVDNGpuRCs4RWtaZWtyWlgKCQkJCQkJcm9QdWxoc0RWY0FQNTRjekxoK0h5VjI0QjMzUk5rWU9IVzBEdkNBZGlGUnhqQmZBVndnSkxFMWpYa3NEeFFNZXFUN3pOZkt3bDZnNAoJCQkJCQk0emFQL1Vjb0cvVk9IZmM0bVp6TUg0MnFrbUpCa2IxNWFNdGcrRlBCa1J6ME5WM2ZnQ1JKUXJ6QVZkUGJZRVdPMHlKUGpuamUrSjdpCgkJCQkJCXdjVm5NRy8vblhtNmN4ZnNTRWdjNDNUZm9kc0t5OEtLRFN2T2pUekVvRFQ3TklLMGtVNlpsQlZiZW5Md24zM1lCNXkzYTJ4T0hkUmUKCQkJCQkJaTNmMzRqK2Uxc2duT3U2c1lZT3ZCd0xPYjhzVG5qM3YwNXpWVWluL1JKeEViU3FKbnN3blJvdXFxWm1JemJWK3MzVndXNjNlYVhETwoJCQkJCQlmamVrblZWTHlxYkxBcHFDd2Q5ZUlRNnJzZHZHdUUwZzFPb3JUWTU5ZDRaMjJZN0U2L2l6YXpYd3NZQzZRalVOaTdaUUR6d1pxaS9yCgkJCQkJCWJ3dHNuZGRaNE1Qd2t3QjkrQkljbnpjSy9lU2NrYWV5S3pySWp6eGVMWDhEUnBQTWtla2tnYkZPdE5DWDFjSTRRRkRjdDd4YUI2clIKCQkJCQkJUFJOdjFQSWZqaTBRT3BMdTMxSVZIYXlKSzZDNTFpK01abmZ0Yk04dGVnUldtTzNtN1hLWlY1aFpiNEtCOG04ckNDSEIvOGQ0b3JQZwoJCQkJCQlIOHhqS1k0L0FpQ0hrcHlhYklVMEpQQi81aXNYWlE9PSIKCQkJCQkpLAoJCQkJCSdwbHVnaW5idWRkeV90aXAucG5nJyA9PiBhcnJheSggCgkJCQkJCSd0eXBlJz0+J3BuZycsICd3aWR0aCc9PicxNScsICdoZWlnaHQnPT4nMTUnLAoJCQkJCQknY29kZSc9PiJlSndCTlFMSy9ZbFFUa2NOQ2hvS0FBQUFEVWxJUkZJQUFBQVBBQUFBRHdnR0FBQUFPOWFWU2dBQUFmeEpSRUZVZU5wOWtUMklHa0VZCgkJCQkJCWh1Zk9hM0pSaTRTa05vR0RsSXFZNHNnUmdrMElhVFJGYks0UUlvTEZvWkJDc0VoRUVJd2dhNkVnWW1FS1JSQWIvd3AvbHdpN0JKVGoKCQkJCQkJQWdiMUdoV0ZnRWFGNENrbk4zbFpVUFkyUHk4OE1NeDh6OHczTXlTVHlRams4M2xTS3BVRWFyWGFZL0FTdkFaUHdINnhXQ1RwZEpxSQoJCQkJCQlJNVZmQU9ZcjB1bDB2dmQ2dlU0VEtaZkxkY2h2L2lkYldKYmw1dlA1akVxeVhDNS84VHpmaFB3ZXlyNVVmbDZwVlBqTlpuTk4vNUViCgkJCQkJCUJCdWNSeUtSZDlCa2doeUx4VWdpa1FoTXA5T2YyOExCWUVDejJTeU54K01VTnhCM2NKVktwVmlWU3ZWZ0t6OUVPeHdWSlpmTENVd20KCQkJCQkJRXhxTlJ1bDRQTjZ0MWV2MUM0dkY4aGJxQVFtRlFpZlZhdldiV0Y2dFZuUTRIQW9iQklOQnVsZ3NkbXV0VnV2U2FyVitnS3dnZnIvLwoJCQkJCQl1RkFvUUw0Vm9WMXNUUHY5UGhXSDQ3aExrOG5raFh5ZmVEd2VSU0FRYU53Z29ocWhWWFJFcFVrbWt5MmRUbmUybFluVDZmelk3WFovCgkJCQkJCWlJdndiZFRsY3QwU1I2UFJ6R3cyNXlIcXdWMWl0OXNKVUx2ZDdnYnVkaVV1eGcvc3h1djErdHJuODNFNDFRL3hDTWkyTXNFTG51S2sKCQkJCQkJUnJ2ZDNuVWcrcnFaMSt2bDlYcjlaMGpQZ0p4SXNtYzBHby94R0l6TlptTVpobW1HdytGemg4UHh4V0F3Wk5WcTlTZlVuSUI3WUE5SQoJCQkJCQlJMHdleXVWeWxWYXJOV28wR3JOU3FYeUZ1YWZnRVZCSXhEOERtU0F5Y0FjY2dvTy9TYjhCWi9QN0NFeXAyRjBBQUFBQVNVVk9SSzVDCgkJCQkJCVlJSTJTZ1FwIgoJCQkJCSksCgkJCQkJJ2dyYXktZ3JhZC5wbmcnID0+IGFycmF5KCAKCQkJCQkJJ3R5cGUnPT4ncG5nJywgJ3dpZHRoJz0+JzUnLCAnaGVpZ2h0Jz0+JzMxJywKCQkJCQkJJ2NvZGUnPT4iZUp6ckRQQno1K1dTNG1KZ1lPRDE5SEFKQXRLc1FDelB3UVFrRnpoTThBZFN6TVZPbmlFY0hCeTNIL28vQUhJNUN6d2lpeGtZdUlWQQoJCQkJCQltUEhTM2JvL1FFSEZFdGVJa3VEOHRKTHl4S0pVQnQvRTVLTDgzTlNVekVRRnQ4eWkxUEw4b3V4aUJSTTlnMWRxNnFWQXhXSWd4YzVGCgkJCQkJCXFZa2xtZmw1Q2lHWnVha01oZ2I2UmliNkJoYWFmS3QvQTFWb2VybzRobFRNU2E3NS9VMlhXU2poNS8vLzlrYnpPeGxGRjN4ZXVWWXUKCQkJCQkJZGw3SVYyWmQvNVdWVzhMNEdhekZkYjV6SHRyRERkVEU0T25xNTdMT0thRUpBQVFGUDQ4PSIKCQkJCQkpLAoJCQkJICAgJ2J1bGxldF9nby5wbmcnID0+IGFycmF5KCAKCQkJCQkgJ3R5cGUnPT4ncG5nJywgJ3dpZHRoJz0+JzE2JywgJ2hlaWdodCc9PicxNicsCgkJCQkJICdjb2RlJz0+ImVKd0JtZ0ZsL29sUVRrY05DaG9LQUFBQURVbElSRklBQUFBUUFBQUFFQWdHQUFBQUgvUC9ZUUFBQUFSblFVMUJBQUN2eURjRml1a0EKCQkJCQkJCSAgQUFBWmRFVllkRk52Wm5SM1lYSmxBRUZrYjJKbElFbHRZV2RsVW1WaFpIbHh5V1U4QUFBQkxFbEVRVlE0eTJQNC8vOC9BeVdZWVpnYgoJCQkJCQkJICBrTDNZL0d2cWZNUC84WE4xT2NreUlIbSs0ZGZHelZIL3cyZG8vUGVmS3M5SjBJRDhwYmIvY3hlYi8wMWZhUHczY2E3KzM1cjFvZjlYCgkJCQkJCQkgIG5aNzR2MlMxLzMvWGZ2Ry90dDJDUEhnTkFEcjUvNFp6MC82dlBUc0ZySEhGNlFuL0ord3ArYi93ZU5mL2pLVnUvMDNiMmYvcU5qUHkKCQkJCQkJCSAgNHpRQTZHU3c1cjVkK2Y4N2QyVC9iOTJXOXI5aGMrTC9wcTNwLzJjY2F2NGZzOERtdjJvOXd4K2NCa1RQMXZ5Lzh0U0UvMHRQOVA1ZgoJCQkJCQkJICBlS3pyLzd5akhVQkRzdjVQUDlUMFAyMnB4My9GV29aWDBwVU1CamdOQ0p5dStNOXpvdlEvNTM3UmY5YmQvUC9pNWx2OW4zYXc0WC9TCgkJCQkJCQkgIFlyZi84clVNenlVckdiUklpZ1h0WnNhdjhRdWQvOHRYTXp3QmFsWW5PUnFCVHY0cVY4MzhYN1NTUVpIc2xDaGN6c0E1dVBNQ0FJZVYKCQkJCQkJCSAgeC9vTzNhenNBQUFBQUVsRlRrU3VRbUNDSFpiUGRRPT0iCgkJCQkJKSwKCQkJCQknYnVsbGV0X2Vycm9yLnBuZycgPT4gYXJyYXkoIAoJCQkJCSAndHlwZSc9PidwbmcnLCAnd2lkdGgnPT4nMTYnLCAnaGVpZ2h0Jz0+JzE2JywKCQkJCQkgJ2NvZGUnPT4iZUp3QnhnRTUvb2xRVGtjTkNob0tBQUFBRFVsSVJGSUFBQUFRQUFBQUVBZ0dBQUFBSC9QL1lRQUFBQVJuUVUxQkFBQ3Z5RGNGaXVrQQoJCQkJCQkJICBBQUFaZEVWWWRGTnZablIzWVhKbEFFRmtiMkpsSUVsdFlXZGxVbVZoWkhseHlXVThBQUFCV0VsRVFWUTR5MlA4Ly84L0F5V0FpWUZDCgkJCQkJCQkgIFFMRUJMTGdrSGh5SUQvMy83MS94LzMvLy9aUmNscndpeVFYMzlzVHcvZnY5dTVGZnp0OGNTSmVSN0FXZ3BnSStXVzlOUGtsRGhqOC8KCQkJCQkJCSAgZnlkZlh4ZGdTclFCdHphRmFBRTE1Zk9LQ0REOC9iU0pRVnd2UmVEdnoxKzFsNWQ0c0JJMEFHZ1QwNStmdnlwRnRhS0ZHSDZjWXppMQoJCQkJCQkJICBhQ2tEajhCM2hqOC9mdmtBc1I5QkE0QTJ1WEVKNjhYd0NuNWorUGZ6UGdQRC8zOE1mNytjWmxCMEtHYjg4L05uODZsSmxydzREYmk0CgkJCQkJCQkgIDBJME5hRXVMZ0p3Qnc3OXZsNEI2dnpNWUI2c3ovUHYxaklHRDR4YUR1RzZFSnRCMWhUZ05BTnFlS3FUaWJjekYrNGJoLzUrM0RBeU0KCQkJCQkJCSAgekF4bjE5MENCU25EdngrM0dFVFY1SUZxZm1jZmF0TFJ3cG9PL3Z6NENmUzdQOURJQnd4TWZLSkFrZjhNWmtrQmNIdVlPWlVabEZ6TAoJCQkJCQkJICB4VzV0Ym1vRUNvUmlHdkR6RjhlNTJjSGZnUWtINlB4L1NQZy9uR1lBMGYvL1N5QzdnSEhvWnlZQVRMT29HZUxZcVF3QUFBQUFTVVZPCgkJCQkJCQkgIFJLNUNZSUt5MXNsciIKCQkJCQkpLAoJCQkJCSAncGx1Z2luYnVkZHkucG5nJyA9PiBhcnJheSggCgkJCQkJICd0eXBlJz0+J3BuZycsICd3aWR0aCc9PicxNicsICdoZWlnaHQnPT4nMTYnLAoJCQkJCSAnY29kZSc9PiJlSndCSUEzZjhvbFFUa2NOQ2hvS0FBQUFEVWxJUkZJQUFBQVFBQUFBRUFnR0FBQUFIL1AvWVFBQUFBbHdTRmx6QUFBTEV3QUFDeE1CCgkJCQkJCQkgIEFKcWNHQUFBQ2s5cFEwTlFVR2h2ZEc5emFHOXdJRWxEUXlCd2NtOW1hV3hsQUFCNDJwMVRaMVJUNlJZOTk5NzBRa3VJZ0pSTGIxSVYKCQkJCQkJCSAgQ0NCU1FvdUFGSkVtS2lFSkVFcUlJYUhaRlZIQkVVVkZCQnZJb0lnRGpvNkFqQlZSTEF5S0N0Z0g1Q0dpam9PamlJcksrK0Y3bzJ2VwoJCQkJCQkJICB2UGZtemY2MTF6N25yUE9kczg4SHdBZ01sa2d6VVRXQURLbENIaEhnZzhmRXh1SGtMa0NCQ2lSd0FCQUlzMlFoYy8wakFRRDRmanc4CgkJCQkJCQkgIEt5TEFCNzRBQVhqVEN3Z0F3RTJid0RBY2gvOFA2a0taWEFHQWhBSEFkSkU0U3dpQUZBQkFlbzVDcGdCQVJnR0FuWmdtVXdDZ0JBQmcKCQkJCQkJCSAgeTJOaTR3QlFMUUJnSjMvbTB3Q0FuZmlaZXdFQVc1UWhGUUdna1FBZ0UyV0lSQUJvT3dDc3oxYUtSUUJZTUFBVVprdkVPUURZTFFBdwoJCQkJCQkJICBTVmRtU0FDd3R3REF6aEFMc2dBSURBQXdVWWlGS1FBRWV3Qmd5Q01qZUFDRW1RQVVSdkpYUFBFcnJoRG5LZ0FBZUpteVBMa2tPVVdCCgkJCQkJCQkgIFd3Z3RjUWRYVnk0ZUtNNUpGeXNVTm1FQ1lacEFMc0o1bVJreWdUUVA0UFBNQUFDZ2tSVVI0SVB6L1hqT0RxN096amFPdGc1ZkxlcS8KCQkJCQkJCSAgQnY4aVltTGovdVhQcTNCQUFBRGhkSDdSL2l3dnN4cUFPd2FBYmY2aUplNEVhRjRMb0hYM2kyYXlEMEMxQUtEcDJsZnpjUGgrUER4RgoJCQkJCQkJICBvWkM1MmRubDVPVFlTc1JDVzJIS1YzMytaOEpmd0ZmOWJQbCtQUHozOWVDKzRpU0JNbDJCUndUNDRNTE05RXlsSE0rU0NZUmkzT2FQCgkJCQkJCQkgIFIveTNDLy84SGRNaXhFbGl1VmdxRk9OUkVuR09SSnFNOHpLbElvbENraW5GSmRML1pPTGZMUHNEUHQ4MUFMQnFQZ0Y3a1Myb1hXTUQKCQkJCQkJCSAgOWtzbkVGaDB3T0wzQUFEeXUyL0IxQ2dJQTRCb2crSFBkLy92UC8xSG9DVUFnR1pKa25FQUFGNUVKQzVVeXJNL3h3Z0FBRVNnZ1NxdwoJCQkJCQkJICBRUnYwd1Jnc3dBWWN3UVhjd1F2OFlEYUVRaVRFd2tJUVFncGtnQnh5WUNtc2drSW9oczJ3SFNwZ0w5UkFIVFRBVVdpR2szQU9Mc0pWCgkJCQkJCQkgIHVBNDljQS82WVFpZXdTaThnUWtFUWNnSUUyRWgyb2dCWW9wWUk0NElGNW1GK0NIQlNBUVNpeVFneVlnVVVTSkxrVFZJTVZLS1ZDQlYKCQkJCQkJCSAgU0IzeVBYSUNPWWRjUnJxUk84Z0FNb0w4aHJ4SE1aU0JzbEU5MUF5MVE3bW9OeHFFUnFJTDBHUjBNWnFQRnFDYjBISzBHajJNTnFIbgoJCQkJCQkJICAwS3RvRDlxUFBrUEhNTURvR0FjenhHd3dMc2JEUXJFNExBbVRZOHV4SXF3TXE4WWFzRmFzQTd1SjlXUFBzWGNFRW9GRndBazJCSGRDCgkJCQkJCQkgIElHRWVRVWhZVEZoTzJFaW9JQndrTkJIYUNUY0pBNFJSd2ljaWs2aEx0Q2E2RWZuRUdHSXlNWWRZU0N3ajFoS1BFeThRZTRoRHhEY2sKCQkJCQkJCSAgRW9sRE1pZTVrQUpKc2FSVTBoTFNSdEp1VWlQcExLbWJORWdhSTVQSjJtUnJzZ2M1bEN3Z0s4aUY1SjNrdytRejVCdmtJZkpiQ3AxaQoJCQkJCQkJICBRSEdrK0ZQaUtGTEtha29aNVJEbE5PVUdaWmd5UVZXam1sTGRxS0ZVRVRXUFdrS3RvYlpTcjFHSHFCTTBkWm81ellNV1NVdWxyYUtWCgkJCQkJCQkgIDB4cG9GMmozYWEvb2RMb1IzWlVlVHBmUVY5TEw2VWZvbCtnRDlIY01EWVlWZzhlSVp5Z1pteGdIR0djWmR4aXZtRXltR2RPTEdjZFUKCQkJCQkJCSAgTURjeDY1am5tUStaYjFWWUtyWXFmQldSeWdxVlNwVW1sUnNxTDFTcHFxYXEzcW9MVmZOVnkxU1BxVjVUZmE1R1ZUTlQ0NmtKMUphcgoJCQkJCQkJICBWYXFkVU90VEcxTm5xVHVvaDZwbnFHOVVQNlIrV2YySkJsbkRUTU5QUTZSUm9MRmY0N3pHSUF0akdiTjRMQ0ZyRGF1R2RZRTF4Q2F4CgkJCQkJCQkgIHpkbDhkaXE3bVAwZHU0czlxcW1oT1VNelNqTlhzMUx6bEdZL0IrT1ljZmljZEU0SjV5aW5sL04raXQ0VTd5bmlLUnVtTkV5NU1XVmMKCQkJCQkJCSAgYTZxV2w1WllxMGlyVWF0SDY3MDJydTJubmFhOVJidForNEVPUWNkS0oxd25SMmVQemdXZDUxUFpVOTJuQ3FjV1RUMDY5YTR1cW11bAoJCQkJCQkJICBHNkc3UkhlL2JxZnVtSjYrWG9DZVRHK24zbm05NS9vY2ZTLzlWUDF0K3FmMVJ3eFlCck1NSkFiYkRNNFlQTVUxY1c4OEhTL0gyL0ZSCgkJCQkJCQkgIFExM0RRRU9sWVpWaGwrR0VrYm5SUEtQVlJvMUdENHhweGx6akpPTnR4bTNHb3lZR0ppRW1TMDNxVGU2YVVrMjVwaW1tTzB3N1RNZk4KCQkJCQkJCSAgek0yaXpkYVpOWnM5TWRjeTU1dm5tOWViMzdkZ1duaGFMTGFvdHJobFNiTGtXcVpaN3JhOGJvVmFPVm1sV0ZWYVhiTkdyWjJ0SmRhNwoJCQkJCQkJICByYnVuRWFlNVRwTk9xNTdXWjhPdzhiYkp0cW0zR2JEbDJBYmJyclp0dG4xaFoySVhaN2ZGcnNQdWs3MlRmYnA5amYwOUJ3MkgyUTZyCgkJCQkJCQkgIEhWb2Rmbk8wY2hRNlZqcmVtczZjN2o5OXhmU1c2UzluV004UXo5Z3o0N1lUeXluRWFaMVRtOU5IWnhkbnVYT0Q4NGlMaVV1Q3l5NlgKCQkJCQkJCSAgUGk2Ykc4YmR5TDNrU25UMWNWM2hldEwxblp1em04THRxTnV2N2pidWFlNkgzSi9NTko4cG5sa3pjOUREeUVQZ1VlWFJQd3VmbFRCcgoJCQkJCQkJICAzNngrVDBOUGdXZTE1eU12WXkrUlY2M1hzTGVsZDZyM1llOFhQdlkrY3AvalB1TThOOTR5M2xsZnpEZkF0OGkzeTAvRGI1NWZoZDlECgkJCQkJCQkgIGZ5UC9aUDk2LzlFQXA0QWxBV2NEaVlGQmdWc0MrL2g2ZkNHL2pqODYyMlgyc3RudFFZeWd1VUVWUVkrQ3JZTGx3YTBoYU1qc2tLMGgKCQkJCQkJCSAgOStlWXpwSE9hUTZGVUg3bzF0QUhZZVpoaThOK0RDZUZoNFZYaGorT2NJaFlHdEV4bHpWMzBkeERjOTlFK2tTV1JONmJaekZQT2E4dAoJCQkJCQkJICBTalVxUHFvdWFqemFON28wdWovR0xtWlp6TlZZblZoSmJFc2NPUzRxcmpadWJMN2YvTzN6aCtLZDRndmpleGVZTDhoZGNIbWh6c0wwCgkJCQkJCQkgIGhhY1dxUzRTTERxV1FFeUlUamlVOEVFUUtxZ1dqQ1h5RTNjbGpncDV3aDNDWnlJdjBUYlJpTmhEWENvZVR2SklLazE2a3V5UnZEVjUKCQkJCQkJCSAgSk1VenBTemx1WVFucVpDOFRBMU0zWnM2bmhhYWRpQnRNajA2dlRHRGtwR1FjVUtxSVUyVHRtZnFaK1ptZHN1c1pZV3kvc1Z1aTdjdgoJCQkJCQkJICBIcFVIeVd1emtLd0ZXUzBLdGtLbTZGUmFLTmNxQjdKblpWZG12ODJKeWptV3E1NHJ6ZTNNczhyYmtEZWM3NS8vN1JMQ0V1R1N0cVdHCgkJCQkJCQkgIFMxY3RIVmptdmF4cU9iSThjWG5iQ3VNVkJTdUdWZ2FzUExpS3RpcHQxVStyN1ZlWHJuNjlKbnBOYTRGZXdjcUN3YlVCYStzTFZRcmwKCQkJCQkJCSAgaFgzcjNOZnRYVTlZTDFuZnRXSDZocDBiUGhXSmlxNFUyeGVYRlgvWUtOeDQ1UnVIYjhxL21keVV0S21yeExsa3oyYlNadW5tM2kyZQoJCQkJCQkJICBXdzZXcXBmbWx3NXVEZG5hdEEzZlZyVHQ5ZlpGMnkrWHpTamJ1NE8yUTdtanZ6eTR2R1dueWM3Tk96OVVwRlQwVlBwVU51N1MzYlZoCgkJCQkJCQkgIDEvaHUwZTRiZTd6Mk5PelYyMXU4OS8wK3liN2JWUUZWVGRWbTFXWDdTZnV6OXordWlhcnArSmI3YlYydFRtMXg3Y2NEMGdQOUJ5TU8KCQkJCQkJCSAgdHRlNTFOVWQwajFVVW8vV0srdEhEc2NmdnY2ZDczY3REVFlOVlkyY3h1SWpjRVI1NU9uM0NkLzNIZzA2Mm5hTWU2emhCOU1mZGgxbgoJCQkJCQkJICBIUzlxUXByeW1rYWJVNXI3VzJKYnVrL01QdEhXNnQ1Ni9FZmJIdytjTkR4WmVVcnpWTWxwMnVtQzA1Tm44cytNblpXZGZYNHUrZHhnCgkJCQkJCQkgIDI2SzJlK2RqenQ5cUQyL3Z1aEIwNGRKRi80dm5PN3c3emx6eXVIVHlzdHZsRTFlNFY1cXZPbDl0Nm5UcVBQNlQwMC9IdTV5N21xNjUKCQkJCQkJCSAgWEd1NTducTl0WHRtOStrYm5qZk8zZlM5ZWZFVy85YlZuams5M2IzemVtLzN4ZmYxM3hiZGZuSW4vYzdMdTlsM0orNnR2RSs4WC9SQQoJCQkJCQkJICA3VUhaUTkySDFUOWIvdHpZNzl4L2FzQjNvUFBSM0VmM0JvV0R6LzZSOVk4UFF3V1BtWS9MaGcyRzY1NDRQams1NGo5eS9lbjhwMFBQCgkJCQkJCQkgIFpNOG1uaGYrb3Y3THJoY1dMMzc0MWV2WHp0R1kwYUdYOHBlVHYyMThwZjNxd09zWnI5dkd3c1lldnNsNE16RmU5RmI3N2NGMzNIY2QKCQkJCQkJCSAgNzZQZkQwL2tmQ0IvS1A5bytiSDFVOUNuKzVNWms1UC9CQU9ZOC94ak15M2JBQUFBSUdOSVVrMEFBSG9sQUFDQWd3QUErZjhBQUlEcAoJCQkJCQkJICBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFKTFNVUkJWSGphZEpOTlNGUlJGTWQvOTczNzVzMDR5cGlqYWRnRVlvcUJ1QXZDCgkJCQkJCQkgIEZpVkVST1JHRjRNYnQxS0xhbFhMd0xaUnRIRlJwTkJTd2FCTjBFcmFWQXN0a2dvTUlsQ1RjVDdNR1hXKzNudW54YndabmNuK2NPR2UKCQkJCQkJCSAgZXo3NG4vKzVSOFhqY1J0b0JjS0F3U0dFZXFnamR3ODRBSFkwRUptNSsyb3BIQ3dOS0NzbUlBaUNiU3RFTlFFS0pYbUtSUmVGQWhSUwoJCQkJCQkJICBYbGVGa3Q2WWVqeCtYZ09oZ0hhN3pZNDdtTzIzRkFoS0NidE9KNnViUHhHRWMxMHgydTJkU3JJbzNQUnpndHVQVGdOTjJxZXRSUGU0CgkJCQkJCQkgIHl1NDNxeHhubDFQTUxrY1JnYkZCaittUmdWb2ZZdlc2Z0FrWXV0cXZTTEd1NFNjZmY3T2V5d09RV2dsdy8ySVg0WUF2ZzFlb3hkVkUKCQkJCQkJCSAgMDJhOVlwSFE0ZDIySUdRZGFtZ2VpVFVhTmY3MXA0d0FzNk85VEF4R3VkSFh5dng0SDBwVmZJM3owQTJqNHVickxWWXphWVpqemZTMwoJCQkJCQkJICBWV2c4VzlsbWJPRUhRMjFSM2t5ZXFZdlhqV1JHZWd6ZWJaWlorTGFEb1RLK1FJcXdWZkZWSG95NkxBRnd5MWtUSjhtOTRTQnoxMjJhCgkJCQkJCQkgIHRZVW40QWtFalFBelYwUGNHdzZCazhSenN0VUtvb0ZTb2FTM3JjVERsbUptRG9zQzEyS0x6dGxXVjM5T2hnR2h1MldmQysxNTExdTcKCQkJCQkJCSAgWXBhOUFKUTNWTDVvSllDQ0JuS2JxY2pjcVdoMlFpUnRLY1I5LzJGcWZpLzM0RGIwbmdDRkttenNmSDA3L1RReWtJMEx5bFFxV041SwoJCQkJCQkJICB0eXdDZXlvZWo1dEFrNzhMSnVBQUhVdERrMHNKcHlNSzBLbVQ2Y3RmWGw0Q1VyNXVMckFQSEZTTm5IOXFvMCtXT20xTXAvS1JTaWNECgkJCQkJCQkgIHdCNlFhSnlhd2ZFNENIcVpUMVVqSUx2Zi9lMzdCL28vQmJLamF5L0dnV2JmM2dkMmp3djhPd0NPbTlWZVNpd012d0FBQUFCSlJVNUUKCQkJCQkJCSAgcmtKZ2dyMzVPd1k9IgoJCQkJCSksCgkJCQkJJ2J1dHRvbi1ncmFkLnBuZycgPT4gYXJyYXkoIAoJCQkJCSAndHlwZSc9PidwbmcnLCAnd2lkdGgnPT4nNScsICdoZWlnaHQnPT4nMzAnLAoJCQkJCSAnY29kZSc9PiJlSnpyRFBCejUrV1M0bUpnWU9EMTlIQUpBdEtzUUN6SHdRWWtuOVJkMlF1a1dJcWRQRU00Z0tDR0k2VUR5T2NzOElnc1ptRGdGZ0poCgkJCQkJCQkgIHhrdDM2LzRBQlJWTFhDTktndlBUU3NvVGkxSVpmQk9UaS9KelUxTXlFeFhjTW90U3kvT0xzb3NWVFBRTVhxbXBsd0lWaTRFVU94ZWwKCQkJCQkJCSAgSnBaazV1Y3BoR1RtcGpJWUd1b2JtdXNiV056S0tTMEVxbkR6ZEhFTXFaaVRmT1hOemEvekdYazNHUHc1THBDYzhQUC9mL2xsQ29mdAoJCQkJCQkJICBjNXB1aFB3N25xWVc5blpLbEV2VDVBMVJMVy9PL1c4Kzd4bXk1WVg5TGkraEdwYkx2K2N2OFBKeFpIalY1RjBlWEdIVUR6U1J3ZFBWCgkJCQkJCQkgIHoyV2RVMElUQUtVd1Vzcz0iCgkJCQkJKSwKCQkJCQknd2hpdGUtZ3JhZC5wbmcnID0+IGFycmF5KCAKCQkJCQkgJ3R5cGUnPT4ncG5nJywgJ3dpZHRoJz0+JzUnLCAnaGVpZ2h0Jz0+JzMwJywKCQkJCQkgJ2NvZGUnPT4iZUp6ckRQQno1K1dTNG1KZ1lPRDE5SEFKQXRLc1FDekh3UVlrbjlSZDJRdWtXSXFkUEVNNGdLQ0dJNlVEeU9jczhJZ3NabURnRmdKaAoJCQkJCQkgIHhrdDM2LzRBQlJWTFhDTktndlBUU3NvVGkxSVpmQk9UaS9KelUxTXlFeFhjTW90U3kvT0xzb3NWVFBRTVhxbXBsd0lWaTRFVU94ZWwKCQkJCQkJICBKcFprNXVjcGhHVG1waklZR3VvYm11c2JXTnpLS1MwRXFsRDFkSEVNcVppVC9PZi8vLy8xYkNZSFd2UU9nRUNUcTJMWndZV0xhbGZzCgkJCQkJCSAgS1A3UktzVFF6R09sZHMvYnhCR29nY0hUMWM5bG5WTkNFd0J4aGtDVCIKCQkJCQkpLAoJCQkJCSdsb2FkaW5nLmdpZicgPT4gYXJyYXkoCgkJCQkJICd0eXBlJz0+J2dpZicsICd3aWR0aCc9PicxNicsICdoZWlnaHQnPT4nMTEnLAoJCQkJCSAnY29kZSc9PiJlSnh6OTNTenNFd1VZT0JtK01MQThQLy9Bd1lHaGx1M0RseTRzUDNWcTNOc2JLeEFycDZlUmxOVFVVSkN5SzVkUzVTVVpMMjhITHU2CgkJCQkJCQkgIEtsTlNJdmJ0VzY2bXBzakN3dXpuNS9MczJha2JOL1o5K1hMZHdzTHd6cDFEbno1ZDNiWnR3WUlGdmFkT2JYcjM3aUlERENqKzUvWnoKCQkJCQkJCSAgRFFsMmRneHdOZEl6WUdZRUNmMlRjaTVLVFN4SlRWRW96eXpKVUVqTVNxekl5VTlNMGN2TVM4dG5VUHpKd3NrTlZLVUQwZzF5SkFPcgoJCQkJCQkJICByb0pDWDBybXZDVUx1QjZkWWxybklOQnNjY2EwNEhMMXZkczc1dk94UHhGczMvTEk0UVNQWHZHNmExeXVhNmM1WVROQkpTRlJnalZoCgkJCQkJCQkgIDNvcE1tZmFKK3c3Y09yVHl6YVhsdmMvZjdIMjlPMEpmWXc1cm83Vmdwd1FUTm8xbVFLdTdFM1VlZDZod0trbnhKQzlKV3FSeFV2cjgKCQkJCQkJCSAgbHQ3WFJsSUhwak1mYU5vYi9mR0V0MkRqMll1WGR3ajd6VHdVeXEwbE1zM3ZrQUEybzB5QlJpM2hjQlVNWWVwOWJKS2s0bm54bFUyLwoJCQkJCQkJICA4UG5TeXVmV3MzaVhNNTlvc1V2YTRQNUx0UC9NeEdKTEZxbksxZGU2ZDJuTkRWTEVacElSSkR5dWJZcDQ1aEk0ZVlmSHBhU2dVTmVUCgkJCQkJCQkgIFcySWZXY1c5blhhYk1lMXdmT0FMWmNiZUU4OU9zQ2JQODFwNTlhc1VWcitaUTR4UktZeHRXYkVwYVZubXpkYkU2Um1QRjIzTG5SWEwKCQkJCQkJCSAgcC9EbWI5UDJSTUVIekhyVGZWWDZaNWd3eGVzeW1KbWRYckR2UVJBSE5yUDBJV1k5QWJwbnhhWjNxNHBrVklPMjhENHdYZjk3dTB6QgoJCQkJCQkJICBkTzV2WFVkbUZiYksvSXJUWlRCaGM0NWN2d1JyQUpGc2hqVThsUUVBWEUvOWRnPT0iCgkJCQkJKQoJCQkJKTsKCQlpZiAoIGlzc2V0KCAkaW1hZ2VzWyRuYW1lXSApICkgewoJCQlyZXR1cm4gJGltYWdlc1skbmFtZV07CgkJfSBlbHNlIHsKCQkJcmV0dXJuICRpbWFnZXNbJ2JsYW5rLmdpZiddOwoJCX0KCX0KfQo/Pg==
###PACKDATA,FILE_END,/importbuddy/classes/ezimg.php,importbuddy/classes/ezimg.php
###PACKDATA,FILE_START,/importbuddy/classes/mysql_test.php,importbuddy/classes/mysql_test.php
PD9waHAKJGNvbm5lY3Rfc3RhdHVzID0gJzxmb250IGNvbG9yPXJlZD5GYWlsZWQ8L2ZvbnQ+JzsKJGNvbm5lY3Rfc3RhdHVzX2Vycm9yID0gJyc7CiRzZWxlY3Rfc3RhdHVzID0gJ04vQSc7CiRzZWxlY3Rfc3RhdHVzX2Vycm9yID0gJyc7CiRvdmVyYWxsX3N0YXR1cyA9ICc8Zm9udCBjb2xvcj1yZWQ+RmFpbGVkPC9mb250Pic7CiRleGlzdGluZ19zdGF0dXMgPSAnTi9BJzsKCmlmICggZmFsc2UgPT09IEBteXNxbF9jb25uZWN0KCAkX1BPU1RbJ3NlcnZlciddLCAkX1BPU1RbJ3VzZXInXSwgJF9QT1NUWydwYXNzJ10gKSApIHsgLy8gQ291bGRudCBjb25uZWN0IHRvIHNlcnZlciBvciBpbnZhbGlkIGNyZWRlbnRpYWxzLgoJJGNvbm5lY3Rfc3RhdHVzID0gJzxmb250IGNvbG9yPXJlZD5GYWlsZWQ8L2ZvbnQ+JzsKCSRjb25uZWN0X3N0YXR1c19lcnJvciA9IG15c3FsX2Vycm9yKCk7CgkkdGhpcy0+bG9nKCAnbXlzcWwgYWpheCB0ZXN0IEZBSUxFRDogQ29ubmVjdGlvbiBmYWlsZWQuIEVycm9yOiAnIC4gbXlzcWxfZXJyb3IoKSwgdHJ1ZSApOwp9IGVsc2UgewoJJGNvbm5lY3Rfc3RhdHVzID0gJ1N1Y2Nlc3MnOwoJaWYgKCBmYWxzZSA9PT0gQG15c3FsX3NlbGVjdF9kYiggJF9QT1NUWyduYW1lJ10gKSApIHsKCQkkc2VsZWN0X3N0YXR1cyA9ICc8Zm9udCBjb2xvcj1yZWQ+RmFpbGVkPC9mb250Pic7CgkJJHNlbGVjdF9zdGF0dXNfZXJyb3IgPSBteXNxbF9lcnJvcigpOwoJCSR0aGlzLT5sb2coICdteXNxbCBhamF4IHRlc3QgRkFJTEVEOiBDb25uZWN0ZWQgYnV0IGRhdGFiYXNlIGFjY2VzcyBkZW5pZWQuIEVycm9yOiAnIC4gbXlzcWxfZXJyb3IoKSwgdHJ1ZSApOwoJfSBlbHNlIHsKCQkkc2VsZWN0X3N0YXR1cyA9ICdTdWNjZXNzJzsKCQkKCQkvLyBDaGVjayBudW1iZXIgb2YgdGFibGVzIGFscmVhZHkgZXhpc3Rpbmcgd2l0aCB0aGlzIHByZWZpeC4KCQkkcmVzdWx0ID0gbXlzcWxfcXVlcnkoICJTSE9XIFRBQkxFUyBMSUtFICciIC4gbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nKCAkX1BPU1RbJ3ByZWZpeCddICkgLiAiJSciICk7CgkJaWYgKCBteXNxbF9udW1fcm93cyggJHJlc3VsdCApID4gMCApIHsKCQkJJHRoaXMtPmxvZyggJ0RhdGFiYXNlIGFscmVhZHkgY29udGFpbnMgYSBXb3JkUHJlc3MgaW5zdGFsbGF0aW9uIHdpdGggdGhpcyBwcmVmaXggKCcgLiBteXNxbF9udW1fcm93cyggJHJlc3VsdCApIC4gJyB0YWJsZXMpLiBSZXN0b3JlIGhhbHRlZC4nLCAnZXJyb3InICk7CgkJCSRleGlzdGluZ19zdGF0dXMgPSAnPGZvbnQgY29sb3I9cmVkPkZhaWxlZDwvZm9udD4nOwoJCQkkZXhpdGluZ19zdGF0dXNfZXJyb3IgPSBteXNxbF9lcnJvcigpOwoJCX0gZWxzZSB7CgkJCSRleGlzdGluZ19zdGF0dXMgPSAnU3VjY2Vzcyc7CgkJCSRvdmVyYWxsX3N0YXR1cyA9ICdTdWNjZXNzJzsKCQkJJHRoaXMtPmxvZyggJ215c3FsIGFqYXggdGVzdCBTVUNDRVNTJyApOwoJCX0KCQl1bnNldCggJHJlc3VsdCApOwoJfQp9CgplY2hvICcxLiBMb2dnaW5nIGluIHRvIHNlcnZlciAuLi4gJyAuICRjb25uZWN0X3N0YXR1cyAuICcuPGJyPic7CmlmICggJGNvbm5lY3Rfc3RhdHVzICE9ICdTdWNjZXNzJyApIHsKCWVjaG8gJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO0Vycm9yOiAnIC4gJGNvbm5lY3Rfc3RhdHVzX2Vycm9yIC4gJzxicj4nOzsKfQoKZWNobyAnMi4gVmVyaWZ5aW5nIGRhdGFiYXNlIGFjY2VzcyAmIHBlcm1pc3Npb24gLi4uICcgLiAkc2VsZWN0X3N0YXR1cyAuICcuPGJyPic7CmlmICggKCAkc2VsZWN0X3N0YXR1cyAhPSAnU3VjY2VzcycgKSAmJiAoICRzZWxlY3Rfc3RhdHVzICE9ICdOL0EnICkgKSB7CgllY2hvICcmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtFcnJvcjogJyAuICRzZWxlY3Rfc3RhdHVzX2Vycm9yIC4gJzxicj4nOwp9CgppZiAoICggJGV4aXN0aW5nX3N0YXR1cyAhPSAnU3VjY2VzcycgKSAmJiAoICRfUE9TVFsnd2lwZV9kYXRhYmFzZSddICE9ICcxJyApICkgewoJJGV4aXN0aW5nX3N0YXR1cyA9ICc8Zm9udCBjb2xvcj1yZWQ+V2FybmluZzwvZm9udD4nOwoJaWYgKCAoICRjb25uZWN0X3N0YXR1cyA9PSAnU3VjY2VzcycgKSAmJiAoICRzZWxlY3Rfc3RhdHVzID09ICdTdWNjZXNzJyApICkgewoJCSRvdmVyYWxsX3N0YXR1cyA9ICc8Zm9udCBjb2xvcj1yZWQ+V2FybmluZzwvZm9udD4nOwoJfQp9CmVjaG8gJzMuIFZlcmlmeWluZyBubyBleGlzdGluZyBXUCBkYXRhIC4uLiAnIC4gJGV4aXN0aW5nX3N0YXR1cyAuICcuPGJyPic7CmlmICggJHNlbGVjdF9zdGF0dXMgPT0gJ04vQScgKSB7CgkvL2VjaG8gJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO04vQSc7Cn0gZWxzZSB7CglpZiAoICRleGlzdGluZ19zdGF0dXMgPSAnV2FybmluZycgKSB7CgkJaWYgKCAkX1BPU1RbJ3dpcGVfZGF0YWJhc2UnXSAhPSAnMScgKSB7CgkJCWVjaG8gJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO1dvcmRQcmVzcyBhbHJlYWR5IGV4aXN0cyBpbiB0aGlzIGRhdGFiYXNlIHdpdGggdGhpcyBwcmVmaXguPGJyPic7CgkJCWVjaG8gJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO0l0IHdpbGwgYmUgd2lwZWQgcHJpb3IgdG8gaW1wb3J0IG9uIHRoZSBuZXh0IHN0ZXAuIFVzZSBjYXV0aW9uLjxicj4nOwoJCX0gZWxzZWlmICggJGV4aXN0aW5nX3N0YXR1cyAhPSAnU3VjY2VzcycgKSB7CgkJCWVjaG8gJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO0Vycm9yOiBXb3JkUHJlc3MgYWxyZWFkeSBleGlzdHMgaW4gdGhpcyBkYXRhYmFzZSB3aXRoIHRoaXMgcHJlZml4Ljxicj4nOwoJCX0KCX0KfQplY2hvICc0LiBPdmVyYWxsIG15U1FMIHRlc3QgcmVzdWx0IC4uLiAnIC4gJG92ZXJhbGxfc3RhdHVzIC4gJy48YnI+JzsKCgpkaWUoKTsKPz4=
###PACKDATA,FILE_END,/importbuddy/classes/mysql_test.php,importbuddy/classes/mysql_test.php
###PACKDATA,FILE_START,/importbuddy/classes/step_0_api.php,importbuddy/classes/step_0_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF8wIHsKCWZ1bmN0aW9uIF9fY29uc3RydWN0KCAmJHBhcmVudCApIHsKCQkkdGhpcy0+X3BhcmVudCA9ICYkcGFyZW50OwoJfQp9Cj8+
###PACKDATA,FILE_END,/importbuddy/classes/step_0_api.php,importbuddy/classes/step_0_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_0_view.php,importbuddy/classes/step_0_view.php
PD9waHAKaWYgKCBpc3NldCggJF9HRVRbJ2FjdGlvbiddICkgKSB7CglpZiAoICRfR0VUWydhY3Rpb24nXSA9PSAncGhwaW5mbycgKSB7CgkJcGhwaW5mbygpOwoJfSBlbHNlIHsKCQllY2hvICdJbnZhbGlkIGFjdGlvbi4nOwoJfQp9IGVsc2UgewoJZWNobyAnTm8gYWN0aW9uIGdpdmVuLic7Cn0KPz4=
###PACKDATA,FILE_END,/importbuddy/classes/step_0_view.php,importbuddy/classes/step_0_view.php
###PACKDATA,FILE_START,/importbuddy/classes/step_1_api.php,importbuddy/classes/step_1_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF8xIHsKCWZ1bmN0aW9uIF9fY29uc3RydWN0KCAmJHBhcmVudCApIHsKCQkkdGhpcy0+X3BhcmVudCA9ICYkcGFyZW50OwoJfQoJCgkKCS8qKgoJICoJdXBsb2FkKCkKCSAqCgkgKglQcm9jZXNzZXMgdXBsb2FkZWQgYmFja3VwIGZpbGUuCgkgKgoJICoJQHJldHVybgkJYXJyYXkJCVRydWUgb24gdXBsb2FkIHN1Y2Nlc3M7IGZhbHNlIG90aGVyd2lzZS4KCSAqLwoJZnVuY3Rpb24gdXBsb2FkKCkgewoJCWlmICggaXNzZXQoICRfUE9TVFsndXBsb2FkJ10gKSAmJiAoICRfUE9TVFsndXBsb2FkJ10gPT0gJ2xvY2FsJyApICkgewoJCQlpZiAoICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1sncGFzc3dvcmQnXSAhPSAnI1BBU1NXT1JEIycgKSB7CgkJCQkkcGF0aF9wYXJ0cyA9IHBhdGhpbmZvKCAkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSApOwoJCQkJaWYgKCAoIHN0cnRvbG93ZXIoIHN1YnN0ciggJF9GSUxFU1snZmlsZSddWyduYW1lJ10sIDAsIDYgKSApID09ICdiYWNrdXAnICkgJiYgKCBzdHJ0b2xvd2VyKCAkcGF0aF9wYXJ0c1snZXh0ZW5zaW9uJ10gKSA9PSAnemlwJyApICkgewoJCQkJCWlmICggbW92ZV91cGxvYWRlZF9maWxlKCAkX0ZJTEVTWydmaWxlJ11bJ3RtcF9uYW1lJ10sIGJhc2VuYW1lKCAkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSApICkgKSB7CgkJCQkJCSR0aGlzLT5fcGFyZW50LT5hbGVydCggJ0ZpbGUgVXBsb2FkZWQnLCAnWW91ciBiYWNrdXAgd2FzIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZC4nICk7CgkJCQkJCXJldHVybiB0cnVlOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSR0aGlzLT5fcGFyZW50LT5hbGVydCggJ0Vycm9yJywgJ1NvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIHVwbG9hZGluZyB5b3VyIGZpbGUuJyApOwoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQkkdGhpcy0+X3BhcmVudC0+YWxlcnQoICdFcnJvcicsICdPbmx5IHByb3Blcmx5IG5hbWVkIEJhY2t1cEJ1ZGR5IHppcCBhcmNoaXZlcyB3aXRoIGEgemlwIGV4dGVuc2lvbiBtYXkgYmUgdXBsb2FkZWQuJyApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCSR0aGlzLT5fcGFyZW50LT5hbGVydCggJ1VwbG9hZCBBY2Nlc3MgRGVuaWVkJywgc2VsZjo6VVBMT0FEX0FDQ0VTU19ERU5JRUQgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCX0KCQoJCgkvKioKCSAqCWdldF9hcmNoaXZlc19saXN0KCkKCSAqCgkgKglSZXR1cm5zIGFuIGFycmF5IG9mIGJhY2t1cCBhcmNoaXZlIHppcCBmaWxlbmFtZXMgZm91bmQuCgkgKgoJICoJQHJldHVybgkJYXJyYXkJCUFycmF5IG9mIC56aXAgZmlsZW5hbWVzOyBwYXRoIE5PVCBpbmNsdWRlZC4KCSAqLwoJZnVuY3Rpb24gZ2V0X2FyY2hpdmVzX2xpc3QoKSB7CgkJLy8gTGlzdCBiYWNrdXAgZmlsZXMgaW4gdGhpcyBkaXJlY3RvcnkuCgkJJGJhY2t1cF9hcmNoaXZlcyA9IGdsb2IoIEFCU1BBVEggLiAnYmFja3VwKi56aXAnICk7CgkJaWYgKCAhaXNfYXJyYXkoICRiYWNrdXBfYXJjaGl2ZXMgKSB8fCBlbXB0eSggJGJhY2t1cF9hcmNoaXZlcyApICkgeyAvLyBPbiBmYWlsdXJlIGdsb2IoKSByZXR1cm5zIGZhbHNlIG9yIGFuIGVtcHR5IGFycmF5IGRlcGVuZGluZyBvbiBzZXJ2ZXIgc2V0dGluZ3Mgc28gbm9ybWFsaXplIGhlcmUuCgkJCSRiYWNrdXBfYXJjaGl2ZXMgPSBhcnJheSgpOwoJCX0KCQlmb3JlYWNoKCAkYmFja3VwX2FyY2hpdmVzIGFzICRiYWNrdXBfaWQgPT4gJGJhY2t1cF9hcmNoaXZlICkgewoJCQkkYmFja3VwX2FyY2hpdmVzWyRiYWNrdXBfaWRdID0gYmFzZW5hbWUoICRiYWNrdXBfYXJjaGl2ZSApOwoJCX0KCQkKCQlyZXR1cm4gJGJhY2t1cF9hcmNoaXZlczsKCX0KCQoJCgkvKioKCSAqCXdvcmRwcmVzc19leGlzdHMoKQoJICoKCSAqCU5vdGlmaWVzIHRoZSB1c2VyIHdpdGggYW4gYWxlcnQgaWYgV29yZFByZXNzIGFwcGVhcnMgdG8gYWxyZWFkeSBleGlzdCBpbiB0aGlzIGRpcmVjdG9yeS4KCSAqCgkgKglAcmV0dXJuCQlib29sZWFuCQlUcnVlIGlmIFdvcmRQcmVzcyBhbHJlYWR5IGV4aXN0czsgZmFsc2Ugb3RoZXJ3aXNlLgoJICovCglmdW5jdGlvbiB3b3JkcHJlc3NfZXhpc3RzKCkgewoJCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnd3AtY29uZmlnLnBocCcgKSApIHsKCQkJJHRoaXMtPl9wYXJlbnQtPmxvZyggJ0ZvdW5kIGV4aXN0aW5nIFdvcmRQcmVzcyBpbnN0YWxsYXRpb24uJywgJ3dhcm5pbmcnICk7CgkJCSR0aGlzLT5fcGFyZW50LT5hbGVydCggJ1dBUk5JTkc6IEV4aXN0aW5nIFdvcmRQcmVzcyBpbnN0YWxsYXRpb24gZm91bmQuJywgJ0l0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIHRoYXQgZXhpc3RpbmcgV29yZFByZXNzIGZpbGVzIGFuZCBkYXRhYmFzZSBiZSByZW1vdmVkIHByaW9yIHRvIG1pZ3JhdGluZyBvciByZXN0b3JpbmcgdG8gYXZvaWQgY29uZmxpY3RzLiBZb3Ugc2hvdWxkIG5vdCBpbnN0YWxsIFdvcmRQcmVzcyBwcmlvciB0byBtaWdyYXRpbmcuJyApOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfQp9Cj8+
###PACKDATA,FILE_END,/importbuddy/classes/step_1_api.php,importbuddy/classes/step_1_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_1_view.php,importbuddy/classes/step_1_view.php

###PACKDATA,FILE_END,/importbuddy/classes/step_1_view.php,importbuddy/classes/step_1_view.php
###PACKDATA,FILE_START,/importbuddy/classes/step_2_api.php,importbuddy/classes/step_2_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF8yIHsKCWZ1bmN0aW9uIF9fY29uc3RydWN0KCAmJHBhcmVudCApIHsKCQkkdGhpcy0+X3BhcmVudCA9ICYkcGFyZW50OwoJfQoJCgkKCS8qKgoJICoJcGFyc2Vfb3B0aW9ucygpCgkgKgoJICoJUGFyc2VzIHZhcmlvdXMgc3VibWl0dGVkIG9wdGlvbnMgYW5kIHNldHRpbmdzIGZyb20gc3RlcCAxLgoJICoKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gcGFyc2Vfb3B0aW9ucygpIHsKCQkvLyBTZXQgYWR2YW5jZWQgZGVidWcgb3B0aW9ucyBpZiB1c2VyIHNldCBhbnkuCgkJaWYgKCAoIGlzc2V0KCAkX1BPU1RbJ3NraXBfZmlsZXMnXSApICkgJiYgKCAkX1BPU1RbJ3NraXBfZmlsZXMnXSA9PSAnb24nICkgKSB7ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snc2tpcF9maWxlcyddID0gdHJ1ZTsgfQoJCWlmICggKCBpc3NldCggJF9QT1NUWydza2lwX2RhdGFiYXNlX2ltcG9ydCddICkgKSAmJiAoICRfUE9TVFsnc2tpcF9kYXRhYmFzZV9pbXBvcnQnXSA9PSAnb24nICkgKSB7ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snc2tpcF9kYXRhYmFzZV9pbXBvcnQnXSA9IHRydWU7IH0KCQlpZiAoICggaXNzZXQoICRfUE9TVFsnc2tpcF9kYXRhYmFzZV9taWdyYXRpb24nXSApICkgJiYgKCAkX1BPU1RbJ3NraXBfZGF0YWJhc2VfbWlncmF0aW9uJ10gPT0gJ29uJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ3NraXBfZGF0YWJhc2VfbWlncmF0aW9uJ10gPSB0cnVlOyB9CgkJaWYgKCAoIGlzc2V0KCAkX1BPU1RbJ3dpcGVfZGF0YWJhc2UnXSApICkgJiYgKCAkX1BPU1RbJ3dpcGVfZGF0YWJhc2UnXSA9PSAnb24nICkgKSB7ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snd2lwZV9kYXRhYmFzZSddID0gdHJ1ZTsgfQoJCWlmICggKCBpc3NldCggJF9QT1NUWydza2lwX2h0YWNjZXNzJ10gKSApICYmICggJF9QT1NUWydza2lwX2h0YWNjZXNzJ10gPT0gJ29uJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ3NraXBfaHRhY2Nlc3MnXSA9IHRydWU7IH0KCQlpZiAoICggaXNzZXQoICRfUE9TVFsnZm9yY2VfY29tcGF0aWJpbGl0eV9tZWRpdW0nXSApICkgJiYgKCAkX1BPU1RbJ2ZvcmNlX2NvbXBhdGliaWxpdHlfbWVkaXVtJ10gPT0gJ29uJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2ZvcmNlX2NvbXBhdGliaWxpdHlfbWVkaXVtJ10gPSB0cnVlOyB9CgkJaWYgKCAoIGlzc2V0KCAkX1BPU1RbJ2ZvcmNlX2NvbXBhdGliaWxpdHlfc2xvdyddICkgKSAmJiAoICRfUE9TVFsnZm9yY2VfY29tcGF0aWJpbGl0eV9zbG93J10gPT0gJ29uJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2ZvcmNlX2NvbXBhdGliaWxpdHlfc2xvdyddID0gdHJ1ZTsgfQoJCWlmICggKCBpc3NldCggJF9QT1NUWydmb3JjZV9oaWdoX3NlY3VyaXR5J10gKSApICYmICggJF9QT1NUWydmb3JjZV9oaWdoX3NlY3VyaXR5J10gPT0gJ29uJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2ZvcmNlX2hpZ2hfc2VjdXJpdHknXSA9IHRydWU7IH0KCQlpZiAoICggaXNzZXQoICRfUE9TVFsnc2hvd19waHBfd2FybmluZ3MnXSApICkgJiYgKCAkX1BPU1RbJ3Nob3dfcGhwX3dhcm5pbmdzJ10gPT0gJ29uJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ3Nob3dfcGhwX3dhcm5pbmdzJ10gPSB0cnVlOyB9CgkJaWYgKCAoIGlzc2V0KCAkX1BPU1RbJ2ZpbGUnXSApICkgJiYgKCAkX1BPU1RbJ2ZpbGUnXSAhPSAnJyApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2ZpbGUnXSA9ICRfUE9TVFsnZmlsZSddOyB9CgkJaWYgKCAoIGlzc2V0KCAkX1BPU1RbJ21heF9leGVjdXRpb25fdGltZSddICkgKSAmJiAoIGlzX251bWVyaWMoICRfUE9TVFsnbWF4X2V4ZWN1dGlvbl90aW1lJ10gKSApICkgewoJCQkkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ21heF9leGVjdXRpb25fdGltZSddID0gJF9QT1NUWydtYXhfZXhlY3V0aW9uX3RpbWUnXTsKCQl9IGVsc2UgewoJCQkkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ21heF9leGVjdXRpb25fdGltZSddID0gMzA7CgkJfQoJCWlmICggKCBpc3NldCggJF9QT1NUWydsb2dfbGV2ZWwnXSApICkgJiYgKCAkX1BPU1RbJ2xvZ19sZXZlbCddICE9ICcnICkgKSB7ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snbG9nX2xldmVsJ10gPSAkX1BPU1RbJ2xvZ19sZXZlbCddOyB9CgkJCgkJLy8gU2V0IFpJUCBpZCAoYWthIHNlcmlhbCkuCgkJJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWyd6aXBfaWQnXSA9ICR0aGlzLT5fcGFyZW50LT5nZXRfemlwX2lkKCAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2ZpbGUnXSApOwoJfQoJCgkKCS8qKgoJICoJZXh0cmFjdCgpCgkgKgoJICoJRXh0cmFjdCBiYWNrdXAgemlwIGZpbGUuCgkgKgoJICoJQHJldHVybgkJYXJyYXkJCVRydWUgaWYgdGhlIGV4dHJhY3Rpb24gd2FzIGEgc3VjY2VzcyBPUiBza2lwcGluZyBvZiBleHRyYWN0aW9uIGlzIHNldC4KCSAqLwoJZnVuY3Rpb24gZXh0cmFjdCgpIHsKCQlpZiAoIHRydWUgPT09ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snc2tpcF9maWxlcyddICkgeyAvLyBPcHRpb24gdG8gc2tpcCBhbGwgZmlsZSB1cGRhdGluZyAvIGV4dHJhY3RpbmcuCgkJCSR0aGlzLT5fcGFyZW50LT5zdGF0dXMoICdtZXNzYWdlJywgJ1NraXBwZWQgZXh0cmFjdGluZyBmaWxlcyBiYXNlZCBvbiBkZWJ1Z2dpbmcgb3B0aW9ucy4nICk7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCSR0aGlzLT5fcGFyZW50LT5zZXRfZ3JlZWR5X3NjcmlwdF9saW1pdHMoKTsKCQkJCgkJCSR0aGlzLT5fcGFyZW50LT5zdGF0dXMoICdtZXNzYWdlJywgJ1VuemlwcGluZyBpbnRvIGAnIC4gQUJTUEFUSCAuICdgJyApOwoJCQkKCQkJJGJhY2t1cF9hcmNoaXZlID0gQUJTUEFUSCAuICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZmlsZSddOwoJCQkkZGVzdGluYXRpb25fZGlyZWN0b3J5ID0gQUJTUEFUSDsKCQkJCgkJCS8vIFNldCBjb21wYXRpYmlsaXR5IG1vZGUgaWYgZGVmaW5lZC4KCQkJJGNvbXBhdGliaWxpdHlfbW9kZSA9IGZhbHNlOyAvLyBEZWZhdWx0IHRvIG5vIGNvbXBhdGliaWxpdHkgbW9kZS4KCQkJaWYgKCAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2ZvcmNlX2NvbXBhdGliaWxpdHlfbWVkaXVtJ10gIT0gZmFsc2UgKSB7CgkJCQkkY29tcGF0aWJpbGl0eV9tb2RlID0gJ3ppcGFyY2hpdmUnOwoJCQl9IGVsc2VpZiAoICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZm9yY2VfY29tcGF0aWJpbGl0eV9zbG93J10gIT0gZmFsc2UgKSB7CgkJCQkkY29tcGF0aWJpbGl0eV9tb2RlID0gJ3BjbHppcCc7CgkJCX0KCQkJCgkJCS8vIFppcCAmIFVuemlwIGxpYnJhcnkgc2V0dXAuCgkJCXJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS9saWIvemlwYnVkZHkvemlwYnVkZHkucGhwJyApOwoJCQkkX3ppcGJ1ZGR5ID0gbmV3IHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5KCBBQlNQQVRILCAnJywgJ3VuemlwJyApOwoJCQkkX3ppcGJ1ZGR5LT5zZXRfc3RhdHVzX2NhbGxiYWNrKCBhcnJheSggJiR0aGlzLT5fcGFyZW50LCAnc3RhdHVzJyApICk7CgkJCQoJCQkvLyBFeHRyYWN0IHppcCBmaWxlICYgdmVyaWZ5IGl0IHdvcmtlZC4KCQkJaWYgKCB0cnVlICE9PSAoICRyZXN1bHQgPSAkX3ppcGJ1ZGR5LT51bnppcCggJGJhY2t1cF9hcmNoaXZlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5LCAkY29tcGF0aWJpbGl0eV9tb2RlICkgKSApIHsKCQkJCSR0aGlzLT5fcGFyZW50LT5zdGF0dXMoICdlcnJvcicsICdGYWlsZWQgdW56aXBwaW5nIGFyY2hpdmUuJyApOwoJCQkJJHRoaXMtPl9wYXJlbnQtPmFsZXJ0KCAnRmFpbGVkIHVuemlwcGluZyBhcmNoaXZlLicgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfSBlbHNlIHsgLy8gUmVwb3J0ZWQgc3VjY2VzczsgdmVyaWZ5IGV4dHJhY3Rpb24uCgkJCQkkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFfZmlsZSA9IEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL3RlbXBfJyAuICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snemlwX2lkJ10gLiAnL2JhY2t1cGJ1ZGR5X2RhdC5waHAnOyAvLyBGdWxsIGJhY2t1cCBkYXQgZmlsZSBsb2NhdGlvbgoJCQkJJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhX2ZpbGVfZGJvbmx5ID0gQUJTUEFUSCAuICdiYWNrdXBidWRkeV9kYXQucGhwJzsgLy8gREIgb25seSBkYXQgZmlsZSBsb2NhdGlvbgoJCQkJJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhX2ZpbGVfbmV3ID0gQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nIC4gJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWyd6aXBfaWQnXSAuICcvYmFja3VwYnVkZHlfZGF0LnBocCc7IC8vIEZ1bGwgYmFja3VwIGRhdCBmaWxlIGxvY2F0aW9uCgkJCQlpZiAoICFmaWxlX2V4aXN0cyggJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhX2ZpbGUgKSAmJiAhZmlsZV9leGlzdHMoICR0aGlzLT5fcGFyZW50LT5fYmFja3VwZGF0YV9maWxlX2Rib25seSApICYmICFmaWxlX2V4aXN0cyggJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhX2ZpbGVfbmV3ICkgKSB7CgkJCQkJJHRoaXMtPl9wYXJlbnQtPnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICM5MDA0OiBLZXkgZmlsZXMgbWlzc2luZy4nLCAnVGhlIHVuemlwIHByb2Nlc3MgcmVwb3J0ZWQgc3VjY2VzcyBidXQgdGhlIGJhY2t1cCBkYXRhIGZpbGUsIGJhY2t1cGJ1ZGR5X2RhdC5waHAgd2FzIG5vdCBmb3VuZCBpbiB0aGUgZXh0cmFjdGVkIGZpbGVzLiBUaGUgdW56aXAgcHJvY2VzcyBlaXRoZXIgZmFpbGVkIChtb3N0IGxpa2VseSkgb3IgdGhlIHppcCBmaWxlIGlzIG5vdCBhIHByb3BlciBCYWNrdXBCdWRkeSBiYWNrdXAuJyApOwoJCQkJCSR0aGlzLT5fcGFyZW50LT5hbGVydCggJ0Vycm9yOiBLZXkgZmlsZXMgbWlzc2luZy4nLCAnVGhlIHVuemlwIHByb2Nlc3MgcmVwb3J0ZWQgc3VjY2VzcyBidXQgdGhlIGJhY2t1cCBkYXRhIGZpbGUsIGJhY2t1cGJ1ZGR5X2RhdC5waHAgd2FzIG5vdCBmb3VuZCBpbiB0aGUgZXh0cmFjdGVkIGZpbGVzLiBUaGUgdW56aXAgcHJvY2VzcyBlaXRoZXIgZmFpbGVkIChtb3N0IGxpa2VseSkgb3IgdGhlIHppcCBmaWxlIGlzIG5vdCBhIHByb3BlciBCYWNrdXBCdWRkeSBiYWNrdXAuJywgJzkwMDQnICk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQkJJHRoaXMtPl9wYXJlbnQtPnN0YXR1cyggJ2RldGFpbHMnLCAnU3VjY2VzcyBleHRyYWN0aW5nIFppcCBGaWxlICInIC4gQUJTUEFUSCAuICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZmlsZSddIC4gJyIgaW50byAiJyAuIEFCU1BBVEggLiAnIi4nICk7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCX0KCgp9Cj8+
###PACKDATA,FILE_END,/importbuddy/classes/step_2_api.php,importbuddy/classes/step_2_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_2_view.php,importbuddy/classes/step_2_view.php
PD9waHAKJGFwaS0+cGFyc2Vfb3B0aW9ucygpOwoKZWNobyAkdGhpcy0+c3RhdHVzX2JveCggJ0V4dHJhY3RpbmcgYmFja3VwIFpJUCBmaWxlIHdpdGggSW1wb3J0QnVkZHkgJyAuICR0aGlzLT5fdmVyc2lvbiAuICcuLi4nICk7CmVjaG8gJzxkaXYgaWQ9InBiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciPjxpbWcgc3JjPSI/ZXppbWc9d29ya2luZy5naWYiIHRpdGxlPSJXb3JraW5nLi4uIFBsZWFzZSB3YWl0IGFzIHRoaXMgbWF5IHRha2UgYSBtb21lbnQuLi4iPjwvZGl2Pic7CgokcmVzdWx0cyA9ICRhcGktPmV4dHJhY3QoKTsKCmVjaG8gJzxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5qUXVlcnkoIiNwYl9pbXBvcnRidWRkeV93b3JraW5nIikuaGlkZSgpOzwvc2NyaXB0Pic7CgppZiAoIHRydWUgPT09ICRyZXN1bHRzICkgeyAvLyBNb3ZlIG9uIHRvIG5leHQgc3RlcC4KCWVjaG8gJzxicj48YnI+PGI+RmlsZXMgc3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZC48L2I+JzsKCWVjaG8gJzxmb3JtIGFjdGlvbj0iP3N0ZXA9MyIgbWV0aG9kPXBvc3Q+JzsKCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9wdGlvbnMiIHZhbHVlPSInIC4gaHRtbHNwZWNpYWxjaGFycyggc2VyaWFsaXplKCAkdGhpcy0+X29wdGlvbnMgKSApIC4gJyIgLz4nOwoJZWNobyAnPGJyPjxicj48cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+PGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0IiB2YWx1ZT0iTmV4dCBTdGVwICZyYXF1bzsiIGNsYXNzPSJidXR0b24iIC8+PC9wPic7CgllY2hvICc8L2Zvcm0+JzsKfSBlbHNlIHsKCSR0aGlzLT5hbGVydCggJ0ZpbGUgZXh0cmFjdGlvbiBwcm9jZXNzIGRpZCBub3QgY29tcGxldGUgc3VjY2Vzc2Z1bGx5LicsICdVbmFibGUgdG8gY29udGludWUgdG8gbmV4dCBzdGVwLiBNYW51YWxseSBleHRyYWN0IHRoZSBiYWNrdXAgWklQIGZpbGUgYW5kIGNob29zZSB0byAiU2tpcCBGaWxlIEV4dHJhY3Rpb24iIGZyb20gdGhlIGFkdmFuY2VkIG9wdGlvbnMgb24gU3RlcCAxLicsICc5MDA1JyApOwoJZWNobyAnPHAgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPjxhIGhyZWY9Imh0dHA6Ly9wbHVnaW5idWRkeS5jb20vdHV0b3JpYWxzL3VuemlwLWJhY2t1cC16aXAtZmlsZS1pbi1jcGFuZWwvIj5DbGljayBoZXJlIGZvciBpbnN0cnVjdGlvbnMgb24gbWFudWFsIFpJUCBleHRyYWN0aW9uIGFzIGEgd29yay1hcm91bmQuPC9hPjwvcD4nOwp9Cj8+
###PACKDATA,FILE_END,/importbuddy/classes/step_2_view.php,importbuddy/classes/step_2_view.php
###PACKDATA,FILE_START,/importbuddy/classes/step_3_api.php,importbuddy/classes/step_3_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF8zIHsKCQoJCglmdW5jdGlvbiBfX2NvbnN0cnVjdCggJiRwYXJlbnQgKSB7CgkJJHRoaXMtPl9wYXJlbnQgPSAmJHBhcmVudDsKCQkvLyBTZXQgdXAgYmFja3VwIGRhdGEgZnJvbSB0aGUgYmFja3VwYnVkZHlfZGF0LnBocC4KCQkkdGhpcy0+X3BhcmVudC0+bG9hZF9iYWNrdXBfZGF0KCk7Cgl9CgkKCQoJZnVuY3Rpb24gZ2V0X3ByZXZpb3VzX2RhdGFiYXNlX3NldHRpbmdzKCkgewoJCS8vIElmIGluIGhpZ2ggc2VjdXJpdHkgbW9kZSB0aGVuIG5vIGd1ZXNzZXMgb3IgcHJldmlvdXMgdmFsdWVzIHdpbGwgYmUgZ2l2ZW4uCgkJaWYgKCAoICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZm9yY2VfaGlnaF9zZWN1cml0eSddICE9IGZhbHNlICkgfHwgKCBpc3NldCggJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhWydoaWdoX3NlY3VyaXR5J10gKSAmJiAoICR0aGlzLT5fcGFyZW50LT5fYmFja3VwZGF0YVsnaGlnaF9zZWN1cml0eSddID09PSB0cnVlICkgKSApIHsKCQkJJHJlc3BvbnNlWydzZXJ2ZXInXSA9ICcnOwoJCQkkcmVzcG9uc2VbJ2RhdGFiYXNlJ10gPSAnJzsKCQkJJHJlc3BvbnNlWyd1c2VyJ10gPSAnJzsKCQkJJHJlc3BvbnNlWydwYXNzd29yZCddID0gJyc7CgkJCSRyZXNwb25zZVsncHJlZml4J10gPSAnJzsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9IGVsc2UgeyAvLyBub3JtYWwgbW9kZS4gcHJvdmlkZSBwcmV2aW91cyB2YWx1ZXMuCgkJCSRyZXNwb25zZVsnc2VydmVyJ10gPSAkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFbJ2RiX3NlcnZlciddOwoJCQkkcmVzcG9uc2VbJ2RhdGFiYXNlJ10gPSAkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFbJ2RiX25hbWUnXTsKCQkJJHJlc3BvbnNlWyd1c2VyJ10gPSAkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFbJ2RiX3VzZXInXTsKCQkJJHJlc3BvbnNlWydwYXNzd29yZCddID0gJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhWydkYl9wYXNzd29yZCddOwoJCQkkcmVzcG9uc2VbJ3ByZWZpeCddID0gJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhWydkYl9wcmVmaXgnXTsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCQoJLyoqCgkgKglnZXRfZGVmYXVsdF92YWx1ZXMoKQoJICoKCSAqCVBhcnNlcyB2YXJpb3VzIHN1Ym1pdHRlZCBvcHRpb25zIGFuZCBzZXR0aW5ncyBmcm9tIHN0ZXAgMS4KCSAqCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCWZ1bmN0aW9uIGdldF9kYXRhYmFzZV9kZWZhdWx0cygpIHsKCQkvLyBEYXRhYmFzZSBkZWZhdWx0cy4KCQkkcmVzcG9uc2VbJ3NlcnZlciddID0gJ2xvY2FsaG9zdCc7CgkJJHJlc3BvbnNlWydkYXRhYmFzZSddID0gJyc7CgkJJHJlc3BvbnNlWyd1c2VyJ10gPSAnJzsKCQkkcmVzcG9uc2VbJ3Bhc3N3b3JkJ10gPSAnJzsKCQkkcmVzcG9uc2VbJ3ByZWZpeCddID0gJ3dwXyc7CgkJCgkJLy8gSWYgaW4gaGlnaCBzZWN1cml0eSBtb2RlIHRoZW4gbm8gZ3Vlc3NlcyBvciBwcmV2aW91cyB2YWx1ZXMgd2lsbCBiZSBnaXZlbi4KCQlpZiAoIGlzc2V0KCAkdGhpcy0+X2JhY2t1cGRhdGFbJ2hpZ2hfc2VjdXJpdHknXSApICYmICggJHRoaXMtPl9iYWNrdXBkYXRhWydoaWdoX3NlY3VyaXR5J10gPT09IHRydWUgKSApIHsgCgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJCQoJCWlmICggZmFsc2UgIT09IEBteXNxbF9jb25uZWN0KCAkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFbJ2RiX3NlcnZlciddLCAkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFbJ2RiX3VzZXInXSwgJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhWydkYl9wYXNzd29yZCddICkgKSB7IC8vIENvdWxkbnQgY29ubmVjdCB0byBzZXJ2ZXIgb3IgaW52YWxpZCBjcmVkZW50aWFscy4KCQkJJHJlc3BvbnNlWydzZXJ2ZXInXSA9ICR0aGlzLT5fcGFyZW50LT5fYmFja3VwZGF0YVsnZGJfc2VydmVyJ107CgkJCSRyZXNwb25zZVsndXNlciddID0gJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhWydkYl91c2VyJ107CgkJCSRyZXNwb25zZVsncGFzc3dvcmQnXSA9ICR0aGlzLT5fcGFyZW50LT5fYmFja3VwZGF0YVsnZGJfcGFzc3dvcmQnXTsKCQkJCgkJCWlmICggZmFsc2UgIT09IEBteXNxbF9zZWxlY3RfZGIoICR0aGlzLT5fcGFyZW50LT5fYmFja3VwZGF0YVsnZGJfbmFtZSddICkgKSB7CgkJCQkkcmVzcG9uc2VbJ2RhdGFiYXNlJ10gPSAkdGhpcy0+X3BhcmVudC0+X2JhY2t1cGRhdGFbJ2RiX25hbWUnXTsKCQkJCQoJCQkJJHJlc3VsdCA9IG15c3FsX3F1ZXJ5KCAiU0hPVyBUQUJMRVMgTElLRSAnIiAuIG15c3FsX3JlYWxfZXNjYXBlX3N0cmluZyggJHRoaXMtPl9wYXJlbnQtPl9iYWNrdXBkYXRhWydkYl9wcmVmaXgnXSApIC4gIiUnIiApOwoJCQkJaWYgKCBteXNxbF9udW1fcm93cyggJHJlc3VsdCApID09IDAgKSB7CgkJCQkJJHJlc3BvbnNlWydwcmVmaXgnXSA9ICR0aGlzLT5fcGFyZW50LT5fYmFja3VwZGF0YVsnZGJfcHJlZml4J107CgkJCQl9CgkJCX0KCQl9CgkJCgkJcmV0dXJuICRyZXNwb25zZTsKCX0KCQoJCgkvKioKCSAqCWdldF9kZWZhdWx0X3VybCgpCgkgKgoJICoJUmV0dXJucyB0aGUgZGVmYXVsdCBzaXRlIFVSTC4KCSAqCgkgKglAcmV0dXJuCQlzdHJpbmcJCVVSTC4KCSAqLwoJZnVuY3Rpb24gZ2V0X2RlZmF1bHRfdXJsKCkgewoJCS8vIEdldCB0aGUgY3VycmVudCBVUkwgb2Ygd2hlcmUgdGhlIGltcG9ydGJ1ZGR5IHNjcmlwdCBpcyBydW5uaW5nLgoJCSR1cmwgPSBzdHJfcmVwbGFjZSggJF9TRVJWRVJbJ1FVRVJZX1NUUklORyddLCAnJywgJF9TRVJWRVJbJ1JFUVVFU1RfVVJJJ10gKTsKCQkkdXJsID0gc3RyX3JlcGxhY2UoIGJhc2VuYW1lKCAkdXJsICkgLCAnJywgJHVybCApOwoJCSR1cmwgPSAnaHR0cDovLycgLiAkX1NFUlZFUlsnSFRUUF9IT1NUJ10gLiAkdXJsOwoJCQoJCXJldHVybiAkdXJsOwoJfQoJCgkKCWZ1bmN0aW9uIGdldF9kZWZhdWx0X2RvbWFpbigpIHsKCQlwcmVnX21hdGNoKCIvXihodHRwOlwvXC8pPyhbXlwvXSspL2kiLCAkdGhpcy0+Z2V0X2RlZmF1bHRfdXJsKCksICRkb21haW4gKTsKCQlyZXR1cm4gJGRvbWFpblsyXTsKCX0KCQoJCn0KPz4=
###PACKDATA,FILE_END,/importbuddy/classes/step_3_api.php,importbuddy/classes/step_3_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_3_view.php,importbuddy/classes/step_3_view.php

###PACKDATA,FILE_END,/importbuddy/classes/step_3_view.php,importbuddy/classes/step_3_view.php
###PACKDATA,FILE_START,/importbuddy/classes/step_4_api.php,importbuddy/classes/step_4_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF80IHsKCWZ1bmN0aW9uIF9fY29uc3RydWN0KCAmJHBhcmVudCApIHsKCQkkdGhpcy0+X3BhcmVudCA9ICYkcGFyZW50OwoJCQoJCSR0aGlzLT5wYXJzZV9vcHRpb25zKCk7CgkJLy8gU2V0IHVwIGJhY2t1cCBkYXRhIGZyb20gdGhlIGJhY2t1cGJ1ZGR5X2RhdC5waHAuCgkJJHRoaXMtPl9wYXJlbnQtPmxvYWRfYmFja3VwX2RhdCgpOwoJfQoJCgkKCS8qKgoJICoJcGFyc2Vfb3B0aW9ucygpCgkgKgoJICoJUGFyc2VzIHZhcmlvdXMgc3VibWl0dGVkIG9wdGlvbnMgYW5kIHNldHRpbmdzIGZyb20gc3RlcCAxLgoJICoKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gcGFyc2Vfb3B0aW9ucygpIHsKCQlpZiAoIGlzc2V0KCAkX1BPU1RbJ3NpdGV1cmwnXSApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ3NpdGV1cmwnXSA9ICRfUE9TVFsnc2l0ZXVybCddOyB9CgkJaWYgKCBpc3NldCggJF9QT1NUWydob21lJ10gKSApIHsKCQkJJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWydob21lJ10gPSAkX1BPU1RbJ2hvbWUnXTsKCQl9IGVsc2UgewoJCQkkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2hvbWUnXSA9ICRfUE9TVFsnc2l0ZXVybCddOwoJCX0KCQkKCQkvLyBNdWx0aXNpdGUgZG9tYWluLgoJCWlmICggaXNzZXQoICRfUE9TVFsnZG9tYWluJ10gKSApIHsgJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWydkb21haW4nXSA9ICRfUE9TVFsnZG9tYWluJ107IH0KCQkKCQlpZiAoIGlzc2V0KCAkX1BPU1RbJ2RiX3NlcnZlciddICkgKSB7ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZGJfc2VydmVyJ10gPSAkX1BPU1RbJ2RiX3NlcnZlciddOyB9CgkJaWYgKCBpc3NldCggJF9QT1NUWydkYl91c2VyJ10gKSApIHsgJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWydkYl91c2VyJ10gPSAkX1BPU1RbJ2RiX3VzZXInXTsgfQoJCWlmICggaXNzZXQoICRfUE9TVFsnZGJfcGFzc3dvcmQnXSApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2RiX3Bhc3N3b3JkJ10gPSAkX1BPU1RbJ2RiX3Bhc3N3b3JkJ107IH0KCQlpZiAoIGlzc2V0KCAkX1BPU1RbJ2RiX25hbWUnXSApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2RiX25hbWUnXSA9ICRfUE9TVFsnZGJfbmFtZSddOyB9CgkJaWYgKCBpc3NldCggJF9QT1NUWydkYl9wcmVmaXgnXSApICkgeyAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ2RiX3ByZWZpeCddID0gJF9QT1NUWydkYl9wcmVmaXgnXTsgfQoJfQoJCgkKCS8qKgoJICoJaW1wb3J0X2RhdGFiYXNlKCkKCSAqCgkgKglQYXJzZXMgdmFyaW91cyBzdWJtaXR0ZWQgb3B0aW9ucyBhbmQgc2V0dGluZ3MgZnJvbSBzdGVwIDEuCgkgKgoJICoJQHJldHVybgkJYXJyYXkJCWFycmF5KCBpbXBvcnRfc3VjY2VzcywgaW1wb3J0X2NvbXBsZXRlICkuCgkgKgkJCQkJCQlpbXBvcnRfc3VjY2VzczogZmFsc2UgaWYgdW5hYmxlIHRvIGltcG9ydCBpbnRvIGRhdGFiYXNlLCB0cnVlIGlmIGltcG9ydCBpcyB3b3JraW5nIHRodXMgZmFyL2NvbXBsZXRlZC4KCSAqCQkJCQkJCWltcG9ydF9jb21wbGV0ZTogSWYgaW5jb21wbGV0ZSwgYW4gaW50ZWdlciBvZiB0aGUgbmV4dCBxdWVyeSB0byBiZWdpbiBvbi4gSWYgY29tcGxldGUsIHRydWUuIEZhbHNlIGlmIGltcG9ydF9zdWNjZXNzID0gZmFsc2UuCgkgKi8KCWZ1bmN0aW9uIGltcG9ydF9kYXRhYmFzZSgpIHsKCQkkdGhpcy0+X3BhcmVudC0+c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCk7CgkJCgkJJHRoaXMtPl9wYXJlbnQtPnN0YXR1cyggJ21lc3NhZ2UnLCAnVmVyaWZ5aW5nIGRhdGFiYXNlIGNvbm5lY3Rpb24gYW5kIHNldHRpbmdzLi4uJyApOwoJCWlmICggJHRoaXMtPl9wYXJlbnQtPmNvbm5lY3RfZGF0YWJhc2UoKSA9PT0gZmFsc2UgKSB7CgkJCSR0aGlzLT5fcGFyZW50LT5hbGVydCggJ0VSUk9SOiBVbmFibGUgdG8gc2VsZWN0IHlvdXIgc3BlY2lmaWVkIGRhdGFiYXNlLiBWZXJpZnkgdGhlIGRhdGFiYXNlIG5hbWUgYW5kIHRoYXQgeW91IGhhdmUgc2V0IHVwIHByb3BlciBwZXJtaXNzaW9ucyBmb3IgeW91ciBzcGVjaWZpZWQgdXNlcm5hbWUgdG8gYWNjZXNzIGl0LiBEZXRhaWxzOiAnIC4gbXlzcWxfZXJyb3IoKSwgdHJ1ZSwgJzkwMDcnICk7CgkJCXJldHVybiggYXJyYXkoIGZhbHNlLCBmYWxzZSApICk7CgkJfSBlbHNlIHsKCQkJJHRoaXMtPl9wYXJlbnQtPm1pZ3JhdGVfaHRhY2Nlc3MoKTsKCQkJJHRoaXMtPl9wYXJlbnQtPnN0YXR1cyggJ21lc3NhZ2UnLCAnRGF0YWJhc2UgY29ubmVjdGlvbiBhbmQgc2V0dGluZ3MgdmVyaWZpZWQuJyApOwoJCQkvLyBJbXBvcnQgZGF0YWJhc2UgdW5sZXNzIGRpc2FibGVkLgoJCQkkZGJfY29udGludWUgPSBmYWxzZTsKCQkJaWYgKCBmYWxzZSA9PT0gJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWydza2lwX2RhdGFiYXNlX2ltcG9ydCddICkgewoJCQkJLy8gV2lwZSBkYXRhYmFzZSBpZiBvcHRpb24gd2FzIHNlbGVjdGVkLgoJCQkJaWYgKCAkdGhpcy0+X3BhcmVudC0+X29wdGlvbnNbJ3dpcGVfZGF0YWJhc2UnXSA9PSB0cnVlICkgewoJCQkJCWlmICggaXNzZXQoICRfUE9TVFsnZGJfY29udGludWUnXSApICYmICggaXNfbnVtZXJpYyggJF9QT1NUWydkYl9jb250aW51ZSddICkgKSApIHsKCQkJCQkJLy8gZG8gbm90aGluZwoJCQkJCX0gZWxzZSB7IC8vIGRvbnQgd2lwZSBvbiBzdWJzdGVwcyBvZiBkYiBpbXBvcnQuCgkJCQkJCSR0aGlzLT5fcGFyZW50LT5zdGF0dXMoICdtZXNzYWdlJywgJ1dpcGluZyBleGlzdGluZyBkYXRhYmFzZSBiYXNlZCBvbiBzZXR0aW5ncy4uLicgKTsKCQkJCQkJJGZhaWxlZCA9ICEkdGhpcy0+X3BhcmVudC0+d2lwZV9kYXRhYmFzZSgpOwoJCQkJCQlpZiAoIGZhbHNlICE9PSAkZmFpbGVkICkgewoJCQkJCQkJJHRoaXMtPl9wYXJlbnQtPm1lc3NhZ2UoICdlcnJvcicsICdVbmFibGUgdG8gd2lwZSBkYXRhYmFzZSBhcyBjb25maWd1cmVkIGluIHRoZSBzZXR0aW5ncy4nICk7CgkJCQkJCQkkdGhpcy0+X3BhcmVudC0+YWxlcnQoICdFcnJvcicsICdVbmFibGUgdG8gd2lwZSBkYXRhYmFzZSBhcyBjb25maWd1cmVkIGluIHRoZSBzZXR0aW5ncy4nICk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCQkKCQkJCS8vIFNhbml0aXplIGRiIGNvbnRpbnVhdGlvbiB2YWx1ZSBpZiBuZWVkZWQuCgkJCQlpZiAoIGlzc2V0KCAkX1BPU1RbJ2RiX2NvbnRpbnVlJ10gKSAmJiAoIGlzX251bWVyaWMoICRfUE9TVFsnZGJfY29udGludWUnXSApICkgKSB7CgkJCQkJLy8gZG8gbm90aGluZwoJCQkJfSBlbHNlIHsKCQkJCQkkX1BPU1RbJ2RiX2NvbnRpbnVlJ10gPSAwOwoJCQkJfQoJCQkJJGltcG9ydF9yZXN1bHQgPSAkdGhpcy0+X3BhcmVudC0+cmVzdG9yZV9kYXRhYmFzZSggJF9QT1NUWydkYl9jb250aW51ZSddICk7CgkJCQlpZiAoIHRydWUgPT09ICRpbXBvcnRfcmVzdWx0ICkgewoJCQkJCXJldHVybiggYXJyYXkoIHRydWUsIHRydWUgKSApOwoJCQkJfSBlbHNlaWYgKCBmYWxzZSA9PT0gJGltcG9ydF9yZXN1bHQgKSB7IC8vIEZ1bGwgZmFpbHVyZS4KCQkJCQlyZXR1cm4oIGFycmF5KCBmYWxzZSwgZmFsc2UgKSApOwoJCQkJfSBlbHNlIHsgLy8gTmVlZHMgdG8gY2h1bmsgdXAgREIgaW1wb3J0IGFuZCBjb250aW51ZS4uLgoJCQkJCS8vJGRiX2NvbnRpbnVlID0gdHJ1ZTsKCQkJCQkvLyBDb250aW51ZSBvbiBxdWVyeSAkaW1wb3J0X3Jlc3VsdC4uLgoJCQkJCSR0aGlzLT5fcGFyZW50LT5zdGF0dXMoICdtZXNzYWdlJywgJ05leHQgc3RlcCB3aWxsIGJlZ2luIGltcG9ydCBvbiBxdWVyeSAnIC4gJGltcG9ydF9yZXN1bHQgLiAnLicgKTsKCQkJCQlyZXR1cm4gYXJyYXkoIHRydWUsICRpbXBvcnRfcmVzdWx0ICk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQkkdGhpcy0+X3BhcmVudC0+c3RhdHVzKCAnbWVzc2FnZScsICdTa2lwcGluZyBkYXRhYmFzZSByZXN0b3JlIGJhc2VkIG9uIHNldHRpbmdzLicgKTsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoJfQoKCn0KPz4=
###PACKDATA,FILE_END,/importbuddy/classes/step_4_api.php,importbuddy/classes/step_4_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_4_view.php,importbuddy/classes/step_4_view.php
PD9waHAKJGZhaWxlZCA9IGZhbHNlOwoKZWNobyAkdGhpcy0+c3RhdHVzX2JveCggJ0ltcG9ydGluZyBkYXRhYmFzZSBjb250ZW50IHdpdGggSW1wb3J0QnVkZHkgJyAuICR0aGlzLT5fdmVyc2lvbiAuICcuLi4nICk7CmVjaG8gJzxkaXYgaWQ9InBiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciPjxpbWcgc3JjPSI/ZXppbWc9d29ya2luZy5naWYiIHRpdGxlPSJXb3JraW5nLi4uIFBsZWFzZSB3YWl0IGFzIHRoaXMgbWF5IHRha2UgYSBtb21lbnQuLi4iPjwvZGl2Pic7CgokaW1wb3J0X3Jlc3VsdCA9ICRhcGktPmltcG9ydF9kYXRhYmFzZSgpOwoKZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCmlmICggJGltcG9ydF9yZXN1bHRbMF0gPT0gdHJ1ZSApIHsKCWVjaG8gJzxicj48YnI+JzsKCWlmICggJGltcG9ydF9yZXN1bHRbMV0gIT09IHRydWUgKSB7IC8vIGlmIG5vdCBmaW5pc2hlZC4KCQkkdGhpcy0+YWxlcnQoICdEYXRhYmFzZSB0b28gbGFyZ2UgdG8gaW1wb3J0IGluIG9uZSBzdGVwLicsICdZb3VyIGRhdGFiYXNlIHdhcyB0b28gbGFyZ2UgdG8gaW1wb3J0IGluIG9uZSBzdGVwIGFuZCB3aWxsIGJlIGltcG9ydGVkIGluIGNodW5rcy4gUGxlYXNlIGNvbnRpbnVlIHRoZSBwcm9jZXNzIHVudGlsIHRoaXMgc3RlcCBpcyBmaW5pc2hlZC4gVGhpcyBtYXkgdGFrZSBhIGZldyBzdGVwcyBkZXBlbmRpbmcgb24gdGhlIHNpemUgb2YgeW91ciBkYXRhYmFzZSBhbmQgc2VydmVyIHNwZWVkLicgKTsKCQllY2hvICc8YnI+JzsKCQllY2hvICdQbGVhc2Uga2VlcCBjb250aW51aW5nIHVudGlsIHlvdXIgZGF0YWJhc2UgaGFzIGZ1bGx5IGltcG9ydGVkLiBUaGlzIG1heSB0YWtlIGEgZmV3IHN0ZXBzLic7CgkJZWNobyAnPGZvcm0gYWN0aW9uPSI/c3RlcD00IiBtZXRob2Q9cG9zdD4nOwoJCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRiX2NvbnRpbnVlIiB2YWx1ZT0iJyAuICRpbXBvcnRfcmVzdWx0WzFdIC4gJyI+JzsKCQllY2hvICc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvcHRpb25zIiB2YWx1ZT0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoIHNlcmlhbGl6ZSggJHRoaXMtPl9vcHRpb25zICkgKSAuICciIC8+JzsKCQllY2hvICc8YnI+PGJyPjxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7Ij48aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIGNsYXNzPSJidXR0b24iIHZhbHVlPSJDb250aW51ZSBEYXRhYmFzZSBJbXBvcnQgJnJhcXVvIiAvPjwvcD4nOwoJCWVjaG8gJzwvZm9ybT4nOwoJfSBlbHNlIHsKCQllY2hvICc8Yj5Jbml0aWFsIGRhdGFiYXNlIGltcG9ydCBjb21wbGV0ZSE8L2I+PGJyPjxicj4nOwoJCWVjaG8gJ05leHQgdGhlIGRhdGEgaW4gdGhlIGRhdGFiYXNlIHdpbGwgYmUgbWlncmF0ZWQgdG8gYWNjb3VudCBmb3IgYW55IGZpbGUgcGF0aCBvciBVUkwgY2hhbmdlcy4nOwoJCWVjaG8gJzxmb3JtIGFjdGlvbj0iP3N0ZXA9NSIgbWV0aG9kPXBvc3Q+JzsKCQllY2hvICc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvcHRpb25zIiB2YWx1ZT0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoIHNlcmlhbGl6ZSggJHRoaXMtPl9vcHRpb25zICkgKSAuICciIC8+JzsKCQllY2hvICc8YnI+PGJyPjxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7Ij48aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIGNsYXNzPSJidXR0b24iIHZhbHVlPSJOZXh0IFN0ZXAgJnJhcXVvIiAvPjwvcD4nOwoJCWVjaG8gJzwvZm9ybT4nOwoJfQp9IGVsc2UgewoJZWNobyAnPGJyPjxiPkRhdGFiYXNlIGltcG9ydCBmYWlsZWQuIFBsZWFzZSB1c2UgeW91ciBiYWNrIGJ1dHRvbiB0byBjb3JyZWN0IGFueSBlcnJvcnMuPC9iPic7Cn0KPz4=
###PACKDATA,FILE_END,/importbuddy/classes/step_4_view.php,importbuddy/classes/step_4_view.php
###PACKDATA,FILE_START,/importbuddy/classes/step_5_api.php,importbuddy/classes/step_5_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF81IGV4dGVuZHMgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHkgewoJZnVuY3Rpb24gX19jb25zdHJ1Y3QoICYkcGFyZW50ICkgewoJCSR0aGlzLT5fcGFyZW50ID0gJiRwYXJlbnQ7CgkJLy8gU2V0IHVwIGJhY2t1cCBkYXRhIGZyb20gdGhlIGJhY2t1cGJ1ZGR5X2RhdC5waHAuCgkJJHRoaXMtPl9wYXJlbnQtPmxvYWRfYmFja3VwX2RhdCgpOwoJfQoJCgkKCS8qKgoJICoJbWlncmF0ZV9kYXRhYmFzZSgpCgkgKgoJICoJQ29ubmVjdHMgZGF0YWJhc2UgYW5kIHBlcmZvcm1zIG1pZ3JhdGlvbiBvZiBEQiBjb250ZW50LiBIYW5kbGVzIHNraXBwaW5nLgoJICoKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gbWlncmF0ZV9kYXRhYmFzZSgpIHsKCQkkdGhpcy0+X3BhcmVudC0+Y29ubmVjdF9kYXRhYmFzZSgpOwoJCQoJCWlmICggZmFsc2UgPT09ICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snc2tpcF9kYXRhYmFzZV9taWdyYXRpb24nXSApIHsKCQkJcmV0dXJuICR0aGlzLT5fcGFyZW50LT5taWdyYXRlX2RhdGFiYXNlKCk7CgkJfSBlbHNlIHsKCQkJJHRoaXMtPl9wYXJlbnQtPnN0YXR1cyggJ21lc3NhZ2UnLCAnU2tpcHBpbmcgZGF0YWJhc2UgbWlncmF0aW9uIGJhc2VkIG9uIHNldHRpbmdzLicgKTsKCQkJcmV0dXJuIHRydWU7CgkJfQoJfQoJCgkKCS8qKgoJICoJbWlncmF0ZV93cF9jb25maWcoKQoJICoKCSAqCVBhc3N0aHJvdWdoIGZvciBzdXR1cmUgdXNlOyB0cnlpbmcgdG8gZnVubmVsIGFsbCBlc3NlbnRpYWwgbWlncmF0aW9uIHN0ZXBzIHRocm91Z2ggdGhlIEFQSSBmaWxlcy4KCSAqCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCWZ1bmN0aW9uIG1pZ3JhdGVfd3BfY29uZmlnKCkgewoJCXJldHVybiAkdGhpcy0+X3BhcmVudC0+bWlncmF0ZV93cF9jb25maWcoKTsKCX0KCQoJCn0KPz4=
###PACKDATA,FILE_END,/importbuddy/classes/step_5_api.php,importbuddy/classes/step_5_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_5_view.php,importbuddy/classes/step_5_view.php
PD9waHAKJHRoaXMtPnNldF9ncmVlZHlfc2NyaXB0X2xpbWl0cygpOwoKCgoKZWNobyAkdGhpcy0+c3RhdHVzX2JveCggJ01pZ3JhdGluZyBkYXRhYmFzZSBjb250ZW50IHdpdGggSW1wb3J0QnVkZHkgJyAuICR0aGlzLT5fdmVyc2lvbiAuICcuLi4nICk7CmVjaG8gJzxkaXYgaWQ9InBiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciPjxpbWcgc3JjPSI/ZXppbWc9d29ya2luZy5naWYiIHRpdGxlPSJXb3JraW5nLi4uIFBsZWFzZSB3YWl0IGFzIHRoaXMgbWF5IHRha2UgYSBtb21lbnQuLi4iPjwvZGl2Pic7CgokcmVzdWx0ID0gJGFwaS0+bWlncmF0ZV9kYXRhYmFzZSgpOwoKZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCmlmICggdHJ1ZSA9PT0gJHJlc3VsdCApIHsKCWlmICggdHJ1ZSA9PT0gJGFwaS0+bWlncmF0ZV93cF9jb25maWcoKSApIHsKCQkkdGhpcy0+c3RhdHVzKCAnbWVzc2FnZScsICdJbXBvcnQgY29tcGxldGUhJyApOwoJCWVjaG8gJzxicj48YnI+PGI+SW1wb3J0IGNvbXBsZXRlIGZvciB0aGUgc2l0ZTogPC9iPjxhIGhyZWY9IicgLiAkdGhpcy0+X29wdGlvbnNbJ3NpdGV1cmwnXSAuICciIHRhcmdldD0iX25ldyI+JyAuICR0aGlzLT5fb3B0aW9uc1snc2l0ZXVybCddIC4gJzwvYT48YnI+PGJyPic7CgkJZWNobyAnPGltZyBzcmM9Ij9lemltZz1idWxsZXRfZXJyb3IucG5nIiBzdHlsZT0iZmxvYXQ6IGxlZnQ7Ij48ZGl2IHN0eWxlPSJtYXJnaW4tbGVmdDogMjBweDsiPlZlcmlmeSBzaXRlIGZ1bmN0aW9uYWxpdHkgdGhlbiBkZWxldGUgdGhlIGJhY2t1cCBaSVAgZmlsZSBhbmQgaW1wb3J0YnVkZHkucGhwIGZyb20geW91ciBzaXRlIHJvb3QgKHRoZSBuZXh0IHN0ZXAgd2lsbCBhdHRlbXB0IHRvIGRvIHRoaXMgZm9yIHlvdSkuIExlYXZpbmcgdGhlc2UgZmlsZXMgaXMgYSBzZWN1cml0eSByaXNrLiBMZWF2aW5nIHRoZSB6aXAgZmlsZSBhbmQgdGhlbiBzdWJzZXF1ZW50bHkgcnVubmluZyBhIEJhY2t1cEJ1ZGR5IGJhY2t1cCB3aWxsIHJlc3VsdCBpbiBleGNlc3NpdmVseSBsYXJnZSBiYWNrdXBzIGFzIHRoaXMgemlwIGZpbGUgd2lsbCBiZSBpbmNsdWRlZC48L2Rpdj4nOwoJCQoJCWVjaG8gJzxmb3JtIGFjdGlvbj0iP3N0ZXA9NiIgbWV0aG9kPXBvc3Q+JzsKCQllY2hvICc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvcHRpb25zIiB2YWx1ZT0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoIHNlcmlhbGl6ZSggJHRoaXMtPl9vcHRpb25zICkgKSAuICciIC8+JzsKCQk/PgoJCQoJCTxicj4KCQk8aDM+TGFzdCBzdGVwOiBGaWxlIENsZWFudXA8L2gzPgoJCTx0YWJsZT48dHI+PHRkPgoJCQk8bGFiZWwgZm9yPSJkZWxldGVfYmFja3VwIiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2JhY2t1cCIgaWQ9ImRlbGV0ZV9iYWNrdXAiIHZhbHVlPSIxIiBjaGVja2VkPiBEZWxldGUgYmFja3VwIHppcCBhcmNoaXZlPC9sYWJlbD4KCQkJPGJyPgkJCgkJCTxsYWJlbCBmb3I9ImRlbGV0ZV90ZW1wIiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX3RlbXAiIGlkPSJkZWxldGVfdGVtcCIgdmFsdWU9IjEiIGNoZWNrZWQ+IERlbGV0ZSB0ZW1wb3JhcnkgaW1wb3J0IGZpbGVzPC9sYWJlbD4KCQk8L3RkPjx0ZD4KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBpZD0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIGltcG9ydGJ1ZGR5LnBocCBzY3JpcHQ8L2xhYmVsPgoJCQk8YnI+CgkJCTxsYWJlbCBmb3I9ImRlbGV0ZV9pbXBvcnRidWRkeWxvZyIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV9pbXBvcnRidWRkeWxvZyIgaWQ9ImRlbGV0ZV9pbXBvcnRidWRkeWxvZyIgdmFsdWU9IjEiIGNoZWNrZWQ+IERlbGV0ZSBpbXBvcnRidWRkeS50eHQgbG9nIGZpbGU8L2xhYmVsPgoJCTwvdGQ+PC90cj48L3RhYmxlPgoJCQoJCTw/cGhwCgkJZWNobyAnPGJyPjxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7Ij48aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIGNsYXNzPSJidXR0b24iIHZhbHVlPSJDbGVhbiB1cCAmIHJlbW92ZSB0ZW1wb3JhcnkgZmlsZXMgJnJhcXVvIiAvPjwvcD4nOwoJCWVjaG8gJzwvZm9ybT4nOwoJfSBlbHNlIHsKCQkkdGhpcy0+YWxlcnQoICdFcnJvcjogVW5hYmxlIHRvIHVwZGF0ZSB3cC1jb25maWcucGhwIGZpbGUuJywgJ1ZlcmlmeSB3cml0ZSBwZXJtaXNzaW9ucyBmb3IgdGhlIHdwLWNvbmZpZy5waHAgZmlsZSB0aGVuIHJlZnJlc2ggdGhpcyBwYWdlLicgKTsKCX0KfSBlbHNlIHsKCSR0aGlzLT5hbGVydCggJ0Vycm9yOiBVbmFibGUgdG8gbWlncmF0ZSBkYXRhYmFzZSBjb250ZW50LicsICdTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSBkYXRhYmFzZSBtaWdyYXRpb24gcG9ydGlvbiBvZiB0aGUgcmVzdG9yZSBwcm9jZXNzLicgKTsKfQo/Pg==
###PACKDATA,FILE_END,/importbuddy/classes/step_5_view.php,importbuddy/classes/step_5_view.php
###PACKDATA,FILE_START,/importbuddy/classes/step_6_api.php,importbuddy/classes/step_6_api.php
PD9waHAKY2xhc3MgcGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF82IHsKCWZ1bmN0aW9uIF9fY29uc3RydWN0KCAmJHBhcmVudCApIHsKCQkkdGhpcy0+X3BhcmVudCA9ICYkcGFyZW50OwoJfQoJCgkKCWZ1bmN0aW9uIGNsZWFudXAoKSB7CgkJaWYgKCBpc3NldCggJF9QT1NUWydkZWxldGVfYmFja3VwJ10gKSAmJiAoICRfUE9TVFsnZGVsZXRlX2JhY2t1cCddID09ICcxJyApICkgewoJCQkkdGhpcy0+X3BhcmVudC0+cmVtb3ZlX2ZpbGUoICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZmlsZSddLCAnYmFja3VwIC5aSVAgZmlsZSAoJyAuICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snZmlsZSddIC4gJyknLCB0cnVlICk7CgkJfQoJCQoJCWlmICggaXNzZXQoICRfUE9TVFsnZGVsZXRlX3RlbXAnXSApICYmICggJF9QT1NUWydkZWxldGVfdGVtcCddID09ICcxJyApICkgewoJCQkvLyBGdWxsIGJhY2t1cCAuc3FsIGZpbGUKCQkJJHRoaXMtPl9wYXJlbnQtPnJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ3dwLWNvbnRlbnQvdXBsb2Fkcy90ZW1wXycuJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWyd6aXBfaWQnXS4nL2RiLnNxbCcsICdkYi5zcWwgKGJhY2t1cCBkYXRhYmFzZSBkdW1wKScsIGZhbHNlICk7CgkJCSR0aGlzLT5fcGFyZW50LT5yZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvdGVtcF8nLiR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snemlwX2lkJ10uJy9kYl8xLnNxbCcsICdkYl8xLnNxbCAoYmFja3VwIGRhdGFiYXNlIGR1bXApJywgZmFsc2UgKTsKCQkJJHRoaXMtPl9wYXJlbnQtPnJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ3dwLWNvbnRlbnQvdXBsb2Fkcy9iYWNrdXBidWRkeV90ZW1wLycuJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWyd6aXBfaWQnXS4nL2RiXzEuc3FsJywgJ2RiXzEuc3FsIChiYWNrdXAgZGF0YWJhc2UgZHVtcCknLCBmYWxzZSApOwoJCQkvLyBEQiBvbmx5IHNxbCBmaWxlCgkJCSR0aGlzLT5fcGFyZW50LT5yZW1vdmVfZmlsZSggQUJTUEFUSCAuICdkYi5zcWwnLCAnZGIuc3FsIChiYWNrdXAgZGF0YWJhc2UgZHVtcCknLCBmYWxzZSApOwoJCQkkdGhpcy0+X3BhcmVudC0+cmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnZGJfMS5zcWwnLCAnZGJfMS5zcWwgKGJhY2t1cCBkYXRhYmFzZSBkdW1wKScsIGZhbHNlICk7CgkJCQoJCQkvLyBGdWxsIGJhY2t1cCBkYXQgZmlsZQoJCQkkdGhpcy0+X3BhcmVudC0+cmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL3RlbXBfJyAuICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snemlwX2lkJ10gLiAnL2JhY2t1cGJ1ZGR5X2RhdC5waHAnLCAnYmFja3VwYnVkZHlfZGF0LnBocCAoYmFja3VwIGRhdGEgZmlsZSknLCBmYWxzZSApOwoJCQkkdGhpcy0+X3BhcmVudC0+cmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL2JhY2t1cGJ1ZGR5X3RlbXAvJyAuICR0aGlzLT5fcGFyZW50LT5fb3B0aW9uc1snemlwX2lkJ10gLiAnL2JhY2t1cGJ1ZGR5X2RhdC5waHAnLCAnYmFja3VwYnVkZHlfZGF0LnBocCAoYmFja3VwIGRhdGEgZmlsZSknLCBmYWxzZSApOwoJCQkvLyBEQiBvbmx5IGRhdCBmaWxlCgkJCSR0aGlzLT5fcGFyZW50LT5yZW1vdmVfZmlsZSggQUJTUEFUSCAuICdiYWNrdXBidWRkeV9kYXQucGhwJywgJ2JhY2t1cGJ1ZGR5X2RhdC5waHAgKGJhY2t1cCBkYXRhIGZpbGUpJywgZmFsc2UgKTsKCQkJCgkJCSR0aGlzLT5fcGFyZW50LT5yZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nIC4gJHRoaXMtPl9wYXJlbnQtPl9vcHRpb25zWyd6aXBfaWQnXSAuICcvJywgJ1RlbXBvcmFyeSBiYWNrdXAgZGlyZWN0b3J5LicsIGZhbHNlICk7CgkJCQoJCQkkdGhpcy0+X3BhcmVudC0+cmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvJywgJ0ltcG9ydEJ1ZGR5IERpcmVjdG9yeScsIHRydWUgKTsKCQl9CgkJaWYgKCBpc3NldCggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHlsb2cnXSApICYmICggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHlsb2cnXSA9PSAnMScgKSApIHsKCQkJJHRoaXMtPl9wYXJlbnQtPnJlbW92ZV9maWxlKCAnaW1wb3J0YnVkZHkudHh0JywgJ2ltcG9ydGJ1ZGR5LnR4dCBsb2cgZmlsZScsIHRydWUgKTsKCQl9CgkJaWYgKCBpc3NldCggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHknXSApICYmICggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHknXSA9PSAnMScgKSApIHsKCQkJJHRoaXMtPl9wYXJlbnQtPnJlbW92ZV9maWxlKCAnaW1wb3J0YnVkZHkucGhwJywgJ2ltcG9ydGJ1ZGR5LnBocCAodGhpcyBzY3JpcHQpJywgdHJ1ZSApOwoJCX0KCX0KCQoJCn0=
###PACKDATA,FILE_END,/importbuddy/classes/step_6_api.php,importbuddy/classes/step_6_api.php
###PACKDATA,FILE_START,/importbuddy/classes/step_6_view.php,importbuddy/classes/step_6_view.php
PD9waHAKJHRoaXMtPmxvZyggJ0JlZ2lubmluZyBmaW5hbCBzdGVwIGNsZWFudXAhJyApOwoKZWNobyAnVGhpcyBzdGVwIGhhbmRsZXMgY2xlYW51cCBvZiBmaWxlcy4gSXQgaXMgY29tbW9uIHRvIG5vdCBiZSBhYmxlIHRvIGRlbGV0ZSBzb21lIGZpbGVzIGR1ZSB0byBwZXJtaXNzaW9uIGVycm9ycy4gWW91IG1heSBtYW51YWxseSBkZWxldGUgdGhlbSBvciBpZ25vcmUgYW55IGVycm9ycyBpZiB5b3Ugd2lzaC48YnI+PGJyPic7CgplY2hvICR0aGlzLT5zdGF0dXNfYm94KCAnQ2xlYW5pbmcgdXAgYWZ0ZXIgcmVzdG9yZSB3aXRoIEltcG9ydEJ1ZGR5ICcgLiAkdGhpcy0+X3ZlcnNpb24gLiAnLi4uJyApOwplY2hvICc8ZGl2IGlkPSJwYl9pbXBvcnRidWRkeV93b3JraW5nIj48aW1nIHNyYz0iP2V6aW1nPXdvcmtpbmcuZ2lmIiB0aXRsZT0iV29ya2luZy4uLiBQbGVhc2Ugd2FpdCBhcyB0aGlzIG1heSB0YWtlIGEgbW9tZW50Li4uIj48L2Rpdj4nOwoKZmx1c2goKTsKc2xlZXAoIDUgKTsgLy8gUGF1c2UgdG8gYWxsb3cgQ1NTLCBldGMgdGltZSB0byBsb2FkIGJlZm9yZSBpbXBvcnRidWRkeSBzdGFydHMgZGVsZXRpbmcgdGhvc2UgZmlsZXMuCgokYXBpLT5jbGVhbnVwKCk7CgplY2hvICc8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+alF1ZXJ5KCIjcGJfaW1wb3J0YnVkZHlfd29ya2luZyIpLmhpZGUoKTs8L3NjcmlwdD4nOwoKZWNobyAnPGJyID48YnI+JzsKZWNobyAnPGJyPjxicj48Yj5JbXBvcnQgY29tcGxldGUgZm9yIHRoZSBzaXRlOiA8L2I+PGEgaHJlZj0iJyAuICR0aGlzLT5fb3B0aW9uc1snc2l0ZXVybCddIC4gJyIgdGFyZ2V0PSJfbmV3Ij4nIC4gJHRoaXMtPl9vcHRpb25zWydzaXRldXJsJ10gLiAnPC9hPjxicj48YnI+JzsKZWNobyAnPGJyPjxicj48Yj5UaGFuayB5b3UgZm9yIGNob29zaW5nIEJhY2t1cEJ1ZGR5ITwvYj4nOwoKJHRoaXMtPmxvZyggJ0ZpbmlzaGVkIGZpbmFsIHN0ZXAgY2xlYW51cCEgS2VyZnVmZmxlIScgKTsKPz4=
###PACKDATA,FILE_END,/importbuddy/classes/step_6_view.php,importbuddy/classes/step_6_view.php
###PACKDATA,FILE_START,/importbuddy/classes/view_page.php,importbuddy/classes/view_page.php
PGh0bWw+Cgk8aGVhZD4KCQk8dGl0bGU+QmFja3VwQnVkZHkgaW1wb3J0YnVkZHkucGhwIGJ5IFBsdWdpbkJ1ZGR5LmNvbTwvdGl0bGU+Cgk8L2hlYWQ+Cgk8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJpbXBvcnRidWRkeS9jc3Mvc3R5bGUuY3NzIiAvPgoJPHNjcmlwdCBzcmM9ImltcG9ydGJ1ZGR5L2pzL2pxdWVyeS5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KCTxzY3JpcHQgc3JjPSJpbXBvcnRidWRkeS9qcy91aS5jb3JlLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgoJPHNjcmlwdCBzcmM9ImltcG9ydGJ1ZGR5L2pzL3VpLndpZGdldC5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KCTxzY3JpcHQgc3JjPSJpbXBvcnRidWRkeS9qcy91aS50YWJzLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgoJPHNjcmlwdCBzcmM9ImltcG9ydGJ1ZGR5L2pzL3Rvb2x0aXAuanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHNyYz0iaW1wb3J0YnVkZHkvanMvaW1wb3J0YnVkZHkuanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+Cgk8Ym9keT4KCQkKCQk8aDE+QmFja3VwQnVkZHkgUmVzdG9yYXRpb24gJiBNaWdyYXRpb24gVG9vbDwvaDE+CgkJPD9waHAgLy88YSBocmVmPSJodHRwOi8vaXRoZW1lcy5jb20vY29kZXgvcGFnZS9CYWNrdXBCdWRkeSIgc3R5bGU9InRleHQtZGVjb3JhdGlvbjogbm9uZTsiPk5lZWQgaGVscD8gU2VlIHRoZSA8Yj5Lbm93bGVkZ2UgQmFzZTwvYj4gZm9yIHR1dG9yaWFscyAmIG1vcmUuPC9hPjxicj4gPz4KCQkKCQk8P3BocAoJCWlmICggJHRoaXMtPl9vcHRpb25zWydza2lwX2ZpbGVzJ10gIT0gZmFsc2UgKSB7CgkJCWVjaG8gJ1dBUk5JTkc6IERlYnVnIG9wdGlvbiB0byBza2lwIGZpbGVzIGlzIHNldCB0byB0cnVlLiBGaWxlcyB3aWxsIG5vdCBiZSBleHRyYWN0ZWQuPGJyPic7CgkJfQoJCWlmICggJHRoaXMtPl9vcHRpb25zWyd3aXBlX2RhdGFiYXNlJ10gIT0gZmFsc2UgKSB7CgkJCWVjaG8gJ1dBUk5JTkc6IERlYnVnIG9wdGlvbiB0byB3aXBlIGRhdGFiYXNlIGlzIHNldCB0byB0cnVlLiBBbGwgZXhpc3RpbmcgZGF0YSB3aWxsIGJlIGVyYXNlZC48YnI+JzsKCQl9CgkJaWYgKCAkdGhpcy0+X29wdGlvbnNbJ3NraXBfZGF0YWJhc2VfaW1wb3J0J10gIT0gZmFsc2UgKSB7CgkJCWVjaG8gJ1dBUk5JTkc6IERlYnVnIG9wdGlvbiB0byBza2lwIGRhdGFiYXNlIGltcG9ydCBzZXQgdG8gdHJ1ZS4gVGhlIGRhdGFiYXNlIHdpbGwgbm90IGJlIGltcG9ydGVkLjxicj4nOwoJCX0KCQlpZiAoICR0aGlzLT5fb3B0aW9uc1snc2tpcF9kYXRhYmFzZV9taWdyYXRpb24nXSAhPSBmYWxzZSApIHsKCQkJZWNobyAnV0FSTklORzogRGVidWcgb3B0aW9uIHRvIHNraXAgZGF0YWJhc2UgaW1wb3J0IHNldCB0byB0cnVlLiBUaGUgZGF0YWJhc2Ugd2lsbCBub3QgYmUgbWlncmF0ZWQuPGJyPic7CgkJfQoJCWlmICggJHRoaXMtPl9vcHRpb25zWydza2lwX2h0YWNjZXNzJ10gIT0gZmFsc2UgKSB7CgkJCWVjaG8gJ1dBUk5JTkc6IERlYnVnIG9wdGlvbiB0byBza2lwIG1pZ3JhdGluZyB0aGUgaHRhY2Nlc3MgZmlsZSBpcyBzZXQgdG8gdHJ1ZS4gVGhlIGZpbGUgd2lsbCBub3QgYmUgbWlncmF0ZWQgaWYgbmVlZGVkLjxicj4nOwoJCX0KCQlpZiAoICR0aGlzLT5fb3B0aW9uc1snZm9yY2VfY29tcGF0aWJpbGl0eV9tZWRpdW0nXSAhPSBmYWxzZSApIHsKCQkJZWNobyAnV0FSTklORzogRGVidWcgb3B0aW9uIHRvIGZvcmNlIG1lZGl1bSBjb21wYXRpYmlsaXR5IG1vZGUuIFRoaXMgbWF5IHJlc3VsdCBpbiBzbG93ZXIsIGxlc3MgcmVsaWFibGUgb3BlcmF0aW9uLjxicj4nOwoJCX0KCQlpZiAoICR0aGlzLT5fb3B0aW9uc1snZm9yY2VfY29tcGF0aWJpbGl0eV9zbG93J10gIT0gZmFsc2UgKSB7CgkJCWVjaG8gJ1dBUk5JTkc6IERlYnVnIG9wdGlvbiB0byBmb3JjZSBzbG93IGNvbXBhdGliaWxpdHkgbW9kZS4gVGhpcyBtYXkgcmVzdWx0IGluIHNsb3dlciwgbGVzcyByZWxpYWJsZSBvcGVyYXRpb24uPGJyPic7CgkJfQoJCWlmICggJHRoaXMtPl9vcHRpb25zWydmb3JjZV9oaWdoX3NlY3VyaXR5J10gIT0gZmFsc2UgKSB7CgkJCWVjaG8gJ1dBUk5JTkc6IERlYnVnIG9wdGlvbiB0byBmb3JjZSBoaWdoIHNlY3VyaXR5IG1vZGUuIFlvdSBtYXkgYmUgcHJvbXB0ZWQgZm9yIG1vcmUgaW5mb3JtYXRpb24gdGhhbiBub3JtYWwuPGJyPic7CgkJfQoJCWlmICggJHRoaXMtPl9vcHRpb25zWydzaG93X3BocF93YXJuaW5ncyddICE9IGZhbHNlICkgewoJCQllY2hvICdXQVJOSU5HOiBEZWJ1ZyBvcHRpb24gdG8gc3RyaWN0bHkgcmVwb3J0IGFsbCBlcnJvcnMgJiB3YXJuaW5ncyBmcm9tIFBIUCBpcyBzZXQgdG8gdHJ1ZS4gVGhpcyBtYXkgY2F1c2Ugb3BlcmF0aW9uIHByb2JsZW1zLjxicj4nOwoJCX0KCQllY2hvICc8YnI+JzsKCQk/PgoJCQoJCTxkaXYgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBpZD0icGJfaW1wb3J0YnVkZHlfYmxhbmthbGVydCI+PD9waHAgJHRoaXMtPmFsZXJ0KCAnI1RJVExFIycsICcjTUVTU0FHRSMnLCAnOTAyMScgKTsgPz48L2Rpdj4KCQkKCQk8ZGl2IHN0eWxlPSJ3aWR0aDogNzAwcHg7IG1hcmdpbi1sZWZ0OiBhdXRvOyBtYXJnaW4tcmlnaHQ6IGF1dG87Ij4KCQkJPGRpdiBzdHlsZT0ibWF4LXdpZHRoOiA2ODBweDsgbWFyZ2luOjEwcHg7IHBhZGRpbmc6IDIwcHg7IGJvcmRlcjoxcHggc29saWQgI2NjYzsgLW1vei1ib3JkZXItcmFkaXVzOiAxMHB4OyAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDEwcHg7IGJhY2tncm91bmQ6ICNGOUY5Rjk7IC1tb3otYm94LXNoYWRvdzogMTBweCAxMHB4IDE1cHggLTEycHggIzM1NkQ4RjsgLXdlYmtpdC1ib3gtc2hhZG93OiAxMHB4IDEwcHggMTVweCAtMTJweCAjMzU2RDhGOyBwYWRkaW5nLXJpZ2h0OiAyMHB4OyI+CgkJCQk8ZGl2IGNsYXNzPSJ3cmFwIj4KCQkJCQk8P3BocAoJCQkJCS8vIFJlcXVpcmUgcGFzc3dvcmQgaWYgc2V0LgoJCQkJCWlmICggJHRoaXMtPmhhc19hY2Nlc3MgPT09IGZhbHNlICkgewoJCQkJCQllY2hvICc8aDI+QXV0aGVudGljYXRpb24gUmVxdWlyZWQ8L2gyPic7CgkJCQkJCWVjaG8gJ1BsZWFzZSBlbnRlciB5b3VyIEltcG9ydEJ1ZGR5IHBhc3N3b3JkIHRvIGNvbnRpbnVlLiBUaGlzIHdhcyBzZXQgZnJvbSB0aGUgQmFja3VwQnVkZHkgc2V0dGluZ3MgcGFnZS48YnI+PGJyPic7CgkJCQkJCWVjaG8gJzxicj48Zm9ybSBhY3Rpb249Ij9zdGVwPTEiIG1ldGhvZD0icG9zdCI+JzsKCQkJCQkJZWNobyAnPGRpdiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+PGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgdmFsdWU9IiIgLz4mbmJzcDsnOwoJCQkJCQllY2hvICc8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJBdXRoZW50aWNhdGUgJnJhcXVvOyIgY2xhc3M9ImJ1dHRvbiIgLz48L2Rpdj4nOwoJCQkJCQllY2hvICc8L2Zvcm0+JzsKCQkJCQl9IGVsc2UgeyAvLyBObyBwYXNzd29yZCBuZWVkZWQgb3Igc3VjY2Vzc2Z1bGx5IHBhc3NlZCB0aGUgY29ycmVjdCBwYXNzd29yZC4KCQkJCQkJZWNobyAnPGgyPlN0ZXAgJyAuICR0aGlzLT5fc3RlcCAuICcgb2YgJyAuICR0aGlzLT5fdG90YWxfc3RlcHMgLiAnPC9oMj4nOwoJCQkJCQkKCQkJCQkJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jbGFzc2VzL3N0ZXBfJyAuICR0aGlzLT5fc3RlcCAuICdfdmlldy5waHAnICkgKSB7CgkJCQkJCQkkdGhpcy0+bG9nKCAnSW5pdGlhdGluZyBzdGVwICMnIC4gJHRoaXMtPl9zdGVwIC4gJy4nICk7CgkJCQkJCQkKCQkJCQkJCXJlcXVpcmVfb25jZSggJ3N0ZXBfJyAuICR0aGlzLT5fc3RlcCAuICdfYXBpLnBocCcgKTsKCQkJCQkJCSRhcGlfY2xhc3MgPSAncGx1Z2luYnVkZHlfaW1wb3J0YnVkZHlfc3RlcF8nIC4gJHRoaXMtPl9zdGVwOwoJCQkJCQkJJGFwaSA9IG5ldyAkYXBpX2NsYXNzKCAkdGhpcyApOwoJCQkJCQkJCgkJCQkJCQlyZXF1aXJlX29uY2UoICdzdGVwXycgLiAkdGhpcy0+X3N0ZXAgLiAnX3ZpZXcucGhwJyApOwoJCQkJCQkJJHRoaXMtPmxvZyggJ0NvbXBsZXRlZCBzdGVwICMnIC4gJHRoaXMtPl9zdGVwIC4gJy4nICk7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkkdGhpcy0+bG9nKCAnVW5hYmxlIHRvIGluaXRpYXRlIHN0ZXAgIycgLiAkdGhpcy0+X3N0ZXAgLiAnLiBIYWx0ZWQuJywgJ2Vycm9yJyApOwoJCQkJCQkJZGllKCAnRVJST1IgIzU0NjU0Mi4gSW52YWxpZCBzdGVwICInIC4gJHRoaXMtPl9zdGVwIC4gJyIuJyApOwoJCQkJCQl9CgkJCQkJfQoJCQkJCT8+CgkJCQk8L2Rpdj4KCQkJPC9kaXY+CgkJPC9kaXY+CgkJCgkJPGRpdiBzdHlsZT0iY2xlYXI6IGJvdGg7Ij48YnI+PGJyPgoJCQk8P3BocAoJCQlpZiAoICR0aGlzLT5fc3RlcCAhPSAnNicgKSB7IC8vIGFmdGVyIGltcG9ydGJ1ZGR5IGRlbGV0ZWQgb24gc3RlcCA2LCB0aGlzIGltYWdlIGNhbnQgbG9hZCBzbyBkb250IHB1dCBpdCBpbi4uLgoJCQkJZWNobyAnPGEgaHJlZj0iaHR0cDovL3BsdWdpbmJ1ZGR5LmNvbSI+PGltZyBzcmM9Ij9lemltZz1wbHVnaW5idWRkeS5wbmciIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogLTJweDsiPjwvYT4gJzsKCQkJfQoJCQllY2hvICc8YSBocmVmPSJodHRwOi8vcGx1Z2luYnVkZHkuY29tIj5QbHVnaW5CdWRkeS5jb208L2E+PGJyPic7CgkJCWVjaG8gJzwvZGl2Pic7CgkJCWlmICggJHRoaXMtPl92ZXJzaW9uID09ICcjVkVSU0lPTiMnKSB7CgkJCQkvL2VjaG8gJzxpPlZlcnNpb24gVW5rbm93bjwvaT4nOwoJCQl9IGVsc2UgewoJCQkJZWNobyAnPGJyPjxpPkltcG9ydEJ1ZGR5IHYnIC4gJHRoaXMtPl92ZXJzaW9uIC4gJyBmb3IgQmFja3VwQnVkZHkgdicgLiAkdGhpcy0+X2JidmVyc2lvbiAuICc8L2k+JzsKCQkJfQoJCQk/Pgo8L2JvZHk+CjwvaHRtbD4=
###PACKDATA,FILE_END,/importbuddy/classes/view_page.php,importbuddy/classes/view_page.php
###PACKDATA,FILE_START,/importbuddy/css/style.css,importbuddy/css/style.css
Ym9keSB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOwoJZm9udC1mYW1pbHk6Ikx1Y2lkYSBHcmFuZGUiLFZlcmRhbmEsQXJpYWwsIkJpdHN0cmVhbSBWZXJhIFNhbnMiLHNhbnMtc2VyaWY7Cglmb250LXNpemU6IDEycHg7Cgljb2xvcjogIzQ2NDY0NjsKCXBhZGRpbmc6IDMwcHg7Cgl0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KYSB7Cgljb2xvcjogIzIxNzU5QjsKCXRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQphOmhvdmVyIHsKCWNvbG9yOiAjMDAwMDAwOwoJdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Cn0KLndpZGVmYXQgewoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAzcHg7CgktbW96LWJvcmRlci1yYWRpdXM6IDNweDsKCWJvcmRlci1yYWRpdXM6IDNweDsKCWJvcmRlci1zcGFjaW5nOiAwOwogICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICAgIGJvcmRlci13aWR0aDogMXB4OwogICAgY2xlYXI6IGJvdGg7CiAgICBtYXJnaW46IDA7CiAgICB3aWR0aDogMTAwJTsKCWJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7CiAgICBib3JkZXItY29sb3I6ICNERkRGREY7Cn0KLndpZGVmYXQgdGQsIC53aWRlZmF0IHRoIHsKCWZvbnQtZmFtaWx5OiJMdWNpZGEgR3JhbmRlIixWZXJkYW5hLEFyaWFsLCJCaXRzdHJlYW0gVmVyYSBTYW5zIixzYW5zLXNlcmlmOwoJYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7CiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7CiAgICBmb250LXNpemU6IDExcHg7Cglib3JkZXItY29sb3I6ICNERkRGREY7Cn0KLndpZGVmYXQgdGggewoJYmFja2dyb3VuZDogdXJsKCIuLi8uLi9pbXBvcnRidWRkeS5waHA/ZXppbWc9Z3JheS1ncmFkLnBuZyIpIHJlcGVhdC14IHNjcm9sbCBsZWZ0IHRvcCAjREZERkRGOwoJY29sb3I6ICMzMzMzMzM7Cglmb250LXNpemU6IDExcHg7Cgl0ZXh0LXNoYWRvdzogMCAxcHggMCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7CglsaW5lLWhlaWdodDogMS4zZW07CiAgICBwYWRkaW5nOiA3cHggN3B4IDhweDsKICAgIHRleHQtYWxpZ246IGxlZnQ7Cn0KLndpZGVmYXQgdGQgewoJcGFkZGluZzogM3B4IDdweDsKICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7Cn0KaDEgewoJY29sb3I6ICM0NjQ2NDY7Cglmb250LXNpemU6IDI0cHg7Cglmb250LWZhbWlseTogR2VvcmdpYSwiVGltZXMgTmV3IFJvbWFuIiwiQml0c3RyZWFtIENoYXJ0ZXIiLFRpbWVzLHNlcmlmOwoJZm9udC1zdHlsZTogaXRhbGljOwoJbWFyZ2luLXRvcDogMHB4Owp9CmgyIHsKCWNvbG9yOiAjNDY0NjQ2OwoJZm9udC1zaXplOiAyMHB4OwoJZm9udC1mYW1pbHk6IEdlb3JnaWEsIlRpbWVzIE5ldyBSb21hbiIsIkJpdHN0cmVhbSBDaGFydGVyIixUaW1lcyxzZXJpZjsKCWZvbnQtc3R5bGU6IGl0YWxpYzsKCW1hcmdpbi10b3A6IC0xMHB4Owp9Ci53cmFwIHsKCW1hcmdpbi10b3A6IDEwcHg7CgltaW4taGVpZ2h0OiAyMDBweDsKCXBvc2l0aW9uOiByZWxhdGl2ZTsKCXRleHQtYWxpZ246IGxlZnQ7CgltYXJnaW4tbGVmdDogYXV0bzsKCW1hcmdpbi1yaWdodDogYXV0bzsKfQppbWcgewoJdmVydGljYWwtYWxpZ246IC0ycHg7Cn0KLm1lbnUgewoJcGFkZGluZzogOHB4OwoJdGV4dC1hbGlnbjogY2VudGVyOwoJYmFja2dyb3VuZC1jb2xvcjogI0NDQ0NDQzsKCWZvbnQtd2VpZ2h0OiBib2xkOwp9CmlucHV0W3R5cGU9InRleHQiXSwgdGV4dGFyZWEgewoJbWFyZ2luOiAzcHg7CglwYWRkaW5nOiAzcHg7CgktbW96LWJvcmRlci1yYWRpdXM6NHB4IDRweCA0cHggNHB4OwoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7Cglib3JkZXItcmFkaXVzOiA0cHg7Cglib3JkZXItc3R5bGU6c29saWQ7Cglib3JkZXItd2lkdGg6MXB4OwoJYm9yZGVyLWNvbG9yOiAjREZERkRGOwp9CnRleHRhcmVhIHsKCWZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwoJZm9udC1zaXplOiAxM3B4OwoJbGluZS1oZWlnaHQ6IDEuNGVtOwoJY29sb3I6ICM0NjQ2NDY7Cn0KLmJ1dHRvbiB7CgkvKgoJcG9zaXRpb246IGFic29sdXRlOwoJbGVmdDogMzclOwoJKi8KCW1hcmdpbi1sZWZ0OiBhdXRvOwoJbWFyZ2luLXJpZ2h0OiBhdXRvOwoJYm90dG9tOiAxNXB4OwoJCgliYWNrZ3JvdW5kOnVybCgiLi4vLi4vaW1wb3J0YnVkZHkucGhwP2V6aW1nPWJ1dHRvbi1ncmFkLnBuZyIpIHJlcGVhdC14IHNjcm9sbCBsZWZ0IHRvcCAjMjE3NTlCOwoJYm9yZGVyLWNvbG9yOiMyOThDQkE7Cgljb2xvcjojRkZGRkZGOwoJZm9udC13ZWlnaHQ6Ym9sZDsKCXRleHQtc2hhZG93OjAgLTFweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTsKCS1tb3otYm9yZGVyLXJhZGl1czoxMXB4IDExcHggMTFweCAxMXB4OwoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMXB4OwoJYm9yZGVyLXJhZGl1czogMTFweDsKCS1tb3otYm94LXNpemluZzpjb250ZW50LWJveDsKCWJvcmRlci1zdHlsZTpzb2xpZDsKCWJvcmRlci13aWR0aDoxcHg7CgljdXJzb3I6cG9pbnRlcjsKCWZvbnQtc2l6ZToxMXB4ICFpbXBvcnRhbnQ7CglsaW5lLWhlaWdodDoxNHB4OwoJcGFkZGluZzoycHggOHB4OwoJdGV4dC1kZWNvcmF0aW9uOm5vbmU7Cglmb250LWZhbWlseToiTHVjaWRhIEdyYW5kZSIsVmVyZGFuYSxBcmlhbCwiQml0c3RyZWFtIFZlcmEgU2FucyIsc2Fucy1zZXJpZjsKCWZvbnQtc2l6ZToxM3B4Owp9Ci5idXR0b246aG92ZXIgewoJYm9yZGVyLWNvbG9yOiAjMTM0NTVCOwp9Ci5idXR0b24tc2Vjb25kYXJ5IHsKCWJhY2tncm91bmQ6dXJsKCIuLi8uLi9pbXBvcnRidWRkeS5waHA/ZXppbWc9d2hpdGUtZ3JhZC5wbmciKSByZXBlYXQteCBzY3JvbGwgbGVmdCB0b3AgIzIxNzU5QjsKCWJvcmRlci1jb2xvcjojQkJCQkJCOwoJY29sb3I6IzQ2NDY0NjsKCS1tb3otYm9yZGVyLXJhZGl1czoxMXB4IDExcHggMTFweCAxMXB4OwoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMXB4OwoJYm9yZGVyLXJhZGl1czogMTFweDsKCS1tb3otYm94LXNpemluZzpjb250ZW50LWJveDsKCWJvcmRlci1zdHlsZTpzb2xpZDsKCWJvcmRlci13aWR0aDoxcHg7CgljdXJzb3I6cG9pbnRlcjsKCWZvbnQtc2l6ZToxMXB4ICFpbXBvcnRhbnQ7CglsaW5lLWhlaWdodDoxNHB4OwoJcGFkZGluZzoycHggOHB4OwoJdGV4dC1kZWNvcmF0aW9uOm5vbmU7Cglmb250LWZhbWlseToiTHVjaWRhIEdyYW5kZSIsVmVyZGFuYSxBcmlhbCwiQml0c3RyZWFtIFZlcmEgU2FucyIsc2Fucy1zZXJpZjsKCWZvbnQtc2l6ZToxM3B4Owp9Ci5idXR0b24tc2Vjb25kYXJ5OmhvdmVyIHsKCWJvcmRlci1jb2xvcjogIzEzNDU1QjsKfQouYWxlcnQgewoJYmFja2dyb3VuZC1jb2xvcjojRkZGRkUwOwoJYm9yZGVyOiAxcHggc29saWQgI0U2REI1NTsKCXBhZGRpbmc6IDEwcHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDNweDsKCS1tb3otYm9yZGVyLXJhZGl1czogM3B4OwoJYm9yZGVyLXJhZGl1czogM3B4OwoJbWFyZ2luLXRvcDogNHB4OwoJbWFyZ2luLWJvdHRvbTogNHB4OwoJbWluLWhlaWdodDogNTVweDsKfQpsYWJlbCB7CglmbG9hdDogbGVmdDsKCXdpZHRoOiAxNTBweDsKCW1hcmdpbi10b3A6IDdweDsKfQoudG9nZ2xlIHsKCWN1cnNvcjogcG9pbnRlcjsKfQoudG9nZ2xlZCB7CglkaXNwbGF5OiBub25lOwoJYm9yZGVyOiAxcHggc29saWQgI0NDQ0NDQzsKCW1hcmdpbjogNHB4OwoJcGFkZGluZzogOHB4OwoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7CgktbW96LWJvcmRlci1yYWRpdXM6IDRweDsKCWJvcmRlci1yYWRpdXM6IDRweDsKfQoKI3Rvb2x0aXAgewoJcG9zaXRpb246IGFic29sdXRlOwoJei1pbmRleDogMzAwMDsKCWJvcmRlcjogMXB4IHNvbGlkICMxMTE7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZWVlOwoJcGFkZGluZzogNXB4OwoJbWF4LXdpZHRoOiAzMDBweDsKCW9wYWNpdHk6IDAuODU7Cglib3JkZXItcmFkaXVzOiA1cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDsKCS1tb3otYm9yZGVyLXJhZGl1czogNXB4Owp9CiN0b29sdGlwIGgzLCAjdG9vbHRpcCBkaXYgeyBtYXJnaW46IDA7IH0KLmxpZ2h0IHsKCWNvbG9yOiAjQUZBRkFGOwp9CiNwYl9pbXBvcnRidWRkeV93b3JraW5nIHsKCXRleHQtYWxpZ246IGNlbnRlcjsKCXBhZGRpbmctdG9wOiAyMHB4Owp9CgovKiBUYWJzCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoudWktdGFicyB7IGJvcmRlci10b3A6IDFweCBzb2xpZCAjREZERkRGOyBtYXJnaW4tdG9wOiAyMHB4OyB9IC8qIHBhZGRpbmc6IC4yZW07IHpvb206IDE7ICovCi51aS10YWJzIC51aS10YWJzLW5hdiB7IHotaW5kZXg6IDE1OyBsaXN0LXN0eWxlOiBub25lOyBwb3NpdGlvbjogcmVsYXRpdmU7IHBhZGRpbmc6IDBweCAwcHggMHB4OyBtYXJnaW4tdG9wOiAtMTVweDsgbWFyZ2luLWxlZnQ6IDEwcHg7IH0KLnVpLXRhYnMgLnVpLXRhYnMtbmF2IGxpIHsgbWFyZ2luOiAtMTFweCAzcHggLTFweCAwcHg7IHBvc2l0aW9uOiByZWxhdGl2ZTsgZmxvYXQ6IGxlZnQ7IHBhZGRpbmc6IDA7IHRleHQtYWxpZ246IGNlbnRlcjsgfQoudWktdGFicyAudWktdGFicy1uYXYgbGkgYSB7IGJhY2tncm91bmQtY29sb3I6ICNFREVERUQ7IGhlaWdodDogMTlweDsgZmxvYXQ6IGxlZnQ7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgcGFkZGluZy1sZWZ0OiAxMHB4OyBwYWRkaW5nLXJpZ2h0OiAxMHB4OyAtbW96LWJvcmRlci1yYWRpdXM6IDEwcHggMTBweCAwcHggMHB4OyAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDEwcHggMTBweCAwcHggMHB4OyBib3JkZXI6IDFweCBzb2xpZCAjREZERkRGOyBvdXRsaW5lOiBub25lOyBwYWRkaW5nLXRvcDogNXB4OyB9Ci51aS10YWJzIC51aS10YWJzLW5hdiBsaSBhOmhvdmVyIHsgYmFja2dyb3VuZC1jb2xvcjogI0RGREZERjsgfQoudWktdGFicyAudWktdGFicy1uYXYgbGkudWktdGFicy1zZWxlY3RlZCB7ICB9IC8qIHBhZGRpbmctYm90dG9tOiAwcHg7ICovCi51aS10YWJzIC51aS10YWJzLW5hdiBsaS51aS10YWJzLXNlbGVjdGVkIGEsIC51aS10YWJzIC51aS10YWJzLW5hdiBsaS51aS1zdGF0ZS1kaXNhYmxlZCBhLCAudWktdGFicyAudWktdGFicy1uYXYgbGkudWktc3RhdGUtcHJvY2Vzc2luZyBhIHsgaGVpZ2h0OiAyMHB4OyBjdXJzb3I6IHRleHQ7IGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7IGZvbnQtd2VpZ2h0OiBib2xkOyBib3JkZXItYm90dG9tOiAwcHg7IGNvbG9yOiAjMzMzMzMzOyB9Ci51aS10YWJzIC51aS10YWJzLW5hdiBsaSBhLCAudWktdGFicy51aS10YWJzLWNvbGxhcHNpYmxlIC51aS10YWJzLW5hdiBsaS51aS10YWJzLXNlbGVjdGVkIGEgeyBjdXJzb3I6IHBvaW50ZXI7IH0gLyogZmlyc3Qgc2VsZWN0b3IgaW4gZ3JvdXAgc2VlbXMgb2Jzb2xldGUsIGJ1dCByZXF1aXJlZCB0byBvdmVyY29tZSBidWcgaW4gT3BlcmEgYXBwbHlpbmcgY3Vyc29yOiB0ZXh0IG92ZXJhbGwgaWYgZGVmaW5lZCBlbHNld2hlcmUuLi4gKi8KLnVpLXRhYnMgLnVpLXRhYnMtcGFuZWwgeyBwYWRkaW5nLXRvcDogM3B4OyBkaXNwbGF5OiBibG9jazsgYm9yZGVyLXdpZHRoOiAwOyBiYWNrZ3JvdW5kOiBub25lOyB9Ci51aS10YWJzIC51aS10YWJzLWhpZGUgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0KLnRhYnMtaXRlbSB7CglwYWRkaW5nOiAxNnB4OwoJcGFkZGluZy10b3A6IDI4cHg7CglwYWRkaW5nLWJvdHRvbTogMjhweDsKCWJhY2tncm91bmQ6ICNGRkZGRkY7Cn0=
###PACKDATA,FILE_END,/importbuddy/css/style.css,importbuddy/css/style.css
###PACKDATA,FILE_START,/importbuddy/images/alert.png,importbuddy/images/alert.png

###PACKDATA,FILE_END,/importbuddy/images/alert.png,importbuddy/images/alert.png
###PACKDATA,FILE_START,/importbuddy/images/working.gif,importbuddy/images/working.gif
R0lGODlhKwALAPEAAPn5+SiKt5LC2CiKtyH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAKwALAAACMoSOCMuW2diD88UKG95W88uF4DaGWFmhZid93pq+pwxnLUnXh8ou+sSz+T64oCAyTBUAACH5BAkKAAAALAAAAAArAAsAAAI9xI4IyyAPYWOxmoTHrHzzmGHe94xkmJifyqFKQ0pwLLgHa82xrekkDrIBZRQab1jyfY7KTtPimixiUsevAAAh+QQJCgAAACwAAAAAKwALAAACPYSOCMswD2FjqZpqW9xv4g8KE7d54XmMpNSgqLoOpgvC60xjNonnyc7p+VKamKw1zDCMR8rp8pksYlKorgAAIfkECQoAAAAsAAAAACsACwAAAkCEjgjLltnYmJS6Bxt+sfq5ZUyoNJ9HHlEqdCfFrqn7DrE2m7Wdj/2y45FkQ13t5itKdshFExC8YCLOEBX6AhQAADsAAAAAAAAAAAA=
###PACKDATA,FILE_END,/importbuddy/images/working.gif,importbuddy/images/working.gif
###PACKDATA,FILE_START,/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeSh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXsKCQlpZiAoIGpRdWVyeSgnI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmcnKS5pcygnOnZpc2libGUnKSApIHsKCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfd29ya2luZycpLnJlcGxhY2VXaXRoKAoJCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfYmxhbmthbGVydCcpLmh0bWwoKS5yZXBsYWNlKCAnI1RJVExFIycsICdQSFAgVGltZW91dCBvciBGYXRhbCBFcnJvciBPY2N1cnJlZCcgKS5yZXBsYWNlKCAnI01FU1NBR0UjJywgJ1RoZSBwYWdlIGRpZCBub3QgZmluaXNoIGxvYWRpbmcgYXMgZXhwZWN0ZWQuICBUaGUgbW9zdCBjb21tb24gY2F1c2UgZm9yIHRoaXMgaXMgdGhlIFBIUCBwcm9jZXNzIHRha2luZyBtb3JlIHRpbWUgdGhhbiBpdCBoYXMgYmVlbiBhbGxvd2VkIGJ5IHlvdXIgaG9zdCAocGhwLmluaSBzZXR0aW5nIDxpPm1heF9leGVjdXRpb25fdGltZTwvaT4pLiBJZiBhIFBIUCBlcnJvciBpcyBkaXNwbGF5ZWQgYWJvdmUgdGhpcyBjYW4gYWxzbyBjYXVzZSB0aGlzIGVycm9yLicgKQoJCQkpOwoJCX0KCX0pOwp9KTsKCmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CglqUXVlcnkoJy5wbHVnaW5idWRkeV90aXAnKS50b29sdGlwKHsKCQl0cmFjazogdHJ1ZSwKCQlkZWxheTogMCwKCQlzaG93VVJMOiBmYWxzZSwKCQlzaG93Qm9keTogIiAtICIsCgkJZmFkZTogMjUwCgl9KTsKCQoJalF1ZXJ5KCcudG9nZ2xlJykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWpRdWVyeSggJyN0b2dnbGUtJyArIGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpICkuc2xpZGVUb2dnbGUoKTsKCX0pOwoJCglqUXVlcnkoJy5vcHRpb25fdG9nZ2xlJykuY2hhbmdlKGZ1bmN0aW9uKGUpIHsKCQlpZiAoalF1ZXJ5KHRoaXMpLmF0dHIoJ2NoZWNrZWQnKSkgewoJCQlqUXVlcnkoJy4nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKyAnX3RvZ2dsZScgKS5zbGlkZVRvZ2dsZSgpOwoJCX0gZWxzZSB7CgkJCWpRdWVyeSgnLicgKyBqUXVlcnkodGhpcykuYXR0cignaWQnKSArICdfdG9nZ2xlJyApLnNsaWRlVG9nZ2xlKCk7CgkJfQoJfSk7CgkKCWpRdWVyeSgnI2l0aGVtZXNfbXlzcWxfdGVzdCcpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKCQlqUXVlcnkoJyNpdGhlbWVzX2xvYWRpbmcnKS5zbGlkZURvd24oKTsKCQlqUXVlcnkoJyNpdGhlbWVzX2xvYWRpbmcnKS5odG1sKCAnPGltZyBzcmM9Ij9lemltZz1sb2FkaW5nLmdpZiIgd2lkdGg9IjE2IiBoZWlnaHQ9IjExIj4gTG9hZGluZyDigKYnICk7CgkJalF1ZXJ5LnBvc3QoJ2ltcG9ydGJ1ZGR5LnBocCcsIHsgYWN0aW9uOiAibXlzcWxfdGVzdCIsIHNlcnZlcjogalF1ZXJ5KCcjbXlzcWxfc2VydmVyJykudmFsKCksIG5hbWU6IGpRdWVyeSgnI215c3FsX25hbWUnKS52YWwoKSwgdXNlcjogalF1ZXJ5KCcjbXlzcWxfdXNlcicpLnZhbCgpLCBwYXNzOiBqUXVlcnkoJyNteXNxbF9wYXNzd29yZCcpLnZhbCgpLCBwcmVmaXg6IGpRdWVyeSgnI215c3FsX3ByZWZpeCcpLnZhbCgpLCB3aXBlX2RhdGFiYXNlOiBqUXVlcnkoJ3dpcGVfZGF0YWJhc2UnKS52YWwoKSB9LCAKCQkJZnVuY3Rpb24oZGF0YSkgewoJCQkJLy9hbGVydChkYXRhKTsKCQkJCWpRdWVyeSgnI2l0aGVtZXNfbG9hZGluZycpLmh0bWwoIGRhdGEgKTsKCQkJCS8qCgkJCQlpZiAoZGF0YS5zdGF0dXMhPScxJykgewoJCQkJCWFsZXJ0KCdFcnJvciBTYXZpbmcgQ2hhbmdlczogJytkYXRhLm1zZyk7CgkJCQl9CgkJCQlqUXVlcnkoJyNpdGhlbWVzX2xvYWRpbmcnKS5odG1sKCBkYXRhICk7CgkJCQkqLwoJCQl9CgkJKTsgLy8sImpzb24iKTsKCQlyZXR1cm4gZmFsc2U7Cgl9KTsKCQoJalF1ZXJ5KCcjcGx1Z2luYnVkZHktdGFicycpLnRhYnMoKTsKfSk7
###PACKDATA,FILE_END,/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
###PACKDATA,FILE_START,/importbuddy/js/jquery.js,importbuddy/js/jquery.js

###PACKDATA,FILE_END,/importbuddy/js/jquery.js,importbuddy/js/jquery.js
###PACKDATA,FILE_START,/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
LyoKICogalF1ZXJ5IFRvb2x0aXAgcGx1Z2luIDEuMwogKgogKiBodHRwOi8vYmFzc2lzdGFuY2UuZGUvanF1ZXJ5LXBsdWdpbnMvanF1ZXJ5LXBsdWdpbi10b29sdGlwLwogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1BsdWdpbnMvVG9vbHRpcAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDA4IErDtnJuIFphZWZmZXJlcgogKgogKiAkSWQ6IGpxdWVyeS50b29sdGlwLmpzIDU3NDEgMjAwOC0wNi0yMSAxNToyMjoxNlogam9lcm4uemFlZmZlcmVyICQKICogCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sCiAqLzsoZnVuY3Rpb24oJCl7dmFyIGhlbHBlcj17fSxjdXJyZW50LHRpdGxlLHRJRCxJRT0kLmJyb3dzZXIubXNpZSYmL01TSUVccyg1XC41fDZcLikvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdHJhY2s9ZmFsc2U7JC50b29sdGlwPXtibG9ja2VkOmZhbHNlLGRlZmF1bHRzOntkZWxheToyMDAsZmFkZTpmYWxzZSxzaG93VVJMOnRydWUsZXh0cmFDbGFzczoiIix0b3A6MTUsbGVmdDoxNSxpZDoidG9vbHRpcCJ9LGJsb2NrOmZ1bmN0aW9uKCl7JC50b29sdGlwLmJsb2NrZWQ9ISQudG9vbHRpcC5ibG9ja2VkO319OyQuZm4uZXh0ZW5kKHt0b29sdGlwOmZ1bmN0aW9uKHNldHRpbmdzKXtzZXR0aW5ncz0kLmV4dGVuZCh7fSwkLnRvb2x0aXAuZGVmYXVsdHMsc2V0dGluZ3MpO2NyZWF0ZUhlbHBlcihzZXR0aW5ncyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQuZGF0YSh0aGlzLCJ0b29sdGlwIixzZXR0aW5ncyk7dGhpcy50T3BhY2l0eT1oZWxwZXIucGFyZW50LmNzcygib3BhY2l0eSIpO3RoaXMudG9vbHRpcFRleHQ9dGhpcy50aXRsZTskKHRoaXMpLnJlbW92ZUF0dHIoInRpdGxlIik7dGhpcy5hbHQ9IiI7fSkubW91c2VvdmVyKHNhdmUpLm1vdXNlb3V0KGhpZGUpLmNsaWNrKGhpZGUpO30sZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpbWFnZT0kKHRoaXMpLmNzcygnYmFja2dyb3VuZEltYWdlJyk7aWYoaW1hZ2UubWF0Y2goL151cmxcKFsiJ10/KC4qXC5wbmcpWyInXT9cKSQvaSkpe2ltYWdlPVJlZ0V4cC4kMTskKHRoaXMpLmNzcyh7J2JhY2tncm91bmRJbWFnZSc6J25vbmUnLCdmaWx0ZXInOiJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihlbmFibGVkPXRydWUsIHNpemluZ01ldGhvZD1jcm9wLCBzcmM9JyIraW1hZ2UrIicpIn0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcG9zaXRpb249JCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJyk7aWYocG9zaXRpb24hPSdhYnNvbHV0ZScmJnBvc2l0aW9uIT0ncmVsYXRpdmUnKSQodGhpcykuY3NzKCdwb3NpdGlvbicsJ3JlbGF0aXZlJyk7fSk7fX0pO306ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LHVuZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcykuY3NzKHsnZmlsdGVyJzonJyxiYWNrZ3JvdW5kSW1hZ2U6Jyd9KTt9KTt9OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxoaWRlV2hlbkVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcylbJCh0aGlzKS5odG1sKCk/InNob3ciOiJoaWRlIl0oKTt9KTt9LHVybDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoJ2hyZWYnKXx8dGhpcy5hdHRyKCdzcmMnKTt9fSk7ZnVuY3Rpb24gY3JlYXRlSGVscGVyKHNldHRpbmdzKXtpZihoZWxwZXIucGFyZW50KXJldHVybjtoZWxwZXIucGFyZW50PSQoJzxkaXYgaWQ9Iicrc2V0dGluZ3MuaWQrJyI+PGgzPjwvaDM+PGRpdiBjbGFzcz0iYm9keSI+PC9kaXY+PGRpdiBjbGFzcz0idXJsIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5oaWRlKCk7aWYoJC5mbi5iZ2lmcmFtZSloZWxwZXIucGFyZW50LmJnaWZyYW1lKCk7aGVscGVyLnRpdGxlPSQoJ2gzJyxoZWxwZXIucGFyZW50KTtoZWxwZXIuYm9keT0kKCdkaXYuYm9keScsaGVscGVyLnBhcmVudCk7aGVscGVyLnVybD0kKCdkaXYudXJsJyxoZWxwZXIucGFyZW50KTt9ZnVuY3Rpb24gc2V0dGluZ3MoZWxlbWVudCl7cmV0dXJuICQuZGF0YShlbGVtZW50LCJ0b29sdGlwIik7fWZ1bmN0aW9uIGhhbmRsZShldmVudCl7aWYoc2V0dGluZ3ModGhpcykuZGVsYXkpdElEPXNldFRpbWVvdXQoc2hvdyxzZXR0aW5ncyh0aGlzKS5kZWxheSk7ZWxzZQpzaG93KCk7dHJhY2s9ISFzZXR0aW5ncyh0aGlzKS50cmFjazskKGRvY3VtZW50LmJvZHkpLmJpbmQoJ21vdXNlbW92ZScsdXBkYXRlKTt1cGRhdGUoZXZlbnQpO31mdW5jdGlvbiBzYXZlKCl7aWYoJC50b29sdGlwLmJsb2NrZWR8fHRoaXM9PWN1cnJlbnR8fCghdGhpcy50b29sdGlwVGV4dCYmIXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyKSlyZXR1cm47Y3VycmVudD10aGlzO3RpdGxlPXRoaXMudG9vbHRpcFRleHQ7aWYoc2V0dGluZ3ModGhpcykuYm9keUhhbmRsZXIpe2hlbHBlci50aXRsZS5oaWRlKCk7dmFyIGJvZHlDb250ZW50PXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyLmNhbGwodGhpcyk7aWYoYm9keUNvbnRlbnQubm9kZVR5cGV8fGJvZHlDb250ZW50LmpxdWVyeSl7aGVscGVyLmJvZHkuZW1wdHkoKS5hcHBlbmQoYm9keUNvbnRlbnQpfWVsc2V7aGVscGVyLmJvZHkuaHRtbChib2R5Q29udGVudCk7fWhlbHBlci5ib2R5LnNob3coKTt9ZWxzZSBpZihzZXR0aW5ncyh0aGlzKS5zaG93Qm9keSl7dmFyIHBhcnRzPXRpdGxlLnNwbGl0KHNldHRpbmdzKHRoaXMpLnNob3dCb2R5KTtoZWxwZXIudGl0bGUuaHRtbChwYXJ0cy5zaGlmdCgpKS5zaG93KCk7aGVscGVyLmJvZHkuZW1wdHkoKTtmb3IodmFyIGk9MCxwYXJ0OyhwYXJ0PXBhcnRzW2ldKTtpKyspe2lmKGk+MCloZWxwZXIuYm9keS5hcHBlbmQoIjxici8+Iik7aGVscGVyLmJvZHkuYXBwZW5kKHBhcnQpO31oZWxwZXIuYm9keS5oaWRlV2hlbkVtcHR5KCk7fWVsc2V7aGVscGVyLnRpdGxlLmh0bWwodGl0bGUpLnNob3coKTtoZWxwZXIuYm9keS5oaWRlKCk7fWlmKHNldHRpbmdzKHRoaXMpLnNob3dVUkwmJiQodGhpcykudXJsKCkpaGVscGVyLnVybC5odG1sKCQodGhpcykudXJsKCkucmVwbGFjZSgnaHR0cDovLycsJycpKS5zaG93KCk7ZWxzZQpoZWxwZXIudXJsLmhpZGUoKTtoZWxwZXIucGFyZW50LmFkZENsYXNzKHNldHRpbmdzKHRoaXMpLmV4dHJhQ2xhc3MpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LmZpeFBORygpO2hhbmRsZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIHNob3coKXt0SUQ9bnVsbDtpZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnNldHRpbmdzKGN1cnJlbnQpLmZhZGUpe2lmKGhlbHBlci5wYXJlbnQuaXMoIjphbmltYXRlZCIpKWhlbHBlci5wYXJlbnQuc3RvcCgpLnNob3coKS5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTtlbHNlCmhlbHBlci5wYXJlbnQuaXMoJzp2aXNpYmxlJyk/aGVscGVyLnBhcmVudC5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTpoZWxwZXIucGFyZW50LmZhZGVJbihzZXR0aW5ncyhjdXJyZW50KS5mYWRlKTt9ZWxzZXtoZWxwZXIucGFyZW50LnNob3coKTt9dXBkYXRlKCk7fWZ1bmN0aW9uIHVwZGF0ZShldmVudCl7aWYoJC50b29sdGlwLmJsb2NrZWQpcmV0dXJuO2lmKGV2ZW50JiZldmVudC50YXJnZXQudGFnTmFtZT09Ik9QVElPTiIpe3JldHVybjt9aWYoIXRyYWNrJiZoZWxwZXIucGFyZW50LmlzKCI6dmlzaWJsZSIpKXskKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlJyx1cGRhdGUpfWlmKGN1cnJlbnQ9PW51bGwpeyQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7cmV0dXJuO31oZWxwZXIucGFyZW50LnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1yaWdodCIpLnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt2YXIgbGVmdD1oZWxwZXIucGFyZW50WzBdLm9mZnNldExlZnQ7dmFyIHRvcD1oZWxwZXIucGFyZW50WzBdLm9mZnNldFRvcDtpZihldmVudCl7bGVmdD1ldmVudC5wYWdlWCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O3RvcD1ldmVudC5wYWdlWStzZXR0aW5ncyhjdXJyZW50KS50b3A7dmFyIHJpZ2h0PSdhdXRvJztpZihzZXR0aW5ncyhjdXJyZW50KS5wb3NpdGlvbkxlZnQpe3JpZ2h0PSQod2luZG93KS53aWR0aCgpLWxlZnQ7bGVmdD0nYXV0byc7fWhlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQscmlnaHQ6cmlnaHQsdG9wOnRvcH0pO312YXIgdj12aWV3cG9ydCgpLGg9aGVscGVyLnBhcmVudFswXTtpZih2Lngrdi5jeDxoLm9mZnNldExlZnQraC5vZmZzZXRXaWR0aCl7bGVmdC09aC5vZmZzZXRXaWR0aCsyMCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O2hlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQrJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1yaWdodCIpO31pZih2Lnkrdi5jeTxoLm9mZnNldFRvcCtoLm9mZnNldEhlaWdodCl7dG9wLT1oLm9mZnNldEhlaWdodCsyMCtzZXR0aW5ncyhjdXJyZW50KS50b3A7aGVscGVyLnBhcmVudC5jc3Moe3RvcDp0b3ArJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt9fWZ1bmN0aW9uIHZpZXdwb3J0KCl7cmV0dXJue3g6JCh3aW5kb3cpLnNjcm9sbExlZnQoKSx5OiQod2luZG93KS5zY3JvbGxUb3AoKSxjeDokKHdpbmRvdykud2lkdGgoKSxjeTokKHdpbmRvdykuaGVpZ2h0KCl9O31mdW5jdGlvbiBoaWRlKGV2ZW50KXtpZigkLnRvb2x0aXAuYmxvY2tlZClyZXR1cm47aWYodElEKWNsZWFyVGltZW91dCh0SUQpO2N1cnJlbnQ9bnVsbDt2YXIgdHNldHRpbmdzPXNldHRpbmdzKHRoaXMpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aGVscGVyLnBhcmVudC5yZW1vdmVDbGFzcyh0c2V0dGluZ3MuZXh0cmFDbGFzcykuaGlkZSgpLmNzcygib3BhY2l0eSIsIiIpO31pZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnRzZXR0aW5ncy5mYWRlKXtpZihoZWxwZXIucGFyZW50LmlzKCc6YW5pbWF0ZWQnKSloZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlVG8odHNldHRpbmdzLmZhZGUsMCxjb21wbGV0ZSk7ZWxzZQpoZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlT3V0KHRzZXR0aW5ncy5mYWRlLGNvbXBsZXRlKTt9ZWxzZQpjb21wbGV0ZSgpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LnVuZml4UE5HKCk7fX0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
###PACKDATA,FILE_START,/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
LyohCiAqIGpRdWVyeSBVSSAxLjguMTIKICoKICogQ29weXJpZ2h0IDIwMTEsIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJCiAqLwooZnVuY3Rpb24oYyxqKXtmdW5jdGlvbiBrKGEpe3JldHVybiFjKGEpLnBhcmVudHMoKS5hbmRTZWxmKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIGMuY3VyQ1NTKHRoaXMsInZpc2liaWxpdHkiKT09PSJoaWRkZW4ifHxjLmV4cHIuZmlsdGVycy5oaWRkZW4odGhpcyl9KS5sZW5ndGh9Yy51aT1jLnVpfHx7fTtpZighYy51aS52ZXJzaW9uKXtjLmV4dGVuZChjLnVpLHt2ZXJzaW9uOiIxLjguMTIiLGtleUNvZGU6e0FMVDoxOCxCQUNLU1BBQ0U6OCxDQVBTX0xPQ0s6MjAsQ09NTUE6MTg4LENPTU1BTkQ6OTEsQ09NTUFORF9MRUZUOjkxLENPTU1BTkRfUklHSFQ6OTMsQ09OVFJPTDoxNyxERUxFVEU6NDYsRE9XTjo0MCxFTkQ6MzUsRU5URVI6MTMsRVNDQVBFOjI3LEhPTUU6MzYsSU5TRVJUOjQ1LExFRlQ6MzcsTUVOVTo5MyxOVU1QQURfQUREOjEwNyxOVU1QQURfREVDSU1BTDoxMTAsTlVNUEFEX0RJVklERToxMTEsTlVNUEFEX0VOVEVSOjEwOCxOVU1QQURfTVVMVElQTFk6MTA2LApOVU1QQURfU1VCVFJBQ1Q6MTA5LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU0hJRlQ6MTYsU1BBQ0U6MzIsVEFCOjksVVA6MzgsV0lORE9XUzo5MX19KTtjLmZuLmV4dGVuZCh7X2ZvY3VzOmMuZm4uZm9jdXMsZm9jdXM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdHlwZW9mIGE9PT0ibnVtYmVyIj90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjKGQpLmZvY3VzKCk7YiYmYi5jYWxsKGQpfSxhKX0pOnRoaXMuX2ZvY3VzLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sc2Nyb2xsUGFyZW50OmZ1bmN0aW9uKCl7dmFyIGE7YT1jLmJyb3dzZXIubXNpZSYmLyhzdGF0aWN8cmVsYXRpdmUpLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKXx8L2Fic29sdXRlLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKT90aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4vKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8udGVzdChjLmN1ckNTUyh0aGlzLAoicG9zaXRpb24iLDEpKSYmLyhhdXRvfHNjcm9sbCkvLnRlc3QoYy5jdXJDU1ModGhpcywib3ZlcmZsb3ciLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXkiLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXgiLDEpKX0pLmVxKDApOnRoaXMucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybi8oYXV0b3xzY3JvbGwpLy50ZXN0KGMuY3VyQ1NTKHRoaXMsIm92ZXJmbG93IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy15IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy14IiwxKSl9KS5lcSgwKTtyZXR1cm4vZml4ZWQvLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpfHwhYS5sZW5ndGg/Yyhkb2N1bWVudCk6YX0sekluZGV4OmZ1bmN0aW9uKGEpe2lmKGEhPT1qKXJldHVybiB0aGlzLmNzcygiekluZGV4IixhKTtpZih0aGlzLmxlbmd0aCl7YT1jKHRoaXNbMF0pO2Zvcih2YXIgYjthLmxlbmd0aCYmYVswXSE9PWRvY3VtZW50Oyl7Yj1hLmNzcygicG9zaXRpb24iKTsKaWYoYj09PSJhYnNvbHV0ZSJ8fGI9PT0icmVsYXRpdmUifHxiPT09ImZpeGVkIil7Yj1wYXJzZUludChhLmNzcygiekluZGV4IiksMTApO2lmKCFpc05hTihiKSYmYiE9PTApcmV0dXJuIGJ9YT1hLnBhcmVudCgpfX1yZXR1cm4gMH0sZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJpbmQoKGMuc3VwcG9ydC5zZWxlY3RzdGFydD8ic2VsZWN0c3RhcnQiOiJtb3VzZWRvd24iKSsiLnVpLWRpc2FibGVTZWxlY3Rpb24iLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKX0pfSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bmJpbmQoIi51aS1kaXNhYmxlU2VsZWN0aW9uIil9fSk7Yy5lYWNoKFsiV2lkdGgiLCJIZWlnaHQiXSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGQoZixnLGwsbSl7Yy5lYWNoKGUsZnVuY3Rpb24oKXtnLT1wYXJzZUZsb2F0KGMuY3VyQ1NTKGYsInBhZGRpbmciK3RoaXMsdHJ1ZSkpfHwwO2lmKGwpZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLAoiYm9yZGVyIit0aGlzKyJXaWR0aCIsdHJ1ZSkpfHwwO2lmKG0pZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLCJtYXJnaW4iK3RoaXMsdHJ1ZSkpfHwwfSk7cmV0dXJuIGd9dmFyIGU9Yj09PSJXaWR0aCI/WyJMZWZ0IiwiUmlnaHQiXTpbIlRvcCIsIkJvdHRvbSJdLGg9Yi50b0xvd2VyQ2FzZSgpLGk9e2lubmVyV2lkdGg6Yy5mbi5pbm5lcldpZHRoLGlubmVySGVpZ2h0OmMuZm4uaW5uZXJIZWlnaHQsb3V0ZXJXaWR0aDpjLmZuLm91dGVyV2lkdGgsb3V0ZXJIZWlnaHQ6Yy5mbi5vdXRlckhlaWdodH07Yy5mblsiaW5uZXIiK2JdPWZ1bmN0aW9uKGYpe2lmKGY9PT1qKXJldHVybiBpWyJpbm5lciIrYl0uY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCxkKHRoaXMsZikrInB4Iil9KX07Yy5mblsib3V0ZXIiK2JdPWZ1bmN0aW9uKGYsZyl7aWYodHlwZW9mIGYhPT0ibnVtYmVyIilyZXR1cm4gaVsib3V0ZXIiK2JdLmNhbGwodGhpcyxmKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCwKZCh0aGlzLGYsdHJ1ZSxnKSsicHgiKX0pfX0pO2MuZXh0ZW5kKGMuZXhwclsiOiJdLHtkYXRhOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4hIWMuZGF0YShhLGRbM10pfSxmb2N1c2FibGU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLGQ9Yy5hdHRyKGEsInRhYmluZGV4Iik7aWYoImFyZWEiPT09Yil7Yj1hLnBhcmVudE5vZGU7ZD1iLm5hbWU7aWYoIWEuaHJlZnx8IWR8fGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSE9PSJtYXAiKXJldHVybiBmYWxzZTthPWMoImltZ1t1c2VtYXA9IyIrZCsiXSIpWzBdO3JldHVybiEhYSYmayhhKX1yZXR1cm4oL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KGIpPyFhLmRpc2FibGVkOiJhIj09Yj9hLmhyZWZ8fCFpc05hTihkKTohaXNOYU4oZCkpJiZrKGEpfSx0YWJiYWJsZTpmdW5jdGlvbihhKXt2YXIgYj1jLmF0dHIoYSwidGFiaW5kZXgiKTtyZXR1cm4oaXNOYU4oYil8fGI+PTApJiZjKGEpLmlzKCI6Zm9jdXNhYmxlIil9fSk7CmMoZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5ib2R5LGI9YS5hcHBlbmRDaGlsZChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtjLmV4dGVuZChiLnN0eWxlLHttaW5IZWlnaHQ6IjEwMHB4IixoZWlnaHQ6ImF1dG8iLHBhZGRpbmc6MCxib3JkZXJXaWR0aDowfSk7Yy5zdXBwb3J0Lm1pbkhlaWdodD1iLm9mZnNldEhlaWdodD09PTEwMDtjLnN1cHBvcnQuc2VsZWN0c3RhcnQ9Im9uc2VsZWN0c3RhcnQiaW4gYjthLnJlbW92ZUNoaWxkKGIpLnN0eWxlLmRpc3BsYXk9Im5vbmUifSk7Yy5leHRlbmQoYy51aSx7cGx1Z2luOnthZGQ6ZnVuY3Rpb24oYSxiLGQpe2E9Yy51aVthXS5wcm90b3R5cGU7Zm9yKHZhciBlIGluIGQpe2EucGx1Z2luc1tlXT1hLnBsdWdpbnNbZV18fFtdO2EucGx1Z2luc1tlXS5wdXNoKFtiLGRbZV1dKX19LGNhbGw6ZnVuY3Rpb24oYSxiLGQpe2lmKChiPWEucGx1Z2luc1tiXSkmJmEuZWxlbWVudFswXS5wYXJlbnROb2RlKWZvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKWEub3B0aW9uc1tiW2VdWzBdXSYmCmJbZV1bMV0uYXBwbHkoYS5lbGVtZW50LGQpfX0sY29udGFpbnM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZG9jdW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNjphIT09YiYmYS5jb250YWlucyhiKX0saGFzU2Nyb2xsOmZ1bmN0aW9uKGEsYil7aWYoYyhhKS5jc3MoIm92ZXJmbG93Iik9PT0iaGlkZGVuIilyZXR1cm4gZmFsc2U7Yj1iJiZiPT09ImxlZnQiPyJzY3JvbGxMZWZ0Ijoic2Nyb2xsVG9wIjt2YXIgZD1mYWxzZTtpZihhW2JdPjApcmV0dXJuIHRydWU7YVtiXT0xO2Q9YVtiXT4wO2FbYl09MDtyZXR1cm4gZH0saXNPdmVyQXhpczpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGE+YiYmYTxiK2R9LGlzT3ZlcjpmdW5jdGlvbihhLGIsZCxlLGgsaSl7cmV0dXJuIGMudWkuaXNPdmVyQXhpcyhhLGQsaCkmJmMudWkuaXNPdmVyQXhpcyhiLGUsaSl9fSl9fSkoalF1ZXJ5KTs=
###PACKDATA,FILE_END,/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
###PACKDATA,FILE_START,/importbuddy/js/ui.tabs.js,importbuddy/js/ui.tabs.js

###PACKDATA,FILE_END,/importbuddy/js/ui.tabs.js,importbuddy/js/ui.tabs.js
###PACKDATA,FILE_START,/importbuddy/js/ui.widget.js,importbuddy/js/ui.widget.js
LyohCiAqIGpRdWVyeSBVSSBXaWRnZXQgMS44LjEyCiAqCiAqIENvcHlyaWdodCAyMDExLCBBVVRIT1JTLnR4dCAoaHR0cDovL2pxdWVyeXVpLmNvbS9hYm91dCkKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VSS9XaWRnZXQKICovCihmdW5jdGlvbihiLGope2lmKGIuY2xlYW5EYXRhKXt2YXIgaz1iLmNsZWFuRGF0YTtiLmNsZWFuRGF0YT1mdW5jdGlvbihhKXtmb3IodmFyIGM9MCxkOyhkPWFbY10pIT1udWxsO2MrKyliKGQpLnRyaWdnZXJIYW5kbGVyKCJyZW1vdmUiKTtrKGEpfX1lbHNle3ZhciBsPWIuZm4ucmVtb3ZlO2IuZm4ucmVtb3ZlPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2lmKCFjKWlmKCFhfHxiLmZpbHRlcihhLFt0aGlzXSkubGVuZ3RoKWIoIioiLHRoaXMpLmFkZChbdGhpc10pLmVhY2goZnVuY3Rpb24oKXtiKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCJyZW1vdmUiKX0pO3JldHVybiBsLmNhbGwoYih0aGlzKSxhLGMpfSl9fWIud2lkZ2V0PWZ1bmN0aW9uKGEsYyxkKXt2YXIgZT1hLnNwbGl0KCIuIilbMF0sZjthPWEuc3BsaXQoIi4iKVsxXTtmPWUrIi0iK2E7aWYoIWQpe2Q9YztjPWIuV2lkZ2V0fWIuZXhwclsiOiJdW2ZdPWZ1bmN0aW9uKGgpe3JldHVybiEhYi5kYXRhKGgsCmEpfTtiW2VdPWJbZV18fHt9O2JbZV1bYV09ZnVuY3Rpb24oaCxnKXthcmd1bWVudHMubGVuZ3RoJiZ0aGlzLl9jcmVhdGVXaWRnZXQoaCxnKX07Yz1uZXcgYztjLm9wdGlvbnM9Yi5leHRlbmQodHJ1ZSx7fSxjLm9wdGlvbnMpO2JbZV1bYV0ucHJvdG90eXBlPWIuZXh0ZW5kKHRydWUsYyx7bmFtZXNwYWNlOmUsd2lkZ2V0TmFtZTphLHdpZGdldEV2ZW50UHJlZml4OmJbZV1bYV0ucHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4fHxhLHdpZGdldEJhc2VDbGFzczpmfSxkKTtiLndpZGdldC5icmlkZ2UoYSxiW2VdW2FdKX07Yi53aWRnZXQuYnJpZGdlPWZ1bmN0aW9uKGEsYyl7Yi5mblthXT1mdW5jdGlvbihkKXt2YXIgZT10eXBlb2YgZD09PSJzdHJpbmciLGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGg9dGhpcztkPSFlJiZmLmxlbmd0aD9iLmV4dGVuZC5hcHBseShudWxsLFt0cnVlLGRdLmNvbmNhdChmKSk6ZDtpZihlJiZkLmNoYXJBdCgwKT09PSJfIilyZXR1cm4gaDsKZT90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZz1iLmRhdGEodGhpcyxhKSxpPWcmJmIuaXNGdW5jdGlvbihnW2RdKT9nW2RdLmFwcGx5KGcsZik6ZztpZihpIT09ZyYmaSE9PWope2g9aTtyZXR1cm4gZmFsc2V9fSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGc9Yi5kYXRhKHRoaXMsYSk7Zz9nLm9wdGlvbihkfHx7fSkuX2luaXQoKTpiLmRhdGEodGhpcyxhLG5ldyBjKGQsdGhpcykpfSk7cmV0dXJuIGh9fTtiLldpZGdldD1mdW5jdGlvbihhLGMpe2FyZ3VtZW50cy5sZW5ndGgmJnRoaXMuX2NyZWF0ZVdpZGdldChhLGMpfTtiLldpZGdldC5wcm90b3R5cGU9e3dpZGdldE5hbWU6IndpZGdldCIsd2lkZ2V0RXZlbnRQcmVmaXg6IiIsb3B0aW9uczp7ZGlzYWJsZWQ6ZmFsc2V9LF9jcmVhdGVXaWRnZXQ6ZnVuY3Rpb24oYSxjKXtiLmRhdGEoYyx0aGlzLndpZGdldE5hbWUsdGhpcyk7dGhpcy5lbGVtZW50PWIoYyk7dGhpcy5vcHRpb25zPWIuZXh0ZW5kKHRydWUse30sdGhpcy5vcHRpb25zLAp0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksYSk7dmFyIGQ9dGhpczt0aGlzLmVsZW1lbnQuYmluZCgicmVtb3ZlLiIrdGhpcy53aWRnZXROYW1lLGZ1bmN0aW9uKCl7ZC5kZXN0cm95KCl9KTt0aGlzLl9jcmVhdGUoKTt0aGlzLl90cmlnZ2VyKCJjcmVhdGUiKTt0aGlzLl9pbml0KCl9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7cmV0dXJuIGIubWV0YWRhdGEmJmIubWV0YWRhdGEuZ2V0KHRoaXMuZWxlbWVudFswXSlbdGhpcy53aWRnZXROYW1lXX0sX2NyZWF0ZTpmdW5jdGlvbigpe30sX2luaXQ6ZnVuY3Rpb24oKXt9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQudW5iaW5kKCIuIit0aGlzLndpZGdldE5hbWUpLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lKTt0aGlzLndpZGdldCgpLnVuYmluZCgiLiIrdGhpcy53aWRnZXROYW1lKS5yZW1vdmVBdHRyKCJhcmlhLWRpc2FibGVkIikucmVtb3ZlQ2xhc3ModGhpcy53aWRnZXRCYXNlQ2xhc3MrIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIpfSwKd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudH0sb3B0aW9uOmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YTtpZihhcmd1bWVudHMubGVuZ3RoPT09MClyZXR1cm4gYi5leHRlbmQoe30sdGhpcy5vcHRpb25zKTtpZih0eXBlb2YgYT09PSJzdHJpbmciKXtpZihjPT09ailyZXR1cm4gdGhpcy5vcHRpb25zW2FdO2Q9e307ZFthXT1jfXRoaXMuX3NldE9wdGlvbnMoZCk7cmV0dXJuIHRoaXN9LF9zZXRPcHRpb25zOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Yi5lYWNoKGEsZnVuY3Rpb24oZCxlKXtjLl9zZXRPcHRpb24oZCxlKX0pO3JldHVybiB0aGlzfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKGEsYyl7dGhpcy5vcHRpb25zW2FdPWM7aWYoYT09PSJkaXNhYmxlZCIpdGhpcy53aWRnZXQoKVtjPyJhZGRDbGFzcyI6InJlbW92ZUNsYXNzIl0odGhpcy53aWRnZXRCYXNlQ2xhc3MrIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIpLmF0dHIoImFyaWEtZGlzYWJsZWQiLGMpO3JldHVybiB0aGlzfSwKZW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldE9wdGlvbigiZGlzYWJsZWQiLGZhbHNlKX0sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXRPcHRpb24oImRpc2FibGVkIix0cnVlKX0sX3RyaWdnZXI6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPXRoaXMub3B0aW9uc1thXTtjPWIuRXZlbnQoYyk7Yy50eXBlPShhPT09dGhpcy53aWRnZXRFdmVudFByZWZpeD9hOnRoaXMud2lkZ2V0RXZlbnRQcmVmaXgrYSkudG9Mb3dlckNhc2UoKTtkPWR8fHt9O2lmKGMub3JpZ2luYWxFdmVudCl7YT1iLmV2ZW50LnByb3BzLmxlbmd0aDtmb3IodmFyIGY7YTspe2Y9Yi5ldmVudC5wcm9wc1stLWFdO2NbZl09Yy5vcmlnaW5hbEV2ZW50W2ZdfX10aGlzLmVsZW1lbnQudHJpZ2dlcihjLGQpO3JldHVybiEoYi5pc0Z1bmN0aW9uKGUpJiZlLmNhbGwodGhpcy5lbGVtZW50WzBdLGMsZCk9PT1mYWxzZXx8Yy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl9fX0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/importbuddy/js/ui.widget.js,importbuddy/js/ui.widget.js
###PACKDATA,FILE_START,/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php

###PACKDATA,FILE_END,/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php
###PACKDATA,FILE_START,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php

###PACKDATA,FILE_END,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php
###PACKDATA,FILE_START,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
MS4wLjAgLSAyMDExLTA4LTE4IC0gRHVzdGluIEJvbHRvbgoJQ3JlYXRlZCBkYnJlcGxhY2UgY2xhc3Mu
###PACKDATA,FILE_END,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
###PACKDATA,FILE_START,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
Mi4wLjAgLSAyMDExLTEwLTA4IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgaGlzdG9yeS50eHQuCglBZGRlZCB1bnppcCBmdW5jdGlvbmFsaXR5Lg==
###PACKDATA,FILE_END,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
###PACKDATA,FILE_START,/lib/zipbuddy/x-zipbuddy.php,importbuddy/lib/zipbuddy/x-zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/x-zipbuddy.php,importbuddy/lib/zipbuddy/x-zipbuddy.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php
PD9waHAKLyoqCiAqCXBsdWdpbmJ1ZGR5X3piemlwemlwYXJjaGl2ZSBDbGFzcwogKgogKiAgRXh0ZW5kcyB0aGUgemlwIGNhcGFiaWxpdHkgY29yZSBjbGFzcyB3aXRoIHByb2Mgc3BlY2lmaWMgY2FwYWJpbGl0eQogKgkKICoJVmVyc2lvbjogMS4wLjAKICoJQXV0aG9yOgogKglBdXRob3IgVVJJOgogKgogKglAcGFyYW0JCSRwYXJlbnQJCW9iamVjdAkJT3B0aW9uYWwgcGFyZW50IG9iamVjdCB3aGljaCBjYW4gcHJvdmlkZSBmdW5jdGlvbnMgZm9yIHJlcG9ydGluZywgZXRjLgogKglAcmV0dXJuCQludWxsCiAqCiAqLwppZiAoICFjbGFzc19leGlzdHMoICJwbHVnaW5idWRkeV96YnppcHppcGFyY2hpdmUiICkgKSB7CgoJY2xhc3MgcGx1Z2luYnVkZHlfemJ6aXB6aXBhcmNoaXZlIGV4dGVuZHMgcGx1Z2luYnVkZHlfemJ6aXBjb3JlIHsKCQogICAgICAgIC8qKgogICAgICAgICAqIG1ldGhvZCB0YWcgdXNlZCB0byByZWZlciB0byB0aGUgbWV0aG9kIGFuZCBlbnRpdGllcyBhc3NvY2lhdGVkIHdpdGggaXQgc3VjaCBhcyBjbGFzcyBuYW1lCiAgICAgICAgICogCiAgICAgICAgICogQHZhciAkX21ldGhvZF90YWcgCXN0cmluZwogICAgICAgICAqLwoJCXB1YmxpYyBzdGF0aWMgJF9tZXRob2RfdGFnID0gJ3ppcGFyY2hpdmUnOwoJCQkKICAgICAgICAvKioKICAgICAgICAgKiBUaGlzIHRlbGxzIHVzIHdoZXRoZXIgdGhpcyBtZXRob2QgaXMgcmVnYXJkZWQgYXMgYSAiY29tcGF0aWJpbGl0eSIgbWV0aG9kCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBib29sCiAgICAgICAgICovCgkJcHVibGljIHN0YXRpYyAkX2lzX2NvbXBhdGliaWxpdHlfbWV0aG9kID0gZmFsc2U7CgkJCQoJCS8qKgoJCSAqCV9fY29uc3RydWN0KCkKCQkgKgkKCQkgKglEZWZhdWx0IGNvbnN0cnVjdG9yLgoJCSAqCQoJCSAqCUBwYXJhbQkJcmVmZXJlbmNlCSYkcGFyZW50CQlbb3B0aW9uYWxdIFJlZmVyZW5jZSB0byB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXR1cygpIGZ1bmN0aW9uIGZvciBzdGF0dXMgdXBkYXRlcy4KCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoICYkcGFyZW50ID0gTlVMTCApIHsKCgkJCXBhcmVudDo6X19jb25zdHJ1Y3QoICRwYXJlbnQgKTsKCQkJCgkJCS8vIERlZmluZSB0aGUgaW5pdGlhbCBkZXRhaWxzCgkJCSR0aGlzLT5fbWV0aG9kX2RldGFpbHNbICdhdHRyJyBdID0gYXJyYXkoICduYW1lJyA9PiAnWmlwQXJjaGl2ZSBNZXRob2QnLCAnY29tcGF0aWJpbGl0eScgPT4gcGx1Z2luYnVkZHlfemJ6aXB6aXBhcmNoaXZlOjokX2lzX2NvbXBhdGliaWxpdHlfbWV0aG9kICk7CgkJCSR0aGlzLT5fbWV0aG9kX2RldGFpbHNbICdwYXJhbScgXSA9IGFycmF5KCAncGF0aCcgPT4gJycgKTsKCQkJCgkJfQoJCQoJCS8qKgoJCSAqCV9fZGVzdHJ1Y3QoKQoJCSAqCQoJCSAqCURlZmF1bHQgZGVzdHJ1Y3Rvci4KCQkgKgkKCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gX19kZXN0cnVjdCggKSB7CgkJCgkJCXBhcmVudDo6X19kZXN0cnVjdCgpOwoKCQl9CgkJCgkJLyoqCgkJICoJZ2V0X21ldGhvZF90YWcoKQoJCSAqCQoJCSAqCVJldHVybnMgdGhlIChzdGF0aWMpIG1ldGhvZCB0YWcKCQkgKgkKCQkgKglAcmV0dXJuCQlzdHJpbmcgVGhlIG1ldGhvZCB0YWcKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfbWV0aG9kX3RhZygpIHsKCQkKCQkJcmV0dXJuIHBsdWdpbmJ1ZGR5X3piemlwemlwYXJjaGl2ZTo6JF9tZXRob2RfdGFnOwoJCQkKCQl9CgkJCgkJLyoqCgkJICoJZ2V0X2lzX2NvbXBhdGliaWxpdHlfbWV0aG9kKCkKCQkgKgkKCQkgKglSZXR1cm5zIHRoZSAoc3RhdGljKSBpc19jb21wYXRpYmlsaXR5X21ldGhvZCBib29sZWFuCgkJICoJCgkJICoJQHJldHVybgkJYm9vbAoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIGdldF9pc19jb21wYXRpYmlsaXR5X21ldGhvZCgpIHsKCQkKCQkJcmV0dXJuIHBsdWdpbmJ1ZGR5X3piemlwemlwYXJjaGl2ZTo6JF9pc19jb21wYXRpYmlsaXR5X21ldGhvZDsKCQkJCgkJfQoJCQoJCS8qKgoJCSAqCWlzX2F2YWlsYWJsZSgpCgkJICoJCgkJICoJQSBmdW5jdGlvbiB0aGF0IHRlc3RzIGZvciB0aGUgYXZhaWxhYmlsaXR5IG9mIHRoZSBzcGVjaWZpYyBtZXRob2QgaW4gdGhlIHJlcXVlc3RlZCBtb2RlCgkJICoJCgkJICoJQHBhcmFtZQlzdHJpbmcJJHRlbXBkaXIJVGVtcG9yYXJ5IGRpcmVjdG9yeSB0byB1c2UgZm9yIGFueSB0ZXN0IGZpbGVzCgkJICoJQHBhcmFtCXN0cmluZwkkbW9kZQkJTWV0aG9kIG1vZGUgdG8gdGVzdCBmb3IKCQkgKglAcGFyYW0JYXJyYXkJJHN0YXR1cwkJQXJyYXkgZm9yIGFueSBzdGF0dXMgbWVzc2FnZXMKCQkgKglAcmV0dXJuCWJvb2wJCQkJVHJ1ZSBpZiB0aGUgbWV0aG9kL21vZGUgY29tYmluYXRpb24gaXMgYXZhaWxhYmxlLCBmYWxzZSBvdGhlcndpc2UKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBpc19hdmFpbGFibGUoICR0ZW1wZGlyLCAkbW9kZSwgJiRzdGF0dXMgKSB7CgkJCgkJCSRyZXN1bHQgPSBmYWxzZTsKCQkJJHppcCA9IE5VTEw7CgkJCQoJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ1ppcEFyY2hpdmUnICkgKSB7CgkJCQoJCQkJJHRlc3RfZmlsZSA9ICR0ZW1wZGlyIC4gJ3RlbXBfdGVzdF8nIC4gdW5pcWlkKCkgLiAnLnppcCc7CgkJCQkKCQkJCSR6aXAgPSBuZXcgWmlwQXJjaGl2ZTsKCQkJCQoJCQkJJHJlcyA9ICR6aXAtPm9wZW4oICR0ZXN0X2ZpbGUsIFpJUEFSQ0hJVkU6OkNSRUFURSB8IFpJUEFSQ0hJVkU6Ok9WRVJXUklURSApOwoJCQkJCgkJCQlpZiAoICRyZXMgPT09IHRydWUgKSB7CgkJCQkKCQkJCQkkemlwLT5hZGRGaWxlKCBfX0ZJTEVfXywgJ3RoaXNfaXNfYV90ZXN0LnR4dCcpOwoJCQkJCSR6aXAtPmNsb3NlKCk7CgkJCQkJCgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggJHRlc3RfZmlsZSApICkgewoJCQkJCQoJCQkJCQlpZiAoICF1bmxpbmsoICR0ZXN0X2ZpbGUgKSApIHsKCQkJCQkKCQkJCQkJCSRzdGF0dXNbXSA9IHNwcmludGYoIF9fKCdFcnJvciAjNTY0NjM0LiBVbmFibGUgdG8gZGVsZXRlIHRlc3QgZmlsZSAoJXMpIScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyksICR0ZXN0X2ZpbGUgKTsKCQkJCQkJCgkJCQkJCX0KCQkJCQkKCQkJCQkJJHN0YXR1c1tdID0gX18oJ1ppcEFyY2hpdmUgdGVzdCBQQVNTRUQuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknKTsKCQkJCQkJJHJlc3VsdCA9IHRydWU7CgkJCQkJCQoJCQkJCX0gZWxzZSB7CgkJCQkJCgkJCQkJCSRzdGF0dXNbXSA9IF9fKCdaaXBBcmNoaXZlIHRlc3QgRkFJTEVEOiBaaXAgZmlsZSBub3QgZm91bmQuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknKTsKCQkJCQkJJHJlc3VsdCA9IGZhbHNlOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQl9IGVsc2UgewoJCQkJCgkJCQkJJHN0YXR1c1tdID0gX18oJ1ppcEFyY2hpdmUgdGVzdCBGQUlMRUQ6IFVuYWJsZSB0byBjcmVhdGUvb3BlbiB6aXAgZmlsZS4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScpOwoJCQkJCSRzdGF0dXNbXSA9IF9fKCdaaXBBcmNoaXZlIEVycm9yOiAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScpIC4gJHJlczsKCQkJCQkkcmVzdWx0ID0gZmFsc2U7CgkJCQkJCgkJCQl9CgkJCQkKCQkJfSBlbHNlIHsKCQkJCgkJCQkkc3RhdHVzW10gPSBfXygnWmlwQXJjaGl2ZSB0ZXN0IEZBSUxFRDogWmlwQXJjaGl2ZSBjbGFzcyBkb2VzIG5vdCBleGlzdC4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScpOwoJCQkJJHJlc3VsdCA9IGZhbHNlOwoJCSAgCgkJICAJfQoJCSAgCQoJCSAgCWlmICggTlVMTCAhPSAkemlwICkgeyB1bnNldCggJHppcCApOyB9CgkJICAJCgkJICAJcmV0dXJuICRyZXN1bHQ7CgkJICAJCgkJfQoJCQoJCS8qKgoJCSAqCWNyZWF0ZSgpCgkJICoJCgkJICoJQSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYW4gYXJjaGl2ZSBmaWxlCgkJICoJCgkJICoJVGhlICRleGNsdWRlcyB3aWxsIGJlIGEgbGlzdCBvciByZWxhdGl2ZSBwYXRoIGV4Y2x1ZGVzIGlmIHRoZSAkbGlzdG1ha2VyIG9iamVjdCBpcyBOVUxMIG90ZWhyd2lzZQoJCSAqCXdpbGwgYmUgYWJzb2x1dGUgcGF0aCBleGNsdWRlcyBhbmQgcmVsYXRpdmUgcGF0aCBleGNsdWRlcyBjYW4gYmUgaGFkIGZyb20gdGhlICRsaXN0bWFrZXIgb2JqZWN0CgkJICoJCgkJICoJQHBhcmFtCQlzdHJpbmcJJHppcAkJCUZ1bGwgcGF0aCAmIGZpbGVuYW1lIG9mIFpJUCBBcmNoaXZlIGZpbGUgdG8gY3JlYXRlCgkJICoJQHBhcmFtCQlzdHJpbmcJJGRpcgkJCUZ1bGwgcGF0aCBvZiBkaXJlY3RvcnkgdG8gYWRkIHRvIFpJUCBBcmNoaXZlIGZpbGUKCQkgKglAcGFyYW0JCWJvb2wJJGNvbXByZXNzaW9uCVRydWUgdG8gZW5hYmxlIGNvbXByZXNzaW9uIG9mIGZpbGVzIGFkZGVkIHRvIFpJUCBBcmNoaXZlIGZpbGUKCQkgKglAcGFyYW1lCQlhcnJheQkkZXhjbHVkZXMJCUxpc3Qgb2YgZWl0aGVyIGFic29sdXRlIHBhdGggZXhjbHVzaW9ucyBvciByZWxhdGl2ZSBleGNsdXNpb25zCgkJICoJQHBhcmFtCQlzdHJpbmcJJHRlbXBkaXIJCUZ1bGwgcGF0aCBvZiBkaXJlY3RvcnkgZm9yIHRlbXBvcmFyeSB1c2FnZQoJCSAqCUBwYXJhbQkJb2JqZWN0CSRsaXN0bWFrZXIJCVRoZSBvYmplY3QgZnJvbSB3aGljaCB3ZSBjYW4gZ2V0IGFuIGluY2x1c2lvbnMgbGlzdAoJCSAqCUByZXR1cm4JCWJvb2wJCQkJCVRydWUgaWYgdGhlIGNyZWF0aW9uIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBvdGhlcndpc2UKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBjcmVhdGUoICR6aXAsICRkaXIsICRjb21wcmVzc2lvbiwgJGV4Y2x1ZGVzLCAkdGVtcGRpciwgJGxpc3RtYWtlciA9IE5VTEwgKSB7CgkJCgkJCSR0aGlzLT5zdGF0dXMoICdkZXRhaWxzJywgX18oJ1RoZSAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScpIC4gJHRoaXMtPmdldF9tZXRob2RfdGFnKCkgLiBfXygnIG1ldGhvZCBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBmb3IgYmFja3VwLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JykgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCQoJCX0KCQkKCX0gLy8gZW5kIHBsdWdpbmJ1ZGR5X3piemlwemlwYXJjaGl2ZSBjbGFzcy4JCgkKfQo/Pg==
###PACKDATA,FILE_END,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php
###PACKDATA,FILE_START,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
###PACKDATA,FILE_START,/classes/view_tools-server.php,importbuddy/classes/view_tools-server.php

###PACKDATA,FILE_END,/classes/view_tools-server.php,importbuddy/classes/view_tools-server.php
###PACKDATA,END
*/